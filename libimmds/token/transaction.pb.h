// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token/transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_token_2ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_token_2ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_token_2ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_token_2ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_token_2ftransaction_2eproto;
class InputId;
class InputIdDefaultTypeInternal;
extern InputIdDefaultTypeInternal _InputId_default_instance_;
class PlainApprove;
class PlainApproveDefaultTypeInternal;
extern PlainApproveDefaultTypeInternal _PlainApprove_default_instance_;
class PlainDelegatedOutput;
class PlainDelegatedOutputDefaultTypeInternal;
extern PlainDelegatedOutputDefaultTypeInternal _PlainDelegatedOutput_default_instance_;
class PlainImport;
class PlainImportDefaultTypeInternal;
extern PlainImportDefaultTypeInternal _PlainImport_default_instance_;
class PlainOutput;
class PlainOutputDefaultTypeInternal;
extern PlainOutputDefaultTypeInternal _PlainOutput_default_instance_;
class PlainTokenAction;
class PlainTokenActionDefaultTypeInternal;
extern PlainTokenActionDefaultTypeInternal _PlainTokenAction_default_instance_;
class PlainTransfer;
class PlainTransferDefaultTypeInternal;
extern PlainTransferDefaultTypeInternal _PlainTransfer_default_instance_;
class PlainTransferFrom;
class PlainTransferFromDefaultTypeInternal;
extern PlainTransferFromDefaultTypeInternal _PlainTransferFrom_default_instance_;
class TokenTransaction;
class TokenTransactionDefaultTypeInternal;
extern TokenTransactionDefaultTypeInternal _TokenTransaction_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::InputId* Arena::CreateMaybeMessage<::InputId>(Arena*);
template<> ::PlainApprove* Arena::CreateMaybeMessage<::PlainApprove>(Arena*);
template<> ::PlainDelegatedOutput* Arena::CreateMaybeMessage<::PlainDelegatedOutput>(Arena*);
template<> ::PlainImport* Arena::CreateMaybeMessage<::PlainImport>(Arena*);
template<> ::PlainOutput* Arena::CreateMaybeMessage<::PlainOutput>(Arena*);
template<> ::PlainTokenAction* Arena::CreateMaybeMessage<::PlainTokenAction>(Arena*);
template<> ::PlainTransfer* Arena::CreateMaybeMessage<::PlainTransfer>(Arena*);
template<> ::PlainTransferFrom* Arena::CreateMaybeMessage<::PlainTransferFrom>(Arena*);
template<> ::TokenTransaction* Arena::CreateMaybeMessage<::TokenTransaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TokenTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TokenTransaction) */ {
 public:
  inline TokenTransaction() : TokenTransaction(nullptr) {};
  virtual ~TokenTransaction();

  TokenTransaction(const TokenTransaction& from);
  TokenTransaction(TokenTransaction&& from) noexcept
    : TokenTransaction() {
    *this = ::std::move(from);
  }

  inline TokenTransaction& operator=(const TokenTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenTransaction& operator=(TokenTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenTransaction& default_instance();

  enum ActionCase {
    kPlainAction = 1,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenTransaction* internal_default_instance() {
    return reinterpret_cast<const TokenTransaction*>(
               &_TokenTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TokenTransaction& a, TokenTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TokenTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenTransaction* New() const final {
    return CreateMaybeMessage<TokenTransaction>(nullptr);
  }

  TokenTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenTransaction& from);
  void MergeFrom(const TokenTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TokenTransaction";
  }
  protected:
  explicit TokenTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2ftransaction_2eproto);
    return ::descriptor_table_token_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlainActionFieldNumber = 1,
  };
  // .PlainTokenAction plain_action = 1;
  bool has_plain_action() const;
  private:
  bool _internal_has_plain_action() const;
  public:
  void clear_plain_action();
  const ::PlainTokenAction& plain_action() const;
  ::PlainTokenAction* release_plain_action();
  ::PlainTokenAction* mutable_plain_action();
  void set_allocated_plain_action(::PlainTokenAction* plain_action);
  private:
  const ::PlainTokenAction& _internal_plain_action() const;
  ::PlainTokenAction* _internal_mutable_plain_action();
  public:
  void unsafe_arena_set_allocated_plain_action(
      ::PlainTokenAction* plain_action);
  ::PlainTokenAction* unsafe_arena_release_plain_action();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:TokenTransaction)
 private:
  class _Internal;
  void set_has_plain_action();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ActionUnion {
    ActionUnion() {}
    ::PlainTokenAction* plain_action_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_token_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PlainTokenAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlainTokenAction) */ {
 public:
  inline PlainTokenAction() : PlainTokenAction(nullptr) {};
  virtual ~PlainTokenAction();

  PlainTokenAction(const PlainTokenAction& from);
  PlainTokenAction(PlainTokenAction&& from) noexcept
    : PlainTokenAction() {
    *this = ::std::move(from);
  }

  inline PlainTokenAction& operator=(const PlainTokenAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlainTokenAction& operator=(PlainTokenAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlainTokenAction& default_instance();

  enum DataCase {
    kPlainImport = 1,
    kPlainTransfer = 2,
    kPlainRedeem = 3,
    kPlainApprove = 4,
    kPlainTransferFrom = 5,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlainTokenAction* internal_default_instance() {
    return reinterpret_cast<const PlainTokenAction*>(
               &_PlainTokenAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlainTokenAction& a, PlainTokenAction& b) {
    a.Swap(&b);
  }
  inline void Swap(PlainTokenAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlainTokenAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlainTokenAction* New() const final {
    return CreateMaybeMessage<PlainTokenAction>(nullptr);
  }

  PlainTokenAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlainTokenAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlainTokenAction& from);
  void MergeFrom(const PlainTokenAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlainTokenAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlainTokenAction";
  }
  protected:
  explicit PlainTokenAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2ftransaction_2eproto);
    return ::descriptor_table_token_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlainImportFieldNumber = 1,
    kPlainTransferFieldNumber = 2,
    kPlainRedeemFieldNumber = 3,
    kPlainApproveFieldNumber = 4,
    kPlainTransferFromFieldNumber = 5,
  };
  // .PlainImport plain_import = 1;
  bool has_plain_import() const;
  private:
  bool _internal_has_plain_import() const;
  public:
  void clear_plain_import();
  const ::PlainImport& plain_import() const;
  ::PlainImport* release_plain_import();
  ::PlainImport* mutable_plain_import();
  void set_allocated_plain_import(::PlainImport* plain_import);
  private:
  const ::PlainImport& _internal_plain_import() const;
  ::PlainImport* _internal_mutable_plain_import();
  public:
  void unsafe_arena_set_allocated_plain_import(
      ::PlainImport* plain_import);
  ::PlainImport* unsafe_arena_release_plain_import();

  // .PlainTransfer plain_transfer = 2;
  bool has_plain_transfer() const;
  private:
  bool _internal_has_plain_transfer() const;
  public:
  void clear_plain_transfer();
  const ::PlainTransfer& plain_transfer() const;
  ::PlainTransfer* release_plain_transfer();
  ::PlainTransfer* mutable_plain_transfer();
  void set_allocated_plain_transfer(::PlainTransfer* plain_transfer);
  private:
  const ::PlainTransfer& _internal_plain_transfer() const;
  ::PlainTransfer* _internal_mutable_plain_transfer();
  public:
  void unsafe_arena_set_allocated_plain_transfer(
      ::PlainTransfer* plain_transfer);
  ::PlainTransfer* unsafe_arena_release_plain_transfer();

  // .PlainTransfer plain_redeem = 3;
  bool has_plain_redeem() const;
  private:
  bool _internal_has_plain_redeem() const;
  public:
  void clear_plain_redeem();
  const ::PlainTransfer& plain_redeem() const;
  ::PlainTransfer* release_plain_redeem();
  ::PlainTransfer* mutable_plain_redeem();
  void set_allocated_plain_redeem(::PlainTransfer* plain_redeem);
  private:
  const ::PlainTransfer& _internal_plain_redeem() const;
  ::PlainTransfer* _internal_mutable_plain_redeem();
  public:
  void unsafe_arena_set_allocated_plain_redeem(
      ::PlainTransfer* plain_redeem);
  ::PlainTransfer* unsafe_arena_release_plain_redeem();

  // .PlainApprove plain_approve = 4;
  bool has_plain_approve() const;
  private:
  bool _internal_has_plain_approve() const;
  public:
  void clear_plain_approve();
  const ::PlainApprove& plain_approve() const;
  ::PlainApprove* release_plain_approve();
  ::PlainApprove* mutable_plain_approve();
  void set_allocated_plain_approve(::PlainApprove* plain_approve);
  private:
  const ::PlainApprove& _internal_plain_approve() const;
  ::PlainApprove* _internal_mutable_plain_approve();
  public:
  void unsafe_arena_set_allocated_plain_approve(
      ::PlainApprove* plain_approve);
  ::PlainApprove* unsafe_arena_release_plain_approve();

  // .PlainTransferFrom plain_transfer_From = 5;
  bool has_plain_transfer_from() const;
  private:
  bool _internal_has_plain_transfer_from() const;
  public:
  void clear_plain_transfer_from();
  const ::PlainTransferFrom& plain_transfer_from() const;
  ::PlainTransferFrom* release_plain_transfer_from();
  ::PlainTransferFrom* mutable_plain_transfer_from();
  void set_allocated_plain_transfer_from(::PlainTransferFrom* plain_transfer_from);
  private:
  const ::PlainTransferFrom& _internal_plain_transfer_from() const;
  ::PlainTransferFrom* _internal_mutable_plain_transfer_from();
  public:
  void unsafe_arena_set_allocated_plain_transfer_from(
      ::PlainTransferFrom* plain_transfer_from);
  ::PlainTransferFrom* unsafe_arena_release_plain_transfer_from();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:PlainTokenAction)
 private:
  class _Internal;
  void set_has_plain_import();
  void set_has_plain_transfer();
  void set_has_plain_redeem();
  void set_has_plain_approve();
  void set_has_plain_transfer_from();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::PlainImport* plain_import_;
    ::PlainTransfer* plain_transfer_;
    ::PlainTransfer* plain_redeem_;
    ::PlainApprove* plain_approve_;
    ::PlainTransferFrom* plain_transfer_from_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_token_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PlainImport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlainImport) */ {
 public:
  inline PlainImport() : PlainImport(nullptr) {};
  virtual ~PlainImport();

  PlainImport(const PlainImport& from);
  PlainImport(PlainImport&& from) noexcept
    : PlainImport() {
    *this = ::std::move(from);
  }

  inline PlainImport& operator=(const PlainImport& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlainImport& operator=(PlainImport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlainImport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlainImport* internal_default_instance() {
    return reinterpret_cast<const PlainImport*>(
               &_PlainImport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlainImport& a, PlainImport& b) {
    a.Swap(&b);
  }
  inline void Swap(PlainImport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlainImport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlainImport* New() const final {
    return CreateMaybeMessage<PlainImport>(nullptr);
  }

  PlainImport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlainImport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlainImport& from);
  void MergeFrom(const PlainImport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlainImport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlainImport";
  }
  protected:
  explicit PlainImport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2ftransaction_2eproto);
    return ::descriptor_table_token_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 1,
  };
  // repeated .PlainOutput outputs = 1;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::PlainOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >*
      mutable_outputs();
  private:
  const ::PlainOutput& _internal_outputs(int index) const;
  ::PlainOutput* _internal_add_outputs();
  public:
  const ::PlainOutput& outputs(int index) const;
  ::PlainOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >&
      outputs() const;

  // @@protoc_insertion_point(class_scope:PlainImport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput > outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PlainTransfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlainTransfer) */ {
 public:
  inline PlainTransfer() : PlainTransfer(nullptr) {};
  virtual ~PlainTransfer();

  PlainTransfer(const PlainTransfer& from);
  PlainTransfer(PlainTransfer&& from) noexcept
    : PlainTransfer() {
    *this = ::std::move(from);
  }

  inline PlainTransfer& operator=(const PlainTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlainTransfer& operator=(PlainTransfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlainTransfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlainTransfer* internal_default_instance() {
    return reinterpret_cast<const PlainTransfer*>(
               &_PlainTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlainTransfer& a, PlainTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(PlainTransfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlainTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlainTransfer* New() const final {
    return CreateMaybeMessage<PlainTransfer>(nullptr);
  }

  PlainTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlainTransfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlainTransfer& from);
  void MergeFrom(const PlainTransfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlainTransfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlainTransfer";
  }
  protected:
  explicit PlainTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2ftransaction_2eproto);
    return ::descriptor_table_token_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
  };
  // repeated .InputId inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::InputId* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >*
      mutable_inputs();
  private:
  const ::InputId& _internal_inputs(int index) const;
  ::InputId* _internal_add_inputs();
  public:
  const ::InputId& inputs(int index) const;
  ::InputId* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >&
      inputs() const;

  // repeated .PlainOutput outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::PlainOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >*
      mutable_outputs();
  private:
  const ::PlainOutput& _internal_outputs(int index) const;
  ::PlainOutput* _internal_add_outputs();
  public:
  const ::PlainOutput& outputs(int index) const;
  ::PlainOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >&
      outputs() const;

  // @@protoc_insertion_point(class_scope:PlainTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput > outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PlainApprove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlainApprove) */ {
 public:
  inline PlainApprove() : PlainApprove(nullptr) {};
  virtual ~PlainApprove();

  PlainApprove(const PlainApprove& from);
  PlainApprove(PlainApprove&& from) noexcept
    : PlainApprove() {
    *this = ::std::move(from);
  }

  inline PlainApprove& operator=(const PlainApprove& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlainApprove& operator=(PlainApprove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlainApprove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlainApprove* internal_default_instance() {
    return reinterpret_cast<const PlainApprove*>(
               &_PlainApprove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlainApprove& a, PlainApprove& b) {
    a.Swap(&b);
  }
  inline void Swap(PlainApprove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlainApprove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlainApprove* New() const final {
    return CreateMaybeMessage<PlainApprove>(nullptr);
  }

  PlainApprove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlainApprove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlainApprove& from);
  void MergeFrom(const PlainApprove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlainApprove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlainApprove";
  }
  protected:
  explicit PlainApprove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2ftransaction_2eproto);
    return ::descriptor_table_token_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kDelegatedOutputsFieldNumber = 2,
    kOutputFieldNumber = 3,
  };
  // repeated .InputId inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::InputId* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >*
      mutable_inputs();
  private:
  const ::InputId& _internal_inputs(int index) const;
  ::InputId* _internal_add_inputs();
  public:
  const ::InputId& inputs(int index) const;
  ::InputId* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >&
      inputs() const;

  // repeated .PlainDelegatedOutput delegated_outputs = 2;
  int delegated_outputs_size() const;
  private:
  int _internal_delegated_outputs_size() const;
  public:
  void clear_delegated_outputs();
  ::PlainDelegatedOutput* mutable_delegated_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainDelegatedOutput >*
      mutable_delegated_outputs();
  private:
  const ::PlainDelegatedOutput& _internal_delegated_outputs(int index) const;
  ::PlainDelegatedOutput* _internal_add_delegated_outputs();
  public:
  const ::PlainDelegatedOutput& delegated_outputs(int index) const;
  ::PlainDelegatedOutput* add_delegated_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainDelegatedOutput >&
      delegated_outputs() const;

  // .PlainOutput output = 3;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::PlainOutput& output() const;
  ::PlainOutput* release_output();
  ::PlainOutput* mutable_output();
  void set_allocated_output(::PlainOutput* output);
  private:
  const ::PlainOutput& _internal_output() const;
  ::PlainOutput* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::PlainOutput* output);
  ::PlainOutput* unsafe_arena_release_output();

  // @@protoc_insertion_point(class_scope:PlainApprove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainDelegatedOutput > delegated_outputs_;
  ::PlainOutput* output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PlainTransferFrom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlainTransferFrom) */ {
 public:
  inline PlainTransferFrom() : PlainTransferFrom(nullptr) {};
  virtual ~PlainTransferFrom();

  PlainTransferFrom(const PlainTransferFrom& from);
  PlainTransferFrom(PlainTransferFrom&& from) noexcept
    : PlainTransferFrom() {
    *this = ::std::move(from);
  }

  inline PlainTransferFrom& operator=(const PlainTransferFrom& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlainTransferFrom& operator=(PlainTransferFrom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlainTransferFrom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlainTransferFrom* internal_default_instance() {
    return reinterpret_cast<const PlainTransferFrom*>(
               &_PlainTransferFrom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlainTransferFrom& a, PlainTransferFrom& b) {
    a.Swap(&b);
  }
  inline void Swap(PlainTransferFrom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlainTransferFrom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlainTransferFrom* New() const final {
    return CreateMaybeMessage<PlainTransferFrom>(nullptr);
  }

  PlainTransferFrom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlainTransferFrom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlainTransferFrom& from);
  void MergeFrom(const PlainTransferFrom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlainTransferFrom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlainTransferFrom";
  }
  protected:
  explicit PlainTransferFrom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2ftransaction_2eproto);
    return ::descriptor_table_token_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
    kDelegatedOutputFieldNumber = 3,
  };
  // repeated .InputId inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::InputId* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >*
      mutable_inputs();
  private:
  const ::InputId& _internal_inputs(int index) const;
  ::InputId* _internal_add_inputs();
  public:
  const ::InputId& inputs(int index) const;
  ::InputId* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >&
      inputs() const;

  // repeated .PlainOutput outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::PlainOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >*
      mutable_outputs();
  private:
  const ::PlainOutput& _internal_outputs(int index) const;
  ::PlainOutput* _internal_add_outputs();
  public:
  const ::PlainOutput& outputs(int index) const;
  ::PlainOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >&
      outputs() const;

  // .PlainDelegatedOutput delegated_output = 3;
  bool has_delegated_output() const;
  private:
  bool _internal_has_delegated_output() const;
  public:
  void clear_delegated_output();
  const ::PlainDelegatedOutput& delegated_output() const;
  ::PlainDelegatedOutput* release_delegated_output();
  ::PlainDelegatedOutput* mutable_delegated_output();
  void set_allocated_delegated_output(::PlainDelegatedOutput* delegated_output);
  private:
  const ::PlainDelegatedOutput& _internal_delegated_output() const;
  ::PlainDelegatedOutput* _internal_mutable_delegated_output();
  public:
  void unsafe_arena_set_allocated_delegated_output(
      ::PlainDelegatedOutput* delegated_output);
  ::PlainDelegatedOutput* unsafe_arena_release_delegated_output();

  // @@protoc_insertion_point(class_scope:PlainTransferFrom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput > outputs_;
  ::PlainDelegatedOutput* delegated_output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PlainOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlainOutput) */ {
 public:
  inline PlainOutput() : PlainOutput(nullptr) {};
  virtual ~PlainOutput();

  PlainOutput(const PlainOutput& from);
  PlainOutput(PlainOutput&& from) noexcept
    : PlainOutput() {
    *this = ::std::move(from);
  }

  inline PlainOutput& operator=(const PlainOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlainOutput& operator=(PlainOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlainOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlainOutput* internal_default_instance() {
    return reinterpret_cast<const PlainOutput*>(
               &_PlainOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlainOutput& a, PlainOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(PlainOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlainOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlainOutput* New() const final {
    return CreateMaybeMessage<PlainOutput>(nullptr);
  }

  PlainOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlainOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlainOutput& from);
  void MergeFrom(const PlainOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlainOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlainOutput";
  }
  protected:
  explicit PlainOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2ftransaction_2eproto);
    return ::descriptor_table_token_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kTypeFieldNumber = 2,
    kQuantityFieldNumber = 3,
  };
  // bytes owner = 1;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const void* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_owner();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_owner(
      std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 quantity = 3;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:PlainOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class InputId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InputId) */ {
 public:
  inline InputId() : InputId(nullptr) {};
  virtual ~InputId();

  InputId(const InputId& from);
  InputId(InputId&& from) noexcept
    : InputId() {
    *this = ::std::move(from);
  }

  inline InputId& operator=(const InputId& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputId& operator=(InputId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputId* internal_default_instance() {
    return reinterpret_cast<const InputId*>(
               &_InputId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InputId& a, InputId& b) {
    a.Swap(&b);
  }
  inline void Swap(InputId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputId* New() const final {
    return CreateMaybeMessage<InputId>(nullptr);
  }

  InputId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputId& from);
  void MergeFrom(const InputId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InputId";
  }
  protected:
  explicit InputId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2ftransaction_2eproto);
    return ::descriptor_table_token_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string tx_id = 1;
  void clear_tx_id();
  const std::string& tx_id() const;
  void set_tx_id(const std::string& value);
  void set_tx_id(std::string&& value);
  void set_tx_id(const char* value);
  void set_tx_id(const char* value, size_t size);
  std::string* mutable_tx_id();
  std::string* release_tx_id();
  void set_allocated_tx_id(std::string* tx_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tx_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tx_id(
      std::string* tx_id);
  private:
  const std::string& _internal_tx_id() const;
  void _internal_set_tx_id(const std::string& value);
  std::string* _internal_mutable_tx_id();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:InputId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class PlainDelegatedOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlainDelegatedOutput) */ {
 public:
  inline PlainDelegatedOutput() : PlainDelegatedOutput(nullptr) {};
  virtual ~PlainDelegatedOutput();

  PlainDelegatedOutput(const PlainDelegatedOutput& from);
  PlainDelegatedOutput(PlainDelegatedOutput&& from) noexcept
    : PlainDelegatedOutput() {
    *this = ::std::move(from);
  }

  inline PlainDelegatedOutput& operator=(const PlainDelegatedOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlainDelegatedOutput& operator=(PlainDelegatedOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlainDelegatedOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlainDelegatedOutput* internal_default_instance() {
    return reinterpret_cast<const PlainDelegatedOutput*>(
               &_PlainDelegatedOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PlainDelegatedOutput& a, PlainDelegatedOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(PlainDelegatedOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlainDelegatedOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlainDelegatedOutput* New() const final {
    return CreateMaybeMessage<PlainDelegatedOutput>(nullptr);
  }

  PlainDelegatedOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlainDelegatedOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlainDelegatedOutput& from);
  void MergeFrom(const PlainDelegatedOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlainDelegatedOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlainDelegatedOutput";
  }
  protected:
  explicit PlainDelegatedOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_token_2ftransaction_2eproto);
    return ::descriptor_table_token_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegateesFieldNumber = 2,
    kOwnerFieldNumber = 1,
    kTypeFieldNumber = 3,
    kQuantityFieldNumber = 4,
  };
  // repeated bytes delegatees = 2;
  int delegatees_size() const;
  private:
  int _internal_delegatees_size() const;
  public:
  void clear_delegatees();
  const std::string& delegatees(int index) const;
  std::string* mutable_delegatees(int index);
  void set_delegatees(int index, const std::string& value);
  void set_delegatees(int index, std::string&& value);
  void set_delegatees(int index, const char* value);
  void set_delegatees(int index, const void* value, size_t size);
  std::string* add_delegatees();
  void add_delegatees(const std::string& value);
  void add_delegatees(std::string&& value);
  void add_delegatees(const char* value);
  void add_delegatees(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& delegatees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_delegatees();
  private:
  const std::string& _internal_delegatees(int index) const;
  std::string* _internal_add_delegatees();
  public:

  // bytes owner = 1;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const void* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_owner();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_owner(
      std::string* owner);
  private:
  const std::string& _internal_owner() const;
  void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 quantity = 4;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:PlainDelegatedOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> delegatees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_token_2ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TokenTransaction

// .PlainTokenAction plain_action = 1;
inline bool TokenTransaction::_internal_has_plain_action() const {
  return action_case() == kPlainAction;
}
inline bool TokenTransaction::has_plain_action() const {
  return _internal_has_plain_action();
}
inline void TokenTransaction::set_has_plain_action() {
  _oneof_case_[0] = kPlainAction;
}
inline void TokenTransaction::clear_plain_action() {
  if (_internal_has_plain_action()) {
    if (GetArena() == nullptr) {
      delete action_.plain_action_;
    }
    clear_has_action();
  }
}
inline ::PlainTokenAction* TokenTransaction::release_plain_action() {
  // @@protoc_insertion_point(field_release:TokenTransaction.plain_action)
  if (_internal_has_plain_action()) {
    clear_has_action();
      ::PlainTokenAction* temp = action_.plain_action_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.plain_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlainTokenAction& TokenTransaction::_internal_plain_action() const {
  return _internal_has_plain_action()
      ? *action_.plain_action_
      : *reinterpret_cast< ::PlainTokenAction*>(&::_PlainTokenAction_default_instance_);
}
inline const ::PlainTokenAction& TokenTransaction::plain_action() const {
  // @@protoc_insertion_point(field_get:TokenTransaction.plain_action)
  return _internal_plain_action();
}
inline ::PlainTokenAction* TokenTransaction::unsafe_arena_release_plain_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TokenTransaction.plain_action)
  if (_internal_has_plain_action()) {
    clear_has_action();
    ::PlainTokenAction* temp = action_.plain_action_;
    action_.plain_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TokenTransaction::unsafe_arena_set_allocated_plain_action(::PlainTokenAction* plain_action) {
  clear_action();
  if (plain_action) {
    set_has_plain_action();
    action_.plain_action_ = plain_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TokenTransaction.plain_action)
}
inline ::PlainTokenAction* TokenTransaction::_internal_mutable_plain_action() {
  if (!_internal_has_plain_action()) {
    clear_action();
    set_has_plain_action();
    action_.plain_action_ = CreateMaybeMessage< ::PlainTokenAction >(GetArena());
  }
  return action_.plain_action_;
}
inline ::PlainTokenAction* TokenTransaction::mutable_plain_action() {
  // @@protoc_insertion_point(field_mutable:TokenTransaction.plain_action)
  return _internal_mutable_plain_action();
}

inline bool TokenTransaction::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void TokenTransaction::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline TokenTransaction::ActionCase TokenTransaction::action_case() const {
  return TokenTransaction::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PlainTokenAction

// .PlainImport plain_import = 1;
inline bool PlainTokenAction::_internal_has_plain_import() const {
  return data_case() == kPlainImport;
}
inline bool PlainTokenAction::has_plain_import() const {
  return _internal_has_plain_import();
}
inline void PlainTokenAction::set_has_plain_import() {
  _oneof_case_[0] = kPlainImport;
}
inline void PlainTokenAction::clear_plain_import() {
  if (_internal_has_plain_import()) {
    if (GetArena() == nullptr) {
      delete data_.plain_import_;
    }
    clear_has_data();
  }
}
inline ::PlainImport* PlainTokenAction::release_plain_import() {
  // @@protoc_insertion_point(field_release:PlainTokenAction.plain_import)
  if (_internal_has_plain_import()) {
    clear_has_data();
      ::PlainImport* temp = data_.plain_import_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.plain_import_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlainImport& PlainTokenAction::_internal_plain_import() const {
  return _internal_has_plain_import()
      ? *data_.plain_import_
      : *reinterpret_cast< ::PlainImport*>(&::_PlainImport_default_instance_);
}
inline const ::PlainImport& PlainTokenAction::plain_import() const {
  // @@protoc_insertion_point(field_get:PlainTokenAction.plain_import)
  return _internal_plain_import();
}
inline ::PlainImport* PlainTokenAction::unsafe_arena_release_plain_import() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlainTokenAction.plain_import)
  if (_internal_has_plain_import()) {
    clear_has_data();
    ::PlainImport* temp = data_.plain_import_;
    data_.plain_import_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlainTokenAction::unsafe_arena_set_allocated_plain_import(::PlainImport* plain_import) {
  clear_data();
  if (plain_import) {
    set_has_plain_import();
    data_.plain_import_ = plain_import;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainTokenAction.plain_import)
}
inline ::PlainImport* PlainTokenAction::_internal_mutable_plain_import() {
  if (!_internal_has_plain_import()) {
    clear_data();
    set_has_plain_import();
    data_.plain_import_ = CreateMaybeMessage< ::PlainImport >(GetArena());
  }
  return data_.plain_import_;
}
inline ::PlainImport* PlainTokenAction::mutable_plain_import() {
  // @@protoc_insertion_point(field_mutable:PlainTokenAction.plain_import)
  return _internal_mutable_plain_import();
}

// .PlainTransfer plain_transfer = 2;
inline bool PlainTokenAction::_internal_has_plain_transfer() const {
  return data_case() == kPlainTransfer;
}
inline bool PlainTokenAction::has_plain_transfer() const {
  return _internal_has_plain_transfer();
}
inline void PlainTokenAction::set_has_plain_transfer() {
  _oneof_case_[0] = kPlainTransfer;
}
inline void PlainTokenAction::clear_plain_transfer() {
  if (_internal_has_plain_transfer()) {
    if (GetArena() == nullptr) {
      delete data_.plain_transfer_;
    }
    clear_has_data();
  }
}
inline ::PlainTransfer* PlainTokenAction::release_plain_transfer() {
  // @@protoc_insertion_point(field_release:PlainTokenAction.plain_transfer)
  if (_internal_has_plain_transfer()) {
    clear_has_data();
      ::PlainTransfer* temp = data_.plain_transfer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.plain_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlainTransfer& PlainTokenAction::_internal_plain_transfer() const {
  return _internal_has_plain_transfer()
      ? *data_.plain_transfer_
      : *reinterpret_cast< ::PlainTransfer*>(&::_PlainTransfer_default_instance_);
}
inline const ::PlainTransfer& PlainTokenAction::plain_transfer() const {
  // @@protoc_insertion_point(field_get:PlainTokenAction.plain_transfer)
  return _internal_plain_transfer();
}
inline ::PlainTransfer* PlainTokenAction::unsafe_arena_release_plain_transfer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlainTokenAction.plain_transfer)
  if (_internal_has_plain_transfer()) {
    clear_has_data();
    ::PlainTransfer* temp = data_.plain_transfer_;
    data_.plain_transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlainTokenAction::unsafe_arena_set_allocated_plain_transfer(::PlainTransfer* plain_transfer) {
  clear_data();
  if (plain_transfer) {
    set_has_plain_transfer();
    data_.plain_transfer_ = plain_transfer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainTokenAction.plain_transfer)
}
inline ::PlainTransfer* PlainTokenAction::_internal_mutable_plain_transfer() {
  if (!_internal_has_plain_transfer()) {
    clear_data();
    set_has_plain_transfer();
    data_.plain_transfer_ = CreateMaybeMessage< ::PlainTransfer >(GetArena());
  }
  return data_.plain_transfer_;
}
inline ::PlainTransfer* PlainTokenAction::mutable_plain_transfer() {
  // @@protoc_insertion_point(field_mutable:PlainTokenAction.plain_transfer)
  return _internal_mutable_plain_transfer();
}

// .PlainTransfer plain_redeem = 3;
inline bool PlainTokenAction::_internal_has_plain_redeem() const {
  return data_case() == kPlainRedeem;
}
inline bool PlainTokenAction::has_plain_redeem() const {
  return _internal_has_plain_redeem();
}
inline void PlainTokenAction::set_has_plain_redeem() {
  _oneof_case_[0] = kPlainRedeem;
}
inline void PlainTokenAction::clear_plain_redeem() {
  if (_internal_has_plain_redeem()) {
    if (GetArena() == nullptr) {
      delete data_.plain_redeem_;
    }
    clear_has_data();
  }
}
inline ::PlainTransfer* PlainTokenAction::release_plain_redeem() {
  // @@protoc_insertion_point(field_release:PlainTokenAction.plain_redeem)
  if (_internal_has_plain_redeem()) {
    clear_has_data();
      ::PlainTransfer* temp = data_.plain_redeem_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.plain_redeem_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlainTransfer& PlainTokenAction::_internal_plain_redeem() const {
  return _internal_has_plain_redeem()
      ? *data_.plain_redeem_
      : *reinterpret_cast< ::PlainTransfer*>(&::_PlainTransfer_default_instance_);
}
inline const ::PlainTransfer& PlainTokenAction::plain_redeem() const {
  // @@protoc_insertion_point(field_get:PlainTokenAction.plain_redeem)
  return _internal_plain_redeem();
}
inline ::PlainTransfer* PlainTokenAction::unsafe_arena_release_plain_redeem() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlainTokenAction.plain_redeem)
  if (_internal_has_plain_redeem()) {
    clear_has_data();
    ::PlainTransfer* temp = data_.plain_redeem_;
    data_.plain_redeem_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlainTokenAction::unsafe_arena_set_allocated_plain_redeem(::PlainTransfer* plain_redeem) {
  clear_data();
  if (plain_redeem) {
    set_has_plain_redeem();
    data_.plain_redeem_ = plain_redeem;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainTokenAction.plain_redeem)
}
inline ::PlainTransfer* PlainTokenAction::_internal_mutable_plain_redeem() {
  if (!_internal_has_plain_redeem()) {
    clear_data();
    set_has_plain_redeem();
    data_.plain_redeem_ = CreateMaybeMessage< ::PlainTransfer >(GetArena());
  }
  return data_.plain_redeem_;
}
inline ::PlainTransfer* PlainTokenAction::mutable_plain_redeem() {
  // @@protoc_insertion_point(field_mutable:PlainTokenAction.plain_redeem)
  return _internal_mutable_plain_redeem();
}

// .PlainApprove plain_approve = 4;
inline bool PlainTokenAction::_internal_has_plain_approve() const {
  return data_case() == kPlainApprove;
}
inline bool PlainTokenAction::has_plain_approve() const {
  return _internal_has_plain_approve();
}
inline void PlainTokenAction::set_has_plain_approve() {
  _oneof_case_[0] = kPlainApprove;
}
inline void PlainTokenAction::clear_plain_approve() {
  if (_internal_has_plain_approve()) {
    if (GetArena() == nullptr) {
      delete data_.plain_approve_;
    }
    clear_has_data();
  }
}
inline ::PlainApprove* PlainTokenAction::release_plain_approve() {
  // @@protoc_insertion_point(field_release:PlainTokenAction.plain_approve)
  if (_internal_has_plain_approve()) {
    clear_has_data();
      ::PlainApprove* temp = data_.plain_approve_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.plain_approve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlainApprove& PlainTokenAction::_internal_plain_approve() const {
  return _internal_has_plain_approve()
      ? *data_.plain_approve_
      : *reinterpret_cast< ::PlainApprove*>(&::_PlainApprove_default_instance_);
}
inline const ::PlainApprove& PlainTokenAction::plain_approve() const {
  // @@protoc_insertion_point(field_get:PlainTokenAction.plain_approve)
  return _internal_plain_approve();
}
inline ::PlainApprove* PlainTokenAction::unsafe_arena_release_plain_approve() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlainTokenAction.plain_approve)
  if (_internal_has_plain_approve()) {
    clear_has_data();
    ::PlainApprove* temp = data_.plain_approve_;
    data_.plain_approve_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlainTokenAction::unsafe_arena_set_allocated_plain_approve(::PlainApprove* plain_approve) {
  clear_data();
  if (plain_approve) {
    set_has_plain_approve();
    data_.plain_approve_ = plain_approve;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainTokenAction.plain_approve)
}
inline ::PlainApprove* PlainTokenAction::_internal_mutable_plain_approve() {
  if (!_internal_has_plain_approve()) {
    clear_data();
    set_has_plain_approve();
    data_.plain_approve_ = CreateMaybeMessage< ::PlainApprove >(GetArena());
  }
  return data_.plain_approve_;
}
inline ::PlainApprove* PlainTokenAction::mutable_plain_approve() {
  // @@protoc_insertion_point(field_mutable:PlainTokenAction.plain_approve)
  return _internal_mutable_plain_approve();
}

// .PlainTransferFrom plain_transfer_From = 5;
inline bool PlainTokenAction::_internal_has_plain_transfer_from() const {
  return data_case() == kPlainTransferFrom;
}
inline bool PlainTokenAction::has_plain_transfer_from() const {
  return _internal_has_plain_transfer_from();
}
inline void PlainTokenAction::set_has_plain_transfer_from() {
  _oneof_case_[0] = kPlainTransferFrom;
}
inline void PlainTokenAction::clear_plain_transfer_from() {
  if (_internal_has_plain_transfer_from()) {
    if (GetArena() == nullptr) {
      delete data_.plain_transfer_from_;
    }
    clear_has_data();
  }
}
inline ::PlainTransferFrom* PlainTokenAction::release_plain_transfer_from() {
  // @@protoc_insertion_point(field_release:PlainTokenAction.plain_transfer_From)
  if (_internal_has_plain_transfer_from()) {
    clear_has_data();
      ::PlainTransferFrom* temp = data_.plain_transfer_from_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.plain_transfer_from_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlainTransferFrom& PlainTokenAction::_internal_plain_transfer_from() const {
  return _internal_has_plain_transfer_from()
      ? *data_.plain_transfer_from_
      : *reinterpret_cast< ::PlainTransferFrom*>(&::_PlainTransferFrom_default_instance_);
}
inline const ::PlainTransferFrom& PlainTokenAction::plain_transfer_from() const {
  // @@protoc_insertion_point(field_get:PlainTokenAction.plain_transfer_From)
  return _internal_plain_transfer_from();
}
inline ::PlainTransferFrom* PlainTokenAction::unsafe_arena_release_plain_transfer_from() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlainTokenAction.plain_transfer_From)
  if (_internal_has_plain_transfer_from()) {
    clear_has_data();
    ::PlainTransferFrom* temp = data_.plain_transfer_from_;
    data_.plain_transfer_from_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlainTokenAction::unsafe_arena_set_allocated_plain_transfer_from(::PlainTransferFrom* plain_transfer_from) {
  clear_data();
  if (plain_transfer_from) {
    set_has_plain_transfer_from();
    data_.plain_transfer_from_ = plain_transfer_from;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainTokenAction.plain_transfer_From)
}
inline ::PlainTransferFrom* PlainTokenAction::_internal_mutable_plain_transfer_from() {
  if (!_internal_has_plain_transfer_from()) {
    clear_data();
    set_has_plain_transfer_from();
    data_.plain_transfer_from_ = CreateMaybeMessage< ::PlainTransferFrom >(GetArena());
  }
  return data_.plain_transfer_from_;
}
inline ::PlainTransferFrom* PlainTokenAction::mutable_plain_transfer_from() {
  // @@protoc_insertion_point(field_mutable:PlainTokenAction.plain_transfer_From)
  return _internal_mutable_plain_transfer_from();
}

inline bool PlainTokenAction::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PlainTokenAction::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PlainTokenAction::DataCase PlainTokenAction::data_case() const {
  return PlainTokenAction::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PlainImport

// repeated .PlainOutput outputs = 1;
inline int PlainImport::_internal_outputs_size() const {
  return outputs_.size();
}
inline int PlainImport::outputs_size() const {
  return _internal_outputs_size();
}
inline void PlainImport::clear_outputs() {
  outputs_.Clear();
}
inline ::PlainOutput* PlainImport::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:PlainImport.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >*
PlainImport::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:PlainImport.outputs)
  return &outputs_;
}
inline const ::PlainOutput& PlainImport::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::PlainOutput& PlainImport::outputs(int index) const {
  // @@protoc_insertion_point(field_get:PlainImport.outputs)
  return _internal_outputs(index);
}
inline ::PlainOutput* PlainImport::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::PlainOutput* PlainImport::add_outputs() {
  // @@protoc_insertion_point(field_add:PlainImport.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >&
PlainImport::outputs() const {
  // @@protoc_insertion_point(field_list:PlainImport.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// PlainTransfer

// repeated .InputId inputs = 1;
inline int PlainTransfer::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PlainTransfer::inputs_size() const {
  return _internal_inputs_size();
}
inline void PlainTransfer::clear_inputs() {
  inputs_.Clear();
}
inline ::InputId* PlainTransfer::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:PlainTransfer.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >*
PlainTransfer::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:PlainTransfer.inputs)
  return &inputs_;
}
inline const ::InputId& PlainTransfer::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::InputId& PlainTransfer::inputs(int index) const {
  // @@protoc_insertion_point(field_get:PlainTransfer.inputs)
  return _internal_inputs(index);
}
inline ::InputId* PlainTransfer::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::InputId* PlainTransfer::add_inputs() {
  // @@protoc_insertion_point(field_add:PlainTransfer.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >&
PlainTransfer::inputs() const {
  // @@protoc_insertion_point(field_list:PlainTransfer.inputs)
  return inputs_;
}

// repeated .PlainOutput outputs = 2;
inline int PlainTransfer::_internal_outputs_size() const {
  return outputs_.size();
}
inline int PlainTransfer::outputs_size() const {
  return _internal_outputs_size();
}
inline void PlainTransfer::clear_outputs() {
  outputs_.Clear();
}
inline ::PlainOutput* PlainTransfer::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:PlainTransfer.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >*
PlainTransfer::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:PlainTransfer.outputs)
  return &outputs_;
}
inline const ::PlainOutput& PlainTransfer::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::PlainOutput& PlainTransfer::outputs(int index) const {
  // @@protoc_insertion_point(field_get:PlainTransfer.outputs)
  return _internal_outputs(index);
}
inline ::PlainOutput* PlainTransfer::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::PlainOutput* PlainTransfer::add_outputs() {
  // @@protoc_insertion_point(field_add:PlainTransfer.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >&
PlainTransfer::outputs() const {
  // @@protoc_insertion_point(field_list:PlainTransfer.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// PlainApprove

// repeated .InputId inputs = 1;
inline int PlainApprove::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PlainApprove::inputs_size() const {
  return _internal_inputs_size();
}
inline void PlainApprove::clear_inputs() {
  inputs_.Clear();
}
inline ::InputId* PlainApprove::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:PlainApprove.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >*
PlainApprove::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:PlainApprove.inputs)
  return &inputs_;
}
inline const ::InputId& PlainApprove::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::InputId& PlainApprove::inputs(int index) const {
  // @@protoc_insertion_point(field_get:PlainApprove.inputs)
  return _internal_inputs(index);
}
inline ::InputId* PlainApprove::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::InputId* PlainApprove::add_inputs() {
  // @@protoc_insertion_point(field_add:PlainApprove.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >&
PlainApprove::inputs() const {
  // @@protoc_insertion_point(field_list:PlainApprove.inputs)
  return inputs_;
}

// repeated .PlainDelegatedOutput delegated_outputs = 2;
inline int PlainApprove::_internal_delegated_outputs_size() const {
  return delegated_outputs_.size();
}
inline int PlainApprove::delegated_outputs_size() const {
  return _internal_delegated_outputs_size();
}
inline void PlainApprove::clear_delegated_outputs() {
  delegated_outputs_.Clear();
}
inline ::PlainDelegatedOutput* PlainApprove::mutable_delegated_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:PlainApprove.delegated_outputs)
  return delegated_outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainDelegatedOutput >*
PlainApprove::mutable_delegated_outputs() {
  // @@protoc_insertion_point(field_mutable_list:PlainApprove.delegated_outputs)
  return &delegated_outputs_;
}
inline const ::PlainDelegatedOutput& PlainApprove::_internal_delegated_outputs(int index) const {
  return delegated_outputs_.Get(index);
}
inline const ::PlainDelegatedOutput& PlainApprove::delegated_outputs(int index) const {
  // @@protoc_insertion_point(field_get:PlainApprove.delegated_outputs)
  return _internal_delegated_outputs(index);
}
inline ::PlainDelegatedOutput* PlainApprove::_internal_add_delegated_outputs() {
  return delegated_outputs_.Add();
}
inline ::PlainDelegatedOutput* PlainApprove::add_delegated_outputs() {
  // @@protoc_insertion_point(field_add:PlainApprove.delegated_outputs)
  return _internal_add_delegated_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainDelegatedOutput >&
PlainApprove::delegated_outputs() const {
  // @@protoc_insertion_point(field_list:PlainApprove.delegated_outputs)
  return delegated_outputs_;
}

// .PlainOutput output = 3;
inline bool PlainApprove::_internal_has_output() const {
  return this != internal_default_instance() && output_ != nullptr;
}
inline bool PlainApprove::has_output() const {
  return _internal_has_output();
}
inline void PlainApprove::clear_output() {
  if (GetArena() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
inline const ::PlainOutput& PlainApprove::_internal_output() const {
  const ::PlainOutput* p = output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PlainOutput*>(
      &::_PlainOutput_default_instance_);
}
inline const ::PlainOutput& PlainApprove::output() const {
  // @@protoc_insertion_point(field_get:PlainApprove.output)
  return _internal_output();
}
inline void PlainApprove::unsafe_arena_set_allocated_output(
    ::PlainOutput* output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainApprove.output)
}
inline ::PlainOutput* PlainApprove::release_output() {
  auto temp = unsafe_arena_release_output();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlainOutput* PlainApprove::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:PlainApprove.output)
  
  ::PlainOutput* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::PlainOutput* PlainApprove::_internal_mutable_output() {
  
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlainOutput>(GetArena());
    output_ = p;
  }
  return output_;
}
inline ::PlainOutput* PlainApprove::mutable_output() {
  // @@protoc_insertion_point(field_mutable:PlainApprove.output)
  return _internal_mutable_output();
}
inline void PlainApprove::set_allocated_output(::PlainOutput* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(output);
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    
  } else {
    
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:PlainApprove.output)
}

// -------------------------------------------------------------------

// PlainTransferFrom

// repeated .InputId inputs = 1;
inline int PlainTransferFrom::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PlainTransferFrom::inputs_size() const {
  return _internal_inputs_size();
}
inline void PlainTransferFrom::clear_inputs() {
  inputs_.Clear();
}
inline ::InputId* PlainTransferFrom::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:PlainTransferFrom.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >*
PlainTransferFrom::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:PlainTransferFrom.inputs)
  return &inputs_;
}
inline const ::InputId& PlainTransferFrom::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::InputId& PlainTransferFrom::inputs(int index) const {
  // @@protoc_insertion_point(field_get:PlainTransferFrom.inputs)
  return _internal_inputs(index);
}
inline ::InputId* PlainTransferFrom::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::InputId* PlainTransferFrom::add_inputs() {
  // @@protoc_insertion_point(field_add:PlainTransferFrom.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InputId >&
PlainTransferFrom::inputs() const {
  // @@protoc_insertion_point(field_list:PlainTransferFrom.inputs)
  return inputs_;
}

// repeated .PlainOutput outputs = 2;
inline int PlainTransferFrom::_internal_outputs_size() const {
  return outputs_.size();
}
inline int PlainTransferFrom::outputs_size() const {
  return _internal_outputs_size();
}
inline void PlainTransferFrom::clear_outputs() {
  outputs_.Clear();
}
inline ::PlainOutput* PlainTransferFrom::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:PlainTransferFrom.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >*
PlainTransferFrom::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:PlainTransferFrom.outputs)
  return &outputs_;
}
inline const ::PlainOutput& PlainTransferFrom::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::PlainOutput& PlainTransferFrom::outputs(int index) const {
  // @@protoc_insertion_point(field_get:PlainTransferFrom.outputs)
  return _internal_outputs(index);
}
inline ::PlainOutput* PlainTransferFrom::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::PlainOutput* PlainTransferFrom::add_outputs() {
  // @@protoc_insertion_point(field_add:PlainTransferFrom.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlainOutput >&
PlainTransferFrom::outputs() const {
  // @@protoc_insertion_point(field_list:PlainTransferFrom.outputs)
  return outputs_;
}

// .PlainDelegatedOutput delegated_output = 3;
inline bool PlainTransferFrom::_internal_has_delegated_output() const {
  return this != internal_default_instance() && delegated_output_ != nullptr;
}
inline bool PlainTransferFrom::has_delegated_output() const {
  return _internal_has_delegated_output();
}
inline void PlainTransferFrom::clear_delegated_output() {
  if (GetArena() == nullptr && delegated_output_ != nullptr) {
    delete delegated_output_;
  }
  delegated_output_ = nullptr;
}
inline const ::PlainDelegatedOutput& PlainTransferFrom::_internal_delegated_output() const {
  const ::PlainDelegatedOutput* p = delegated_output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PlainDelegatedOutput*>(
      &::_PlainDelegatedOutput_default_instance_);
}
inline const ::PlainDelegatedOutput& PlainTransferFrom::delegated_output() const {
  // @@protoc_insertion_point(field_get:PlainTransferFrom.delegated_output)
  return _internal_delegated_output();
}
inline void PlainTransferFrom::unsafe_arena_set_allocated_delegated_output(
    ::PlainDelegatedOutput* delegated_output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delegated_output_);
  }
  delegated_output_ = delegated_output;
  if (delegated_output) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainTransferFrom.delegated_output)
}
inline ::PlainDelegatedOutput* PlainTransferFrom::release_delegated_output() {
  auto temp = unsafe_arena_release_delegated_output();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlainDelegatedOutput* PlainTransferFrom::unsafe_arena_release_delegated_output() {
  // @@protoc_insertion_point(field_release:PlainTransferFrom.delegated_output)
  
  ::PlainDelegatedOutput* temp = delegated_output_;
  delegated_output_ = nullptr;
  return temp;
}
inline ::PlainDelegatedOutput* PlainTransferFrom::_internal_mutable_delegated_output() {
  
  if (delegated_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlainDelegatedOutput>(GetArena());
    delegated_output_ = p;
  }
  return delegated_output_;
}
inline ::PlainDelegatedOutput* PlainTransferFrom::mutable_delegated_output() {
  // @@protoc_insertion_point(field_mutable:PlainTransferFrom.delegated_output)
  return _internal_mutable_delegated_output();
}
inline void PlainTransferFrom::set_allocated_delegated_output(::PlainDelegatedOutput* delegated_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete delegated_output_;
  }
  if (delegated_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delegated_output);
    if (message_arena != submessage_arena) {
      delegated_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delegated_output, submessage_arena);
    }
    
  } else {
    
  }
  delegated_output_ = delegated_output;
  // @@protoc_insertion_point(field_set_allocated:PlainTransferFrom.delegated_output)
}

// -------------------------------------------------------------------

// PlainOutput

// bytes owner = 1;
inline void PlainOutput::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlainOutput::owner() const {
  // @@protoc_insertion_point(field_get:PlainOutput.owner)
  return _internal_owner();
}
inline void PlainOutput::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:PlainOutput.owner)
}
inline std::string* PlainOutput::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:PlainOutput.owner)
  return _internal_mutable_owner();
}
inline const std::string& PlainOutput::_internal_owner() const {
  return owner_.Get();
}
inline void PlainOutput::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlainOutput::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlainOutput.owner)
}
inline void PlainOutput::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlainOutput.owner)
}
inline void PlainOutput::set_owner(const void* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlainOutput.owner)
}
inline std::string* PlainOutput::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlainOutput::release_owner() {
  // @@protoc_insertion_point(field_release:PlainOutput.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlainOutput::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlainOutput.owner)
}
inline std::string* PlainOutput::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlainOutput.owner)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return owner_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlainOutput::unsafe_arena_set_allocated_owner(
    std::string* owner) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      owner, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainOutput.owner)
}

// string type = 2;
inline void PlainOutput::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlainOutput::type() const {
  // @@protoc_insertion_point(field_get:PlainOutput.type)
  return _internal_type();
}
inline void PlainOutput::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlainOutput.type)
}
inline std::string* PlainOutput::mutable_type() {
  // @@protoc_insertion_point(field_mutable:PlainOutput.type)
  return _internal_mutable_type();
}
inline const std::string& PlainOutput::_internal_type() const {
  return type_.Get();
}
inline void PlainOutput::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlainOutput::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlainOutput.type)
}
inline void PlainOutput::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlainOutput.type)
}
inline void PlainOutput::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlainOutput.type)
}
inline std::string* PlainOutput::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlainOutput::release_type() {
  // @@protoc_insertion_point(field_release:PlainOutput.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlainOutput::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlainOutput.type)
}
inline std::string* PlainOutput::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlainOutput.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlainOutput::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainOutput.type)
}

// uint64 quantity = 3;
inline void PlainOutput::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlainOutput::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlainOutput::quantity() const {
  // @@protoc_insertion_point(field_get:PlainOutput.quantity)
  return _internal_quantity();
}
inline void PlainOutput::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void PlainOutput::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:PlainOutput.quantity)
}

// -------------------------------------------------------------------

// InputId

// string tx_id = 1;
inline void InputId::clear_tx_id() {
  tx_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InputId::tx_id() const {
  // @@protoc_insertion_point(field_get:InputId.tx_id)
  return _internal_tx_id();
}
inline void InputId::set_tx_id(const std::string& value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:InputId.tx_id)
}
inline std::string* InputId::mutable_tx_id() {
  // @@protoc_insertion_point(field_mutable:InputId.tx_id)
  return _internal_mutable_tx_id();
}
inline const std::string& InputId::_internal_tx_id() const {
  return tx_id_.Get();
}
inline void InputId::_internal_set_tx_id(const std::string& value) {
  
  tx_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputId::set_tx_id(std::string&& value) {
  
  tx_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:InputId.tx_id)
}
inline void InputId::set_tx_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:InputId.tx_id)
}
inline void InputId::set_tx_id(const char* value,
    size_t size) {
  
  tx_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:InputId.tx_id)
}
inline std::string* InputId::_internal_mutable_tx_id() {
  
  return tx_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputId::release_tx_id() {
  // @@protoc_insertion_point(field_release:InputId.tx_id)
  return tx_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputId::set_allocated_tx_id(std::string* tx_id) {
  if (tx_id != nullptr) {
    
  } else {
    
  }
  tx_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:InputId.tx_id)
}
inline std::string* InputId::unsafe_arena_release_tx_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:InputId.tx_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tx_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InputId::unsafe_arena_set_allocated_tx_id(
    std::string* tx_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tx_id != nullptr) {
    
  } else {
    
  }
  tx_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tx_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InputId.tx_id)
}

// uint32 index = 2;
inline void InputId::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputId::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputId::index() const {
  // @@protoc_insertion_point(field_get:InputId.index)
  return _internal_index();
}
inline void InputId::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void InputId::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:InputId.index)
}

// -------------------------------------------------------------------

// PlainDelegatedOutput

// bytes owner = 1;
inline void PlainDelegatedOutput::clear_owner() {
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlainDelegatedOutput::owner() const {
  // @@protoc_insertion_point(field_get:PlainDelegatedOutput.owner)
  return _internal_owner();
}
inline void PlainDelegatedOutput::set_owner(const std::string& value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:PlainDelegatedOutput.owner)
}
inline std::string* PlainDelegatedOutput::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:PlainDelegatedOutput.owner)
  return _internal_mutable_owner();
}
inline const std::string& PlainDelegatedOutput::_internal_owner() const {
  return owner_.Get();
}
inline void PlainDelegatedOutput::_internal_set_owner(const std::string& value) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlainDelegatedOutput::set_owner(std::string&& value) {
  
  owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlainDelegatedOutput.owner)
}
inline void PlainDelegatedOutput::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlainDelegatedOutput.owner)
}
inline void PlainDelegatedOutput::set_owner(const void* value,
    size_t size) {
  
  owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlainDelegatedOutput.owner)
}
inline std::string* PlainDelegatedOutput::_internal_mutable_owner() {
  
  return owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlainDelegatedOutput::release_owner() {
  // @@protoc_insertion_point(field_release:PlainDelegatedOutput.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlainDelegatedOutput::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlainDelegatedOutput.owner)
}
inline std::string* PlainDelegatedOutput::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlainDelegatedOutput.owner)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return owner_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlainDelegatedOutput::unsafe_arena_set_allocated_owner(
    std::string* owner) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      owner, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainDelegatedOutput.owner)
}

// repeated bytes delegatees = 2;
inline int PlainDelegatedOutput::_internal_delegatees_size() const {
  return delegatees_.size();
}
inline int PlainDelegatedOutput::delegatees_size() const {
  return _internal_delegatees_size();
}
inline void PlainDelegatedOutput::clear_delegatees() {
  delegatees_.Clear();
}
inline std::string* PlainDelegatedOutput::add_delegatees() {
  // @@protoc_insertion_point(field_add_mutable:PlainDelegatedOutput.delegatees)
  return _internal_add_delegatees();
}
inline const std::string& PlainDelegatedOutput::_internal_delegatees(int index) const {
  return delegatees_.Get(index);
}
inline const std::string& PlainDelegatedOutput::delegatees(int index) const {
  // @@protoc_insertion_point(field_get:PlainDelegatedOutput.delegatees)
  return _internal_delegatees(index);
}
inline std::string* PlainDelegatedOutput::mutable_delegatees(int index) {
  // @@protoc_insertion_point(field_mutable:PlainDelegatedOutput.delegatees)
  return delegatees_.Mutable(index);
}
inline void PlainDelegatedOutput::set_delegatees(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PlainDelegatedOutput.delegatees)
  delegatees_.Mutable(index)->assign(value);
}
inline void PlainDelegatedOutput::set_delegatees(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PlainDelegatedOutput.delegatees)
  delegatees_.Mutable(index)->assign(std::move(value));
}
inline void PlainDelegatedOutput::set_delegatees(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegatees_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PlainDelegatedOutput.delegatees)
}
inline void PlainDelegatedOutput::set_delegatees(int index, const void* value, size_t size) {
  delegatees_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PlainDelegatedOutput.delegatees)
}
inline std::string* PlainDelegatedOutput::_internal_add_delegatees() {
  return delegatees_.Add();
}
inline void PlainDelegatedOutput::add_delegatees(const std::string& value) {
  delegatees_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PlainDelegatedOutput.delegatees)
}
inline void PlainDelegatedOutput::add_delegatees(std::string&& value) {
  delegatees_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PlainDelegatedOutput.delegatees)
}
inline void PlainDelegatedOutput::add_delegatees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delegatees_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PlainDelegatedOutput.delegatees)
}
inline void PlainDelegatedOutput::add_delegatees(const void* value, size_t size) {
  delegatees_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PlainDelegatedOutput.delegatees)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlainDelegatedOutput::delegatees() const {
  // @@protoc_insertion_point(field_list:PlainDelegatedOutput.delegatees)
  return delegatees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlainDelegatedOutput::mutable_delegatees() {
  // @@protoc_insertion_point(field_mutable_list:PlainDelegatedOutput.delegatees)
  return &delegatees_;
}

// string type = 3;
inline void PlainDelegatedOutput::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlainDelegatedOutput::type() const {
  // @@protoc_insertion_point(field_get:PlainDelegatedOutput.type)
  return _internal_type();
}
inline void PlainDelegatedOutput::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlainDelegatedOutput.type)
}
inline std::string* PlainDelegatedOutput::mutable_type() {
  // @@protoc_insertion_point(field_mutable:PlainDelegatedOutput.type)
  return _internal_mutable_type();
}
inline const std::string& PlainDelegatedOutput::_internal_type() const {
  return type_.Get();
}
inline void PlainDelegatedOutput::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlainDelegatedOutput::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlainDelegatedOutput.type)
}
inline void PlainDelegatedOutput::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlainDelegatedOutput.type)
}
inline void PlainDelegatedOutput::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlainDelegatedOutput.type)
}
inline std::string* PlainDelegatedOutput::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlainDelegatedOutput::release_type() {
  // @@protoc_insertion_point(field_release:PlainDelegatedOutput.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlainDelegatedOutput::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlainDelegatedOutput.type)
}
inline std::string* PlainDelegatedOutput::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlainDelegatedOutput.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlainDelegatedOutput::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlainDelegatedOutput.type)
}

// uint64 quantity = 4;
inline void PlainDelegatedOutput::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlainDelegatedOutput::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlainDelegatedOutput::quantity() const {
  // @@protoc_insertion_point(field_get:PlainDelegatedOutput.quantity)
  return _internal_quantity();
}
inline void PlainDelegatedOutput::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void PlainDelegatedOutput::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:PlainDelegatedOutput.quantity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_token_2ftransaction_2eproto

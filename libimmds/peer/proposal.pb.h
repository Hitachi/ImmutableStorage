// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer/proposal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_peer_2fproposal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_peer_2fproposal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "peer/chaincode.pb.h"
#include "peer/proposal_response.pb.h"
#include "token/expectations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_peer_2fproposal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_peer_2fproposal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_peer_2fproposal_2eproto;
namespace protos {
class ChaincodeAction;
class ChaincodeActionDefaultTypeInternal;
extern ChaincodeActionDefaultTypeInternal _ChaincodeAction_default_instance_;
class ChaincodeHeaderExtension;
class ChaincodeHeaderExtensionDefaultTypeInternal;
extern ChaincodeHeaderExtensionDefaultTypeInternal _ChaincodeHeaderExtension_default_instance_;
class ChaincodeProposalPayload;
class ChaincodeProposalPayloadDefaultTypeInternal;
extern ChaincodeProposalPayloadDefaultTypeInternal _ChaincodeProposalPayload_default_instance_;
class ChaincodeProposalPayload_TransientMapEntry_DoNotUse;
class ChaincodeProposalPayload_TransientMapEntry_DoNotUseDefaultTypeInternal;
extern ChaincodeProposalPayload_TransientMapEntry_DoNotUseDefaultTypeInternal _ChaincodeProposalPayload_TransientMapEntry_DoNotUse_default_instance_;
class Proposal;
class ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class SignedProposal;
class SignedProposalDefaultTypeInternal;
extern SignedProposalDefaultTypeInternal _SignedProposal_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::ChaincodeAction* Arena::CreateMaybeMessage<::protos::ChaincodeAction>(Arena*);
template<> ::protos::ChaincodeHeaderExtension* Arena::CreateMaybeMessage<::protos::ChaincodeHeaderExtension>(Arena*);
template<> ::protos::ChaincodeProposalPayload* Arena::CreateMaybeMessage<::protos::ChaincodeProposalPayload>(Arena*);
template<> ::protos::ChaincodeProposalPayload_TransientMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protos::ChaincodeProposalPayload_TransientMapEntry_DoNotUse>(Arena*);
template<> ::protos::Proposal* Arena::CreateMaybeMessage<::protos::Proposal>(Arena*);
template<> ::protos::SignedProposal* Arena::CreateMaybeMessage<::protos::SignedProposal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

// ===================================================================

class SignedProposal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.SignedProposal) */ {
 public:
  inline SignedProposal() : SignedProposal(nullptr) {}
  virtual ~SignedProposal();

  SignedProposal(const SignedProposal& from);
  SignedProposal(SignedProposal&& from) noexcept
    : SignedProposal() {
    *this = ::std::move(from);
  }

  inline SignedProposal& operator=(const SignedProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedProposal& operator=(SignedProposal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignedProposal& default_instance();

  static inline const SignedProposal* internal_default_instance() {
    return reinterpret_cast<const SignedProposal*>(
               &_SignedProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignedProposal& a, SignedProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedProposal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedProposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedProposal* New() const final {
    return CreateMaybeMessage<SignedProposal>(nullptr);
  }

  SignedProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedProposal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignedProposal& from);
  void MergeFrom(const SignedProposal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedProposal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.SignedProposal";
  }
  protected:
  explicit SignedProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_2eproto);
    return ::descriptor_table_peer_2fproposal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalBytesFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes proposal_bytes = 1;
  void clear_proposal_bytes();
  const std::string& proposal_bytes() const;
  void set_proposal_bytes(const std::string& value);
  void set_proposal_bytes(std::string&& value);
  void set_proposal_bytes(const char* value);
  void set_proposal_bytes(const void* value, size_t size);
  std::string* mutable_proposal_bytes();
  std::string* release_proposal_bytes();
  void set_allocated_proposal_bytes(std::string* proposal_bytes);
  private:
  const std::string& _internal_proposal_bytes() const;
  void _internal_set_proposal_bytes(const std::string& value);
  std::string* _internal_mutable_proposal_bytes();
  public:

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:protos.SignedProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class Proposal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {}
  virtual ~Proposal();

  Proposal(const Proposal& from);
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proposal& default_instance();

  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proposal* New() const final {
    return CreateMaybeMessage<Proposal>(nullptr);
  }

  Proposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proposal& from);
  void MergeFrom(const Proposal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.Proposal";
  }
  protected:
  explicit Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_2eproto);
    return ::descriptor_table_peer_2fproposal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kExtensionFieldNumber = 3,
  };
  // bytes header = 1;
  void clear_header();
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // bytes extension = 3;
  void clear_extension();
  const std::string& extension() const;
  void set_extension(const std::string& value);
  void set_extension(std::string&& value);
  void set_extension(const char* value);
  void set_extension(const void* value, size_t size);
  std::string* mutable_extension();
  std::string* release_extension();
  void set_allocated_extension(std::string* extension);
  private:
  const std::string& _internal_extension() const;
  void _internal_set_extension(const std::string& value);
  std::string* _internal_mutable_extension();
  public:

  // @@protoc_insertion_point(class_scope:protos.Proposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ChaincodeHeaderExtension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeHeaderExtension) */ {
 public:
  inline ChaincodeHeaderExtension() : ChaincodeHeaderExtension(nullptr) {}
  virtual ~ChaincodeHeaderExtension();

  ChaincodeHeaderExtension(const ChaincodeHeaderExtension& from);
  ChaincodeHeaderExtension(ChaincodeHeaderExtension&& from) noexcept
    : ChaincodeHeaderExtension() {
    *this = ::std::move(from);
  }

  inline ChaincodeHeaderExtension& operator=(const ChaincodeHeaderExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeHeaderExtension& operator=(ChaincodeHeaderExtension&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeHeaderExtension& default_instance();

  static inline const ChaincodeHeaderExtension* internal_default_instance() {
    return reinterpret_cast<const ChaincodeHeaderExtension*>(
               &_ChaincodeHeaderExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChaincodeHeaderExtension& a, ChaincodeHeaderExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeHeaderExtension* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeHeaderExtension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeHeaderExtension* New() const final {
    return CreateMaybeMessage<ChaincodeHeaderExtension>(nullptr);
  }

  ChaincodeHeaderExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeHeaderExtension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeHeaderExtension& from);
  void MergeFrom(const ChaincodeHeaderExtension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeHeaderExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeHeaderExtension";
  }
  protected:
  explicit ChaincodeHeaderExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_2eproto);
    return ::descriptor_table_peer_2fproposal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadVisibilityFieldNumber = 1,
    kChaincodeIdFieldNumber = 2,
  };
  // bytes payload_visibility = 1;
  void clear_payload_visibility();
  const std::string& payload_visibility() const;
  void set_payload_visibility(const std::string& value);
  void set_payload_visibility(std::string&& value);
  void set_payload_visibility(const char* value);
  void set_payload_visibility(const void* value, size_t size);
  std::string* mutable_payload_visibility();
  std::string* release_payload_visibility();
  void set_allocated_payload_visibility(std::string* payload_visibility);
  private:
  const std::string& _internal_payload_visibility() const;
  void _internal_set_payload_visibility(const std::string& value);
  std::string* _internal_mutable_payload_visibility();
  public:

  // .protos.ChaincodeID chaincode_id = 2;
  bool has_chaincode_id() const;
  private:
  bool _internal_has_chaincode_id() const;
  public:
  void clear_chaincode_id();
  const ::protos::ChaincodeID& chaincode_id() const;
  ::protos::ChaincodeID* release_chaincode_id();
  ::protos::ChaincodeID* mutable_chaincode_id();
  void set_allocated_chaincode_id(::protos::ChaincodeID* chaincode_id);
  private:
  const ::protos::ChaincodeID& _internal_chaincode_id() const;
  ::protos::ChaincodeID* _internal_mutable_chaincode_id();
  public:
  void unsafe_arena_set_allocated_chaincode_id(
      ::protos::ChaincodeID* chaincode_id);
  ::protos::ChaincodeID* unsafe_arena_release_chaincode_id();

  // @@protoc_insertion_point(class_scope:protos.ChaincodeHeaderExtension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_visibility_;
  ::protos::ChaincodeID* chaincode_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ChaincodeProposalPayload_TransientMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChaincodeProposalPayload_TransientMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChaincodeProposalPayload_TransientMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  ChaincodeProposalPayload_TransientMapEntry_DoNotUse();
  explicit ChaincodeProposalPayload_TransientMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChaincodeProposalPayload_TransientMapEntry_DoNotUse& other);
  static const ChaincodeProposalPayload_TransientMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChaincodeProposalPayload_TransientMapEntry_DoNotUse*>(&_ChaincodeProposalPayload_TransientMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protos.ChaincodeProposalPayload.TransientMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_2eproto);
    return ::descriptor_table_peer_2fproposal_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class ChaincodeProposalPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeProposalPayload) */ {
 public:
  inline ChaincodeProposalPayload() : ChaincodeProposalPayload(nullptr) {}
  virtual ~ChaincodeProposalPayload();

  ChaincodeProposalPayload(const ChaincodeProposalPayload& from);
  ChaincodeProposalPayload(ChaincodeProposalPayload&& from) noexcept
    : ChaincodeProposalPayload() {
    *this = ::std::move(from);
  }

  inline ChaincodeProposalPayload& operator=(const ChaincodeProposalPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeProposalPayload& operator=(ChaincodeProposalPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeProposalPayload& default_instance();

  static inline const ChaincodeProposalPayload* internal_default_instance() {
    return reinterpret_cast<const ChaincodeProposalPayload*>(
               &_ChaincodeProposalPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChaincodeProposalPayload& a, ChaincodeProposalPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeProposalPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeProposalPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeProposalPayload* New() const final {
    return CreateMaybeMessage<ChaincodeProposalPayload>(nullptr);
  }

  ChaincodeProposalPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeProposalPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeProposalPayload& from);
  void MergeFrom(const ChaincodeProposalPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeProposalPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeProposalPayload";
  }
  protected:
  explicit ChaincodeProposalPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_2eproto);
    return ::descriptor_table_peer_2fproposal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTransientMapFieldNumber = 2,
    kInputFieldNumber = 1,
  };
  // map<string, bytes> TransientMap = 2;
  int transientmap_size() const;
  private:
  int _internal_transientmap_size() const;
  public:
  void clear_transientmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_transientmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_transientmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      transientmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_transientmap();

  // bytes input = 1;
  void clear_input();
  const std::string& input() const;
  void set_input(const std::string& value);
  void set_input(std::string&& value);
  void set_input(const char* value);
  void set_input(const void* value, size_t size);
  std::string* mutable_input();
  std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // @@protoc_insertion_point(class_scope:protos.ChaincodeProposalPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ChaincodeProposalPayload_TransientMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> transientmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ChaincodeAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeAction) */ {
 public:
  inline ChaincodeAction() : ChaincodeAction(nullptr) {}
  virtual ~ChaincodeAction();

  ChaincodeAction(const ChaincodeAction& from);
  ChaincodeAction(ChaincodeAction&& from) noexcept
    : ChaincodeAction() {
    *this = ::std::move(from);
  }

  inline ChaincodeAction& operator=(const ChaincodeAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeAction& operator=(ChaincodeAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeAction& default_instance();

  static inline const ChaincodeAction* internal_default_instance() {
    return reinterpret_cast<const ChaincodeAction*>(
               &_ChaincodeAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChaincodeAction& a, ChaincodeAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeAction* New() const final {
    return CreateMaybeMessage<ChaincodeAction>(nullptr);
  }

  ChaincodeAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeAction& from);
  void MergeFrom(const ChaincodeAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeAction";
  }
  protected:
  explicit ChaincodeAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_2eproto);
    return ::descriptor_table_peer_2fproposal_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
    kEventsFieldNumber = 2,
    kResponseFieldNumber = 3,
    kChaincodeIdFieldNumber = 4,
    kTokenExpectationFieldNumber = 5,
  };
  // bytes results = 1;
  void clear_results();
  const std::string& results() const;
  void set_results(const std::string& value);
  void set_results(std::string&& value);
  void set_results(const char* value);
  void set_results(const void* value, size_t size);
  std::string* mutable_results();
  std::string* release_results();
  void set_allocated_results(std::string* results);
  private:
  const std::string& _internal_results() const;
  void _internal_set_results(const std::string& value);
  std::string* _internal_mutable_results();
  public:

  // bytes events = 2;
  void clear_events();
  const std::string& events() const;
  void set_events(const std::string& value);
  void set_events(std::string&& value);
  void set_events(const char* value);
  void set_events(const void* value, size_t size);
  std::string* mutable_events();
  std::string* release_events();
  void set_allocated_events(std::string* events);
  private:
  const std::string& _internal_events() const;
  void _internal_set_events(const std::string& value);
  std::string* _internal_mutable_events();
  public:

  // .protos.Response response = 3;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::protos::Response& response() const;
  ::protos::Response* release_response();
  ::protos::Response* mutable_response();
  void set_allocated_response(::protos::Response* response);
  private:
  const ::protos::Response& _internal_response() const;
  ::protos::Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::protos::Response* response);
  ::protos::Response* unsafe_arena_release_response();

  // .protos.ChaincodeID chaincode_id = 4;
  bool has_chaincode_id() const;
  private:
  bool _internal_has_chaincode_id() const;
  public:
  void clear_chaincode_id();
  const ::protos::ChaincodeID& chaincode_id() const;
  ::protos::ChaincodeID* release_chaincode_id();
  ::protos::ChaincodeID* mutable_chaincode_id();
  void set_allocated_chaincode_id(::protos::ChaincodeID* chaincode_id);
  private:
  const ::protos::ChaincodeID& _internal_chaincode_id() const;
  ::protos::ChaincodeID* _internal_mutable_chaincode_id();
  public:
  void unsafe_arena_set_allocated_chaincode_id(
      ::protos::ChaincodeID* chaincode_id);
  ::protos::ChaincodeID* unsafe_arena_release_chaincode_id();

  // .protos.TokenExpectation token_expectation = 5;
  bool has_token_expectation() const;
  private:
  bool _internal_has_token_expectation() const;
  public:
  void clear_token_expectation();
  const ::protos::TokenExpectation& token_expectation() const;
  ::protos::TokenExpectation* release_token_expectation();
  ::protos::TokenExpectation* mutable_token_expectation();
  void set_allocated_token_expectation(::protos::TokenExpectation* token_expectation);
  private:
  const ::protos::TokenExpectation& _internal_token_expectation() const;
  ::protos::TokenExpectation* _internal_mutable_token_expectation();
  public:
  void unsafe_arena_set_allocated_token_expectation(
      ::protos::TokenExpectation* token_expectation);
  ::protos::TokenExpectation* unsafe_arena_release_token_expectation();

  // @@protoc_insertion_point(class_scope:protos.ChaincodeAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr events_;
  ::protos::Response* response_;
  ::protos::ChaincodeID* chaincode_id_;
  ::protos::TokenExpectation* token_expectation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fproposal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignedProposal

// bytes proposal_bytes = 1;
inline void SignedProposal::clear_proposal_bytes() {
  proposal_bytes_.ClearToEmpty();
}
inline const std::string& SignedProposal::proposal_bytes() const {
  // @@protoc_insertion_point(field_get:protos.SignedProposal.proposal_bytes)
  return _internal_proposal_bytes();
}
inline void SignedProposal::set_proposal_bytes(const std::string& value) {
  _internal_set_proposal_bytes(value);
  // @@protoc_insertion_point(field_set:protos.SignedProposal.proposal_bytes)
}
inline std::string* SignedProposal::mutable_proposal_bytes() {
  // @@protoc_insertion_point(field_mutable:protos.SignedProposal.proposal_bytes)
  return _internal_mutable_proposal_bytes();
}
inline const std::string& SignedProposal::_internal_proposal_bytes() const {
  return proposal_bytes_.Get();
}
inline void SignedProposal::_internal_set_proposal_bytes(const std::string& value) {
  
  proposal_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignedProposal::set_proposal_bytes(std::string&& value) {
  
  proposal_bytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.SignedProposal.proposal_bytes)
}
inline void SignedProposal::set_proposal_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposal_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.SignedProposal.proposal_bytes)
}
inline void SignedProposal::set_proposal_bytes(const void* value,
    size_t size) {
  
  proposal_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.SignedProposal.proposal_bytes)
}
inline std::string* SignedProposal::_internal_mutable_proposal_bytes() {
  
  return proposal_bytes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignedProposal::release_proposal_bytes() {
  // @@protoc_insertion_point(field_release:protos.SignedProposal.proposal_bytes)
  return proposal_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedProposal::set_allocated_proposal_bytes(std::string* proposal_bytes) {
  if (proposal_bytes != nullptr) {
    
  } else {
    
  }
  proposal_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.SignedProposal.proposal_bytes)
}

// bytes signature = 2;
inline void SignedProposal::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SignedProposal::signature() const {
  // @@protoc_insertion_point(field_get:protos.SignedProposal.signature)
  return _internal_signature();
}
inline void SignedProposal::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:protos.SignedProposal.signature)
}
inline std::string* SignedProposal::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:protos.SignedProposal.signature)
  return _internal_mutable_signature();
}
inline const std::string& SignedProposal::_internal_signature() const {
  return signature_.Get();
}
inline void SignedProposal::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignedProposal::set_signature(std::string&& value) {
  
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.SignedProposal.signature)
}
inline void SignedProposal::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.SignedProposal.signature)
}
inline void SignedProposal::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.SignedProposal.signature)
}
inline std::string* SignedProposal::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignedProposal::release_signature() {
  // @@protoc_insertion_point(field_release:protos.SignedProposal.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedProposal::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.SignedProposal.signature)
}

// -------------------------------------------------------------------

// Proposal

// bytes header = 1;
inline void Proposal::clear_header() {
  header_.ClearToEmpty();
}
inline const std::string& Proposal::header() const {
  // @@protoc_insertion_point(field_get:protos.Proposal.header)
  return _internal_header();
}
inline void Proposal::set_header(const std::string& value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:protos.Proposal.header)
}
inline std::string* Proposal::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protos.Proposal.header)
  return _internal_mutable_header();
}
inline const std::string& Proposal::_internal_header() const {
  return header_.Get();
}
inline void Proposal::_internal_set_header(const std::string& value) {
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Proposal::set_header(std::string&& value) {
  
  header_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.Proposal.header)
}
inline void Proposal::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.Proposal.header)
}
inline void Proposal::set_header(const void* value,
    size_t size) {
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.Proposal.header)
}
inline std::string* Proposal::_internal_mutable_header() {
  
  return header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Proposal::release_header() {
  // @@protoc_insertion_point(field_release:protos.Proposal.header)
  return header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proposal::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.Proposal.header)
}

// bytes payload = 2;
inline void Proposal::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Proposal::payload() const {
  // @@protoc_insertion_point(field_get:protos.Proposal.payload)
  return _internal_payload();
}
inline void Proposal::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:protos.Proposal.payload)
}
inline std::string* Proposal::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:protos.Proposal.payload)
  return _internal_mutable_payload();
}
inline const std::string& Proposal::_internal_payload() const {
  return payload_.Get();
}
inline void Proposal::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Proposal::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.Proposal.payload)
}
inline void Proposal::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.Proposal.payload)
}
inline void Proposal::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.Proposal.payload)
}
inline std::string* Proposal::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Proposal::release_payload() {
  // @@protoc_insertion_point(field_release:protos.Proposal.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proposal::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.Proposal.payload)
}

// bytes extension = 3;
inline void Proposal::clear_extension() {
  extension_.ClearToEmpty();
}
inline const std::string& Proposal::extension() const {
  // @@protoc_insertion_point(field_get:protos.Proposal.extension)
  return _internal_extension();
}
inline void Proposal::set_extension(const std::string& value) {
  _internal_set_extension(value);
  // @@protoc_insertion_point(field_set:protos.Proposal.extension)
}
inline std::string* Proposal::mutable_extension() {
  // @@protoc_insertion_point(field_mutable:protos.Proposal.extension)
  return _internal_mutable_extension();
}
inline const std::string& Proposal::_internal_extension() const {
  return extension_.Get();
}
inline void Proposal::_internal_set_extension(const std::string& value) {
  
  extension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Proposal::set_extension(std::string&& value) {
  
  extension_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.Proposal.extension)
}
inline void Proposal::set_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.Proposal.extension)
}
inline void Proposal::set_extension(const void* value,
    size_t size) {
  
  extension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.Proposal.extension)
}
inline std::string* Proposal::_internal_mutable_extension() {
  
  return extension_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Proposal::release_extension() {
  // @@protoc_insertion_point(field_release:protos.Proposal.extension)
  return extension_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proposal::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    
  } else {
    
  }
  extension_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.Proposal.extension)
}

// -------------------------------------------------------------------

// ChaincodeHeaderExtension

// bytes payload_visibility = 1;
inline void ChaincodeHeaderExtension::clear_payload_visibility() {
  payload_visibility_.ClearToEmpty();
}
inline const std::string& ChaincodeHeaderExtension::payload_visibility() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeHeaderExtension.payload_visibility)
  return _internal_payload_visibility();
}
inline void ChaincodeHeaderExtension::set_payload_visibility(const std::string& value) {
  _internal_set_payload_visibility(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeHeaderExtension.payload_visibility)
}
inline std::string* ChaincodeHeaderExtension::mutable_payload_visibility() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeHeaderExtension.payload_visibility)
  return _internal_mutable_payload_visibility();
}
inline const std::string& ChaincodeHeaderExtension::_internal_payload_visibility() const {
  return payload_visibility_.Get();
}
inline void ChaincodeHeaderExtension::_internal_set_payload_visibility(const std::string& value) {
  
  payload_visibility_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChaincodeHeaderExtension::set_payload_visibility(std::string&& value) {
  
  payload_visibility_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeHeaderExtension.payload_visibility)
}
inline void ChaincodeHeaderExtension::set_payload_visibility(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_visibility_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeHeaderExtension.payload_visibility)
}
inline void ChaincodeHeaderExtension::set_payload_visibility(const void* value,
    size_t size) {
  
  payload_visibility_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeHeaderExtension.payload_visibility)
}
inline std::string* ChaincodeHeaderExtension::_internal_mutable_payload_visibility() {
  
  return payload_visibility_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChaincodeHeaderExtension::release_payload_visibility() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeHeaderExtension.payload_visibility)
  return payload_visibility_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeHeaderExtension::set_allocated_payload_visibility(std::string* payload_visibility) {
  if (payload_visibility != nullptr) {
    
  } else {
    
  }
  payload_visibility_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_visibility,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeHeaderExtension.payload_visibility)
}

// .protos.ChaincodeID chaincode_id = 2;
inline bool ChaincodeHeaderExtension::_internal_has_chaincode_id() const {
  return this != internal_default_instance() && chaincode_id_ != nullptr;
}
inline bool ChaincodeHeaderExtension::has_chaincode_id() const {
  return _internal_has_chaincode_id();
}
inline const ::protos::ChaincodeID& ChaincodeHeaderExtension::_internal_chaincode_id() const {
  const ::protos::ChaincodeID* p = chaincode_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::ChaincodeID&>(
      ::protos::_ChaincodeID_default_instance_);
}
inline const ::protos::ChaincodeID& ChaincodeHeaderExtension::chaincode_id() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeHeaderExtension.chaincode_id)
  return _internal_chaincode_id();
}
inline void ChaincodeHeaderExtension::unsafe_arena_set_allocated_chaincode_id(
    ::protos::ChaincodeID* chaincode_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chaincode_id_);
  }
  chaincode_id_ = chaincode_id;
  if (chaincode_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeHeaderExtension.chaincode_id)
}
inline ::protos::ChaincodeID* ChaincodeHeaderExtension::release_chaincode_id() {
  
  ::protos::ChaincodeID* temp = chaincode_id_;
  chaincode_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::ChaincodeID* ChaincodeHeaderExtension::unsafe_arena_release_chaincode_id() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeHeaderExtension.chaincode_id)
  
  ::protos::ChaincodeID* temp = chaincode_id_;
  chaincode_id_ = nullptr;
  return temp;
}
inline ::protos::ChaincodeID* ChaincodeHeaderExtension::_internal_mutable_chaincode_id() {
  
  if (chaincode_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::ChaincodeID>(GetArena());
    chaincode_id_ = p;
  }
  return chaincode_id_;
}
inline ::protos::ChaincodeID* ChaincodeHeaderExtension::mutable_chaincode_id() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeHeaderExtension.chaincode_id)
  return _internal_mutable_chaincode_id();
}
inline void ChaincodeHeaderExtension::set_allocated_chaincode_id(::protos::ChaincodeID* chaincode_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chaincode_id_);
  }
  if (chaincode_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chaincode_id)->GetArena();
    if (message_arena != submessage_arena) {
      chaincode_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chaincode_id, submessage_arena);
    }
    
  } else {
    
  }
  chaincode_id_ = chaincode_id;
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeHeaderExtension.chaincode_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChaincodeProposalPayload

// bytes input = 1;
inline void ChaincodeProposalPayload::clear_input() {
  input_.ClearToEmpty();
}
inline const std::string& ChaincodeProposalPayload::input() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeProposalPayload.input)
  return _internal_input();
}
inline void ChaincodeProposalPayload::set_input(const std::string& value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeProposalPayload.input)
}
inline std::string* ChaincodeProposalPayload::mutable_input() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeProposalPayload.input)
  return _internal_mutable_input();
}
inline const std::string& ChaincodeProposalPayload::_internal_input() const {
  return input_.Get();
}
inline void ChaincodeProposalPayload::_internal_set_input(const std::string& value) {
  
  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChaincodeProposalPayload::set_input(std::string&& value) {
  
  input_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeProposalPayload.input)
}
inline void ChaincodeProposalPayload::set_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeProposalPayload.input)
}
inline void ChaincodeProposalPayload::set_input(const void* value,
    size_t size) {
  
  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeProposalPayload.input)
}
inline std::string* ChaincodeProposalPayload::_internal_mutable_input() {
  
  return input_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChaincodeProposalPayload::release_input() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeProposalPayload.input)
  return input_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeProposalPayload::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  input_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeProposalPayload.input)
}

// map<string, bytes> TransientMap = 2;
inline int ChaincodeProposalPayload::_internal_transientmap_size() const {
  return transientmap_.size();
}
inline int ChaincodeProposalPayload::transientmap_size() const {
  return _internal_transientmap_size();
}
inline void ChaincodeProposalPayload::clear_transientmap() {
  transientmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ChaincodeProposalPayload::_internal_transientmap() const {
  return transientmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ChaincodeProposalPayload::transientmap() const {
  // @@protoc_insertion_point(field_map:protos.ChaincodeProposalPayload.TransientMap)
  return _internal_transientmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ChaincodeProposalPayload::_internal_mutable_transientmap() {
  return transientmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ChaincodeProposalPayload::mutable_transientmap() {
  // @@protoc_insertion_point(field_mutable_map:protos.ChaincodeProposalPayload.TransientMap)
  return _internal_mutable_transientmap();
}

// -------------------------------------------------------------------

// ChaincodeAction

// bytes results = 1;
inline void ChaincodeAction::clear_results() {
  results_.ClearToEmpty();
}
inline const std::string& ChaincodeAction::results() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeAction.results)
  return _internal_results();
}
inline void ChaincodeAction::set_results(const std::string& value) {
  _internal_set_results(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeAction.results)
}
inline std::string* ChaincodeAction::mutable_results() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeAction.results)
  return _internal_mutable_results();
}
inline const std::string& ChaincodeAction::_internal_results() const {
  return results_.Get();
}
inline void ChaincodeAction::_internal_set_results(const std::string& value) {
  
  results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChaincodeAction::set_results(std::string&& value) {
  
  results_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeAction.results)
}
inline void ChaincodeAction::set_results(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeAction.results)
}
inline void ChaincodeAction::set_results(const void* value,
    size_t size) {
  
  results_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeAction.results)
}
inline std::string* ChaincodeAction::_internal_mutable_results() {
  
  return results_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChaincodeAction::release_results() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeAction.results)
  return results_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeAction::set_allocated_results(std::string* results) {
  if (results != nullptr) {
    
  } else {
    
  }
  results_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), results,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeAction.results)
}

// bytes events = 2;
inline void ChaincodeAction::clear_events() {
  events_.ClearToEmpty();
}
inline const std::string& ChaincodeAction::events() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeAction.events)
  return _internal_events();
}
inline void ChaincodeAction::set_events(const std::string& value) {
  _internal_set_events(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeAction.events)
}
inline std::string* ChaincodeAction::mutable_events() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeAction.events)
  return _internal_mutable_events();
}
inline const std::string& ChaincodeAction::_internal_events() const {
  return events_.Get();
}
inline void ChaincodeAction::_internal_set_events(const std::string& value) {
  
  events_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChaincodeAction::set_events(std::string&& value) {
  
  events_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeAction.events)
}
inline void ChaincodeAction::set_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  events_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeAction.events)
}
inline void ChaincodeAction::set_events(const void* value,
    size_t size) {
  
  events_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeAction.events)
}
inline std::string* ChaincodeAction::_internal_mutable_events() {
  
  return events_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChaincodeAction::release_events() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeAction.events)
  return events_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeAction::set_allocated_events(std::string* events) {
  if (events != nullptr) {
    
  } else {
    
  }
  events_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), events,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeAction.events)
}

// .protos.Response response = 3;
inline bool ChaincodeAction::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool ChaincodeAction::has_response() const {
  return _internal_has_response();
}
inline const ::protos::Response& ChaincodeAction::_internal_response() const {
  const ::protos::Response* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::Response&>(
      ::protos::_Response_default_instance_);
}
inline const ::protos::Response& ChaincodeAction::response() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeAction.response)
  return _internal_response();
}
inline void ChaincodeAction::unsafe_arena_set_allocated_response(
    ::protos::Response* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeAction.response)
}
inline ::protos::Response* ChaincodeAction::release_response() {
  
  ::protos::Response* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::Response* ChaincodeAction::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeAction.response)
  
  ::protos::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::protos::Response* ChaincodeAction::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::Response>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::protos::Response* ChaincodeAction::mutable_response() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeAction.response)
  return _internal_mutable_response();
}
inline void ChaincodeAction::set_allocated_response(::protos::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeAction.response)
}

// .protos.ChaincodeID chaincode_id = 4;
inline bool ChaincodeAction::_internal_has_chaincode_id() const {
  return this != internal_default_instance() && chaincode_id_ != nullptr;
}
inline bool ChaincodeAction::has_chaincode_id() const {
  return _internal_has_chaincode_id();
}
inline const ::protos::ChaincodeID& ChaincodeAction::_internal_chaincode_id() const {
  const ::protos::ChaincodeID* p = chaincode_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::ChaincodeID&>(
      ::protos::_ChaincodeID_default_instance_);
}
inline const ::protos::ChaincodeID& ChaincodeAction::chaincode_id() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeAction.chaincode_id)
  return _internal_chaincode_id();
}
inline void ChaincodeAction::unsafe_arena_set_allocated_chaincode_id(
    ::protos::ChaincodeID* chaincode_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chaincode_id_);
  }
  chaincode_id_ = chaincode_id;
  if (chaincode_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeAction.chaincode_id)
}
inline ::protos::ChaincodeID* ChaincodeAction::release_chaincode_id() {
  
  ::protos::ChaincodeID* temp = chaincode_id_;
  chaincode_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::ChaincodeID* ChaincodeAction::unsafe_arena_release_chaincode_id() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeAction.chaincode_id)
  
  ::protos::ChaincodeID* temp = chaincode_id_;
  chaincode_id_ = nullptr;
  return temp;
}
inline ::protos::ChaincodeID* ChaincodeAction::_internal_mutable_chaincode_id() {
  
  if (chaincode_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::ChaincodeID>(GetArena());
    chaincode_id_ = p;
  }
  return chaincode_id_;
}
inline ::protos::ChaincodeID* ChaincodeAction::mutable_chaincode_id() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeAction.chaincode_id)
  return _internal_mutable_chaincode_id();
}
inline void ChaincodeAction::set_allocated_chaincode_id(::protos::ChaincodeID* chaincode_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chaincode_id_);
  }
  if (chaincode_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chaincode_id)->GetArena();
    if (message_arena != submessage_arena) {
      chaincode_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chaincode_id, submessage_arena);
    }
    
  } else {
    
  }
  chaincode_id_ = chaincode_id;
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeAction.chaincode_id)
}

// .protos.TokenExpectation token_expectation = 5;
inline bool ChaincodeAction::_internal_has_token_expectation() const {
  return this != internal_default_instance() && token_expectation_ != nullptr;
}
inline bool ChaincodeAction::has_token_expectation() const {
  return _internal_has_token_expectation();
}
inline const ::protos::TokenExpectation& ChaincodeAction::_internal_token_expectation() const {
  const ::protos::TokenExpectation* p = token_expectation_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::TokenExpectation&>(
      ::protos::_TokenExpectation_default_instance_);
}
inline const ::protos::TokenExpectation& ChaincodeAction::token_expectation() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeAction.token_expectation)
  return _internal_token_expectation();
}
inline void ChaincodeAction::unsafe_arena_set_allocated_token_expectation(
    ::protos::TokenExpectation* token_expectation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_expectation_);
  }
  token_expectation_ = token_expectation;
  if (token_expectation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeAction.token_expectation)
}
inline ::protos::TokenExpectation* ChaincodeAction::release_token_expectation() {
  
  ::protos::TokenExpectation* temp = token_expectation_;
  token_expectation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::TokenExpectation* ChaincodeAction::unsafe_arena_release_token_expectation() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeAction.token_expectation)
  
  ::protos::TokenExpectation* temp = token_expectation_;
  token_expectation_ = nullptr;
  return temp;
}
inline ::protos::TokenExpectation* ChaincodeAction::_internal_mutable_token_expectation() {
  
  if (token_expectation_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::TokenExpectation>(GetArena());
    token_expectation_ = p;
  }
  return token_expectation_;
}
inline ::protos::TokenExpectation* ChaincodeAction::mutable_token_expectation() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeAction.token_expectation)
  return _internal_mutable_token_expectation();
}
inline void ChaincodeAction::set_allocated_token_expectation(::protos::TokenExpectation* token_expectation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_expectation_);
  }
  if (token_expectation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_expectation)->GetArena();
    if (message_arena != submessage_arena) {
      token_expectation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token_expectation, submessage_arena);
    }
    
  } else {
    
  }
  token_expectation_ = token_expectation;
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeAction.token_expectation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_peer_2fproposal_2eproto

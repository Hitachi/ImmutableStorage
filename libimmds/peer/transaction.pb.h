// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer/transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_peer_2ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_peer_2ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "peer/proposal_response.pb.h"
#include "common/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_peer_2ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_peer_2ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_peer_2ftransaction_2eproto;
namespace protos {
class ChaincodeActionPayload;
class ChaincodeActionPayloadDefaultTypeInternal;
extern ChaincodeActionPayloadDefaultTypeInternal _ChaincodeActionPayload_default_instance_;
class ChaincodeEndorsedAction;
class ChaincodeEndorsedActionDefaultTypeInternal;
extern ChaincodeEndorsedActionDefaultTypeInternal _ChaincodeEndorsedAction_default_instance_;
class ProcessedTransaction;
class ProcessedTransactionDefaultTypeInternal;
extern ProcessedTransactionDefaultTypeInternal _ProcessedTransaction_default_instance_;
class SignedTransaction;
class SignedTransactionDefaultTypeInternal;
extern SignedTransactionDefaultTypeInternal _SignedTransaction_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionAction;
class TransactionActionDefaultTypeInternal;
extern TransactionActionDefaultTypeInternal _TransactionAction_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::ChaincodeActionPayload* Arena::CreateMaybeMessage<::protos::ChaincodeActionPayload>(Arena*);
template<> ::protos::ChaincodeEndorsedAction* Arena::CreateMaybeMessage<::protos::ChaincodeEndorsedAction>(Arena*);
template<> ::protos::ProcessedTransaction* Arena::CreateMaybeMessage<::protos::ProcessedTransaction>(Arena*);
template<> ::protos::SignedTransaction* Arena::CreateMaybeMessage<::protos::SignedTransaction>(Arena*);
template<> ::protos::Transaction* Arena::CreateMaybeMessage<::protos::Transaction>(Arena*);
template<> ::protos::TransactionAction* Arena::CreateMaybeMessage<::protos::TransactionAction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

enum TxValidationCode : int {
  VALID = 0,
  NIL_ENVELOPE = 1,
  BAD_PAYLOAD = 2,
  BAD_COMMON_HEADER = 3,
  BAD_CREATOR_SIGNATURE = 4,
  INVALID_ENDORSER_TRANSACTION = 5,
  INVALID_CONFIG_TRANSACTION = 6,
  UNSUPPORTED_TX_PAYLOAD = 7,
  BAD_PROPOSAL_TXID = 8,
  DUPLICATE_TXID = 9,
  ENDORSEMENT_POLICY_FAILURE = 10,
  MVCC_READ_CONFLICT = 11,
  PHANTOM_READ_CONFLICT = 12,
  UNKNOWN_TX_TYPE = 13,
  TARGET_CHAIN_NOT_FOUND = 14,
  MARSHAL_TX_ERROR = 15,
  NIL_TXACTION = 16,
  EXPIRED_CHAINCODE = 17,
  CHAINCODE_VERSION_CONFLICT = 18,
  BAD_HEADER_EXTENSION = 19,
  BAD_CHANNEL_HEADER = 20,
  BAD_RESPONSE_PAYLOAD = 21,
  BAD_RWSET = 22,
  ILLEGAL_WRITESET = 23,
  INVALID_WRITESET = 24,
  NOT_VALIDATED = 254,
  INVALID_OTHER_REASON = 255,
  TxValidationCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TxValidationCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TxValidationCode_IsValid(int value);
constexpr TxValidationCode TxValidationCode_MIN = VALID;
constexpr TxValidationCode TxValidationCode_MAX = INVALID_OTHER_REASON;
constexpr int TxValidationCode_ARRAYSIZE = TxValidationCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxValidationCode_descriptor();
template<typename T>
inline const std::string& TxValidationCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TxValidationCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TxValidationCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TxValidationCode_descriptor(), enum_t_value);
}
inline bool TxValidationCode_Parse(
    const std::string& name, TxValidationCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TxValidationCode>(
    TxValidationCode_descriptor(), name, value);
}
enum MetaDataKeys : int {
  VALIDATION_PARAMETER = 0,
  MetaDataKeys_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MetaDataKeys_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MetaDataKeys_IsValid(int value);
constexpr MetaDataKeys MetaDataKeys_MIN = VALIDATION_PARAMETER;
constexpr MetaDataKeys MetaDataKeys_MAX = VALIDATION_PARAMETER;
constexpr int MetaDataKeys_ARRAYSIZE = MetaDataKeys_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetaDataKeys_descriptor();
template<typename T>
inline const std::string& MetaDataKeys_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetaDataKeys>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetaDataKeys_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetaDataKeys_descriptor(), enum_t_value);
}
inline bool MetaDataKeys_Parse(
    const std::string& name, MetaDataKeys* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetaDataKeys>(
    MetaDataKeys_descriptor(), name, value);
}
// ===================================================================

class SignedTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.SignedTransaction) */ {
 public:
  inline SignedTransaction() : SignedTransaction(nullptr) {};
  virtual ~SignedTransaction();

  SignedTransaction(const SignedTransaction& from);
  SignedTransaction(SignedTransaction&& from) noexcept
    : SignedTransaction() {
    *this = ::std::move(from);
  }

  inline SignedTransaction& operator=(const SignedTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedTransaction& operator=(SignedTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignedTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedTransaction* internal_default_instance() {
    return reinterpret_cast<const SignedTransaction*>(
               &_SignedTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignedTransaction& a, SignedTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedTransaction* New() const final {
    return CreateMaybeMessage<SignedTransaction>(nullptr);
  }

  SignedTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignedTransaction& from);
  void MergeFrom(const SignedTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.SignedTransaction";
  }
  protected:
  explicit SignedTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2ftransaction_2eproto);
    return ::descriptor_table_peer_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionBytesFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes transaction_bytes = 1;
  void clear_transaction_bytes();
  const std::string& transaction_bytes() const;
  void set_transaction_bytes(const std::string& value);
  void set_transaction_bytes(std::string&& value);
  void set_transaction_bytes(const char* value);
  void set_transaction_bytes(const void* value, size_t size);
  std::string* mutable_transaction_bytes();
  std::string* release_transaction_bytes();
  void set_allocated_transaction_bytes(std::string* transaction_bytes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transaction_bytes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transaction_bytes(
      std::string* transaction_bytes);
  private:
  const std::string& _internal_transaction_bytes() const;
  void _internal_set_transaction_bytes(const std::string& value);
  std::string* _internal_mutable_transaction_bytes();
  public:

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:protos.SignedTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class ProcessedTransaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ProcessedTransaction) */ {
 public:
  inline ProcessedTransaction() : ProcessedTransaction(nullptr) {};
  virtual ~ProcessedTransaction();

  ProcessedTransaction(const ProcessedTransaction& from);
  ProcessedTransaction(ProcessedTransaction&& from) noexcept
    : ProcessedTransaction() {
    *this = ::std::move(from);
  }

  inline ProcessedTransaction& operator=(const ProcessedTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessedTransaction& operator=(ProcessedTransaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessedTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessedTransaction* internal_default_instance() {
    return reinterpret_cast<const ProcessedTransaction*>(
               &_ProcessedTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessedTransaction& a, ProcessedTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessedTransaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessedTransaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessedTransaction* New() const final {
    return CreateMaybeMessage<ProcessedTransaction>(nullptr);
  }

  ProcessedTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessedTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessedTransaction& from);
  void MergeFrom(const ProcessedTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessedTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ProcessedTransaction";
  }
  protected:
  explicit ProcessedTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2ftransaction_2eproto);
    return ::descriptor_table_peer_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionEnvelopeFieldNumber = 1,
    kValidationCodeFieldNumber = 2,
  };
  // .common.Envelope transactionEnvelope = 1;
  bool has_transactionenvelope() const;
  private:
  bool _internal_has_transactionenvelope() const;
  public:
  void clear_transactionenvelope();
  const ::common::Envelope& transactionenvelope() const;
  ::common::Envelope* release_transactionenvelope();
  ::common::Envelope* mutable_transactionenvelope();
  void set_allocated_transactionenvelope(::common::Envelope* transactionenvelope);
  private:
  const ::common::Envelope& _internal_transactionenvelope() const;
  ::common::Envelope* _internal_mutable_transactionenvelope();
  public:
  void unsafe_arena_set_allocated_transactionenvelope(
      ::common::Envelope* transactionenvelope);
  ::common::Envelope* unsafe_arena_release_transactionenvelope();

  // int32 validationCode = 2;
  void clear_validationcode();
  ::PROTOBUF_NAMESPACE_ID::int32 validationcode() const;
  void set_validationcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_validationcode() const;
  void _internal_set_validationcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.ProcessedTransaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::common::Envelope* transactionenvelope_;
  ::PROTOBUF_NAMESPACE_ID::int32 validationcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {};
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2ftransaction_2eproto);
    return ::descriptor_table_peer_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
  };
  // repeated .protos.TransactionAction actions = 1;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::protos::TransactionAction* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::TransactionAction >*
      mutable_actions();
  private:
  const ::protos::TransactionAction& _internal_actions(int index) const;
  ::protos::TransactionAction* _internal_add_actions();
  public:
  const ::protos::TransactionAction& actions(int index) const;
  ::protos::TransactionAction* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::TransactionAction >&
      actions() const;

  // @@protoc_insertion_point(class_scope:protos.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::TransactionAction > actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class TransactionAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.TransactionAction) */ {
 public:
  inline TransactionAction() : TransactionAction(nullptr) {};
  virtual ~TransactionAction();

  TransactionAction(const TransactionAction& from);
  TransactionAction(TransactionAction&& from) noexcept
    : TransactionAction() {
    *this = ::std::move(from);
  }

  inline TransactionAction& operator=(const TransactionAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionAction& operator=(TransactionAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionAction* internal_default_instance() {
    return reinterpret_cast<const TransactionAction*>(
               &_TransactionAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransactionAction& a, TransactionAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionAction* New() const final {
    return CreateMaybeMessage<TransactionAction>(nullptr);
  }

  TransactionAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionAction& from);
  void MergeFrom(const TransactionAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.TransactionAction";
  }
  protected:
  explicit TransactionAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2ftransaction_2eproto);
    return ::descriptor_table_peer_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // bytes header = 1;
  void clear_header();
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_header();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_header(
      std::string* header);
  private:
  const std::string& _internal_header() const;
  void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:protos.TransactionAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class ChaincodeActionPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeActionPayload) */ {
 public:
  inline ChaincodeActionPayload() : ChaincodeActionPayload(nullptr) {};
  virtual ~ChaincodeActionPayload();

  ChaincodeActionPayload(const ChaincodeActionPayload& from);
  ChaincodeActionPayload(ChaincodeActionPayload&& from) noexcept
    : ChaincodeActionPayload() {
    *this = ::std::move(from);
  }

  inline ChaincodeActionPayload& operator=(const ChaincodeActionPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeActionPayload& operator=(ChaincodeActionPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeActionPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChaincodeActionPayload* internal_default_instance() {
    return reinterpret_cast<const ChaincodeActionPayload*>(
               &_ChaincodeActionPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChaincodeActionPayload& a, ChaincodeActionPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeActionPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeActionPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeActionPayload* New() const final {
    return CreateMaybeMessage<ChaincodeActionPayload>(nullptr);
  }

  ChaincodeActionPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeActionPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeActionPayload& from);
  void MergeFrom(const ChaincodeActionPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeActionPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeActionPayload";
  }
  protected:
  explicit ChaincodeActionPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2ftransaction_2eproto);
    return ::descriptor_table_peer_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChaincodeProposalPayloadFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // bytes chaincode_proposal_payload = 1;
  void clear_chaincode_proposal_payload();
  const std::string& chaincode_proposal_payload() const;
  void set_chaincode_proposal_payload(const std::string& value);
  void set_chaincode_proposal_payload(std::string&& value);
  void set_chaincode_proposal_payload(const char* value);
  void set_chaincode_proposal_payload(const void* value, size_t size);
  std::string* mutable_chaincode_proposal_payload();
  std::string* release_chaincode_proposal_payload();
  void set_allocated_chaincode_proposal_payload(std::string* chaincode_proposal_payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_chaincode_proposal_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chaincode_proposal_payload(
      std::string* chaincode_proposal_payload);
  private:
  const std::string& _internal_chaincode_proposal_payload() const;
  void _internal_set_chaincode_proposal_payload(const std::string& value);
  std::string* _internal_mutable_chaincode_proposal_payload();
  public:

  // .protos.ChaincodeEndorsedAction action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::protos::ChaincodeEndorsedAction& action() const;
  ::protos::ChaincodeEndorsedAction* release_action();
  ::protos::ChaincodeEndorsedAction* mutable_action();
  void set_allocated_action(::protos::ChaincodeEndorsedAction* action);
  private:
  const ::protos::ChaincodeEndorsedAction& _internal_action() const;
  ::protos::ChaincodeEndorsedAction* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::protos::ChaincodeEndorsedAction* action);
  ::protos::ChaincodeEndorsedAction* unsafe_arena_release_action();

  // @@protoc_insertion_point(class_scope:protos.ChaincodeActionPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chaincode_proposal_payload_;
  ::protos::ChaincodeEndorsedAction* action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class ChaincodeEndorsedAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeEndorsedAction) */ {
 public:
  inline ChaincodeEndorsedAction() : ChaincodeEndorsedAction(nullptr) {};
  virtual ~ChaincodeEndorsedAction();

  ChaincodeEndorsedAction(const ChaincodeEndorsedAction& from);
  ChaincodeEndorsedAction(ChaincodeEndorsedAction&& from) noexcept
    : ChaincodeEndorsedAction() {
    *this = ::std::move(from);
  }

  inline ChaincodeEndorsedAction& operator=(const ChaincodeEndorsedAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeEndorsedAction& operator=(ChaincodeEndorsedAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeEndorsedAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChaincodeEndorsedAction* internal_default_instance() {
    return reinterpret_cast<const ChaincodeEndorsedAction*>(
               &_ChaincodeEndorsedAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChaincodeEndorsedAction& a, ChaincodeEndorsedAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeEndorsedAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeEndorsedAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeEndorsedAction* New() const final {
    return CreateMaybeMessage<ChaincodeEndorsedAction>(nullptr);
  }

  ChaincodeEndorsedAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeEndorsedAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeEndorsedAction& from);
  void MergeFrom(const ChaincodeEndorsedAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeEndorsedAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeEndorsedAction";
  }
  protected:
  explicit ChaincodeEndorsedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2ftransaction_2eproto);
    return ::descriptor_table_peer_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndorsementsFieldNumber = 2,
    kProposalResponsePayloadFieldNumber = 1,
  };
  // repeated .protos.Endorsement endorsements = 2;
  int endorsements_size() const;
  private:
  int _internal_endorsements_size() const;
  public:
  void clear_endorsements();
  ::protos::Endorsement* mutable_endorsements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Endorsement >*
      mutable_endorsements();
  private:
  const ::protos::Endorsement& _internal_endorsements(int index) const;
  ::protos::Endorsement* _internal_add_endorsements();
  public:
  const ::protos::Endorsement& endorsements(int index) const;
  ::protos::Endorsement* add_endorsements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Endorsement >&
      endorsements() const;

  // bytes proposal_response_payload = 1;
  void clear_proposal_response_payload();
  const std::string& proposal_response_payload() const;
  void set_proposal_response_payload(const std::string& value);
  void set_proposal_response_payload(std::string&& value);
  void set_proposal_response_payload(const char* value);
  void set_proposal_response_payload(const void* value, size_t size);
  std::string* mutable_proposal_response_payload();
  std::string* release_proposal_response_payload();
  void set_allocated_proposal_response_payload(std::string* proposal_response_payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proposal_response_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proposal_response_payload(
      std::string* proposal_response_payload);
  private:
  const std::string& _internal_proposal_response_payload() const;
  void _internal_set_proposal_response_payload(const std::string& value);
  std::string* _internal_mutable_proposal_response_payload();
  public:

  // @@protoc_insertion_point(class_scope:protos.ChaincodeEndorsedAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Endorsement > endorsements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_response_payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignedTransaction

// bytes transaction_bytes = 1;
inline void SignedTransaction::clear_transaction_bytes() {
  transaction_bytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignedTransaction::transaction_bytes() const {
  // @@protoc_insertion_point(field_get:protos.SignedTransaction.transaction_bytes)
  return _internal_transaction_bytes();
}
inline void SignedTransaction::set_transaction_bytes(const std::string& value) {
  _internal_set_transaction_bytes(value);
  // @@protoc_insertion_point(field_set:protos.SignedTransaction.transaction_bytes)
}
inline std::string* SignedTransaction::mutable_transaction_bytes() {
  // @@protoc_insertion_point(field_mutable:protos.SignedTransaction.transaction_bytes)
  return _internal_mutable_transaction_bytes();
}
inline const std::string& SignedTransaction::_internal_transaction_bytes() const {
  return transaction_bytes_.Get();
}
inline void SignedTransaction::_internal_set_transaction_bytes(const std::string& value) {
  
  transaction_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignedTransaction::set_transaction_bytes(std::string&& value) {
  
  transaction_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.SignedTransaction.transaction_bytes)
}
inline void SignedTransaction::set_transaction_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.SignedTransaction.transaction_bytes)
}
inline void SignedTransaction::set_transaction_bytes(const void* value,
    size_t size) {
  
  transaction_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.SignedTransaction.transaction_bytes)
}
inline std::string* SignedTransaction::_internal_mutable_transaction_bytes() {
  
  return transaction_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignedTransaction::release_transaction_bytes() {
  // @@protoc_insertion_point(field_release:protos.SignedTransaction.transaction_bytes)
  return transaction_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedTransaction::set_allocated_transaction_bytes(std::string* transaction_bytes) {
  if (transaction_bytes != nullptr) {
    
  } else {
    
  }
  transaction_bytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_bytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.SignedTransaction.transaction_bytes)
}
inline std::string* SignedTransaction::unsafe_arena_release_transaction_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.SignedTransaction.transaction_bytes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transaction_bytes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SignedTransaction::unsafe_arena_set_allocated_transaction_bytes(
    std::string* transaction_bytes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transaction_bytes != nullptr) {
    
  } else {
    
  }
  transaction_bytes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transaction_bytes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.SignedTransaction.transaction_bytes)
}

// bytes signature = 2;
inline void SignedTransaction::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignedTransaction::signature() const {
  // @@protoc_insertion_point(field_get:protos.SignedTransaction.signature)
  return _internal_signature();
}
inline void SignedTransaction::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:protos.SignedTransaction.signature)
}
inline std::string* SignedTransaction::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:protos.SignedTransaction.signature)
  return _internal_mutable_signature();
}
inline const std::string& SignedTransaction::_internal_signature() const {
  return signature_.Get();
}
inline void SignedTransaction::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignedTransaction::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.SignedTransaction.signature)
}
inline void SignedTransaction::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.SignedTransaction.signature)
}
inline void SignedTransaction::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.SignedTransaction.signature)
}
inline std::string* SignedTransaction::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignedTransaction::release_signature() {
  // @@protoc_insertion_point(field_release:protos.SignedTransaction.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedTransaction::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.SignedTransaction.signature)
}
inline std::string* SignedTransaction::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.SignedTransaction.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SignedTransaction::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.SignedTransaction.signature)
}

// -------------------------------------------------------------------

// ProcessedTransaction

// .common.Envelope transactionEnvelope = 1;
inline bool ProcessedTransaction::_internal_has_transactionenvelope() const {
  return this != internal_default_instance() && transactionenvelope_ != nullptr;
}
inline bool ProcessedTransaction::has_transactionenvelope() const {
  return _internal_has_transactionenvelope();
}
inline const ::common::Envelope& ProcessedTransaction::_internal_transactionenvelope() const {
  const ::common::Envelope* p = transactionenvelope_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::Envelope*>(
      &::common::_Envelope_default_instance_);
}
inline const ::common::Envelope& ProcessedTransaction::transactionenvelope() const {
  // @@protoc_insertion_point(field_get:protos.ProcessedTransaction.transactionEnvelope)
  return _internal_transactionenvelope();
}
inline void ProcessedTransaction::unsafe_arena_set_allocated_transactionenvelope(
    ::common::Envelope* transactionenvelope) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionenvelope_);
  }
  transactionenvelope_ = transactionenvelope;
  if (transactionenvelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ProcessedTransaction.transactionEnvelope)
}
inline ::common::Envelope* ProcessedTransaction::release_transactionenvelope() {
  auto temp = unsafe_arena_release_transactionenvelope();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::Envelope* ProcessedTransaction::unsafe_arena_release_transactionenvelope() {
  // @@protoc_insertion_point(field_release:protos.ProcessedTransaction.transactionEnvelope)
  
  ::common::Envelope* temp = transactionenvelope_;
  transactionenvelope_ = nullptr;
  return temp;
}
inline ::common::Envelope* ProcessedTransaction::_internal_mutable_transactionenvelope() {
  
  if (transactionenvelope_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::Envelope>(GetArena());
    transactionenvelope_ = p;
  }
  return transactionenvelope_;
}
inline ::common::Envelope* ProcessedTransaction::mutable_transactionenvelope() {
  // @@protoc_insertion_point(field_mutable:protos.ProcessedTransaction.transactionEnvelope)
  return _internal_mutable_transactionenvelope();
}
inline void ProcessedTransaction::set_allocated_transactionenvelope(::common::Envelope* transactionenvelope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionenvelope_);
  }
  if (transactionenvelope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transactionenvelope)->GetArena();
    if (message_arena != submessage_arena) {
      transactionenvelope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactionenvelope, submessage_arena);
    }
    
  } else {
    
  }
  transactionenvelope_ = transactionenvelope;
  // @@protoc_insertion_point(field_set_allocated:protos.ProcessedTransaction.transactionEnvelope)
}

// int32 validationCode = 2;
inline void ProcessedTransaction::clear_validationcode() {
  validationcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessedTransaction::_internal_validationcode() const {
  return validationcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessedTransaction::validationcode() const {
  // @@protoc_insertion_point(field_get:protos.ProcessedTransaction.validationCode)
  return _internal_validationcode();
}
inline void ProcessedTransaction::_internal_set_validationcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  validationcode_ = value;
}
inline void ProcessedTransaction::set_validationcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_validationcode(value);
  // @@protoc_insertion_point(field_set:protos.ProcessedTransaction.validationCode)
}

// -------------------------------------------------------------------

// Transaction

// repeated .protos.TransactionAction actions = 1;
inline int Transaction::_internal_actions_size() const {
  return actions_.size();
}
inline int Transaction::actions_size() const {
  return _internal_actions_size();
}
inline void Transaction::clear_actions() {
  actions_.Clear();
}
inline ::protos::TransactionAction* Transaction::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:protos.Transaction.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::TransactionAction >*
Transaction::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:protos.Transaction.actions)
  return &actions_;
}
inline const ::protos::TransactionAction& Transaction::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::protos::TransactionAction& Transaction::actions(int index) const {
  // @@protoc_insertion_point(field_get:protos.Transaction.actions)
  return _internal_actions(index);
}
inline ::protos::TransactionAction* Transaction::_internal_add_actions() {
  return actions_.Add();
}
inline ::protos::TransactionAction* Transaction::add_actions() {
  // @@protoc_insertion_point(field_add:protos.Transaction.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::TransactionAction >&
Transaction::actions() const {
  // @@protoc_insertion_point(field_list:protos.Transaction.actions)
  return actions_;
}

// -------------------------------------------------------------------

// TransactionAction

// bytes header = 1;
inline void TransactionAction::clear_header() {
  header_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionAction::header() const {
  // @@protoc_insertion_point(field_get:protos.TransactionAction.header)
  return _internal_header();
}
inline void TransactionAction::set_header(const std::string& value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:protos.TransactionAction.header)
}
inline std::string* TransactionAction::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protos.TransactionAction.header)
  return _internal_mutable_header();
}
inline const std::string& TransactionAction::_internal_header() const {
  return header_.Get();
}
inline void TransactionAction::_internal_set_header(const std::string& value) {
  
  header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionAction::set_header(std::string&& value) {
  
  header_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.TransactionAction.header)
}
inline void TransactionAction::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.TransactionAction.header)
}
inline void TransactionAction::set_header(const void* value,
    size_t size) {
  
  header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.TransactionAction.header)
}
inline std::string* TransactionAction::_internal_mutable_header() {
  
  return header_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionAction::release_header() {
  // @@protoc_insertion_point(field_release:protos.TransactionAction.header)
  return header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionAction::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.TransactionAction.header)
}
inline std::string* TransactionAction::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.TransactionAction.header)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return header_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransactionAction::unsafe_arena_set_allocated_header(
    std::string* header) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (header != nullptr) {
    
  } else {
    
  }
  header_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      header, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.TransactionAction.header)
}

// bytes payload = 2;
inline void TransactionAction::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionAction::payload() const {
  // @@protoc_insertion_point(field_get:protos.TransactionAction.payload)
  return _internal_payload();
}
inline void TransactionAction::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:protos.TransactionAction.payload)
}
inline std::string* TransactionAction::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:protos.TransactionAction.payload)
  return _internal_mutable_payload();
}
inline const std::string& TransactionAction::_internal_payload() const {
  return payload_.Get();
}
inline void TransactionAction::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionAction::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.TransactionAction.payload)
}
inline void TransactionAction::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.TransactionAction.payload)
}
inline void TransactionAction::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.TransactionAction.payload)
}
inline std::string* TransactionAction::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionAction::release_payload() {
  // @@protoc_insertion_point(field_release:protos.TransactionAction.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionAction::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.TransactionAction.payload)
}
inline std::string* TransactionAction::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.TransactionAction.payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransactionAction::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.TransactionAction.payload)
}

// -------------------------------------------------------------------

// ChaincodeActionPayload

// bytes chaincode_proposal_payload = 1;
inline void ChaincodeActionPayload::clear_chaincode_proposal_payload() {
  chaincode_proposal_payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChaincodeActionPayload::chaincode_proposal_payload() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeActionPayload.chaincode_proposal_payload)
  return _internal_chaincode_proposal_payload();
}
inline void ChaincodeActionPayload::set_chaincode_proposal_payload(const std::string& value) {
  _internal_set_chaincode_proposal_payload(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeActionPayload.chaincode_proposal_payload)
}
inline std::string* ChaincodeActionPayload::mutable_chaincode_proposal_payload() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeActionPayload.chaincode_proposal_payload)
  return _internal_mutable_chaincode_proposal_payload();
}
inline const std::string& ChaincodeActionPayload::_internal_chaincode_proposal_payload() const {
  return chaincode_proposal_payload_.Get();
}
inline void ChaincodeActionPayload::_internal_set_chaincode_proposal_payload(const std::string& value) {
  
  chaincode_proposal_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChaincodeActionPayload::set_chaincode_proposal_payload(std::string&& value) {
  
  chaincode_proposal_payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeActionPayload.chaincode_proposal_payload)
}
inline void ChaincodeActionPayload::set_chaincode_proposal_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chaincode_proposal_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeActionPayload.chaincode_proposal_payload)
}
inline void ChaincodeActionPayload::set_chaincode_proposal_payload(const void* value,
    size_t size) {
  
  chaincode_proposal_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeActionPayload.chaincode_proposal_payload)
}
inline std::string* ChaincodeActionPayload::_internal_mutable_chaincode_proposal_payload() {
  
  return chaincode_proposal_payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChaincodeActionPayload::release_chaincode_proposal_payload() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeActionPayload.chaincode_proposal_payload)
  return chaincode_proposal_payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeActionPayload::set_allocated_chaincode_proposal_payload(std::string* chaincode_proposal_payload) {
  if (chaincode_proposal_payload != nullptr) {
    
  } else {
    
  }
  chaincode_proposal_payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chaincode_proposal_payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeActionPayload.chaincode_proposal_payload)
}
inline std::string* ChaincodeActionPayload::unsafe_arena_release_chaincode_proposal_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.ChaincodeActionPayload.chaincode_proposal_payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return chaincode_proposal_payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChaincodeActionPayload::unsafe_arena_set_allocated_chaincode_proposal_payload(
    std::string* chaincode_proposal_payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (chaincode_proposal_payload != nullptr) {
    
  } else {
    
  }
  chaincode_proposal_payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      chaincode_proposal_payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeActionPayload.chaincode_proposal_payload)
}

// .protos.ChaincodeEndorsedAction action = 2;
inline bool ChaincodeActionPayload::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool ChaincodeActionPayload::has_action() const {
  return _internal_has_action();
}
inline void ChaincodeActionPayload::clear_action() {
  if (GetArena() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
inline const ::protos::ChaincodeEndorsedAction& ChaincodeActionPayload::_internal_action() const {
  const ::protos::ChaincodeEndorsedAction* p = action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::ChaincodeEndorsedAction*>(
      &::protos::_ChaincodeEndorsedAction_default_instance_);
}
inline const ::protos::ChaincodeEndorsedAction& ChaincodeActionPayload::action() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeActionPayload.action)
  return _internal_action();
}
inline void ChaincodeActionPayload::unsafe_arena_set_allocated_action(
    ::protos::ChaincodeEndorsedAction* action) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeActionPayload.action)
}
inline ::protos::ChaincodeEndorsedAction* ChaincodeActionPayload::release_action() {
  auto temp = unsafe_arena_release_action();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::ChaincodeEndorsedAction* ChaincodeActionPayload::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeActionPayload.action)
  
  ::protos::ChaincodeEndorsedAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::protos::ChaincodeEndorsedAction* ChaincodeActionPayload::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::ChaincodeEndorsedAction>(GetArena());
    action_ = p;
  }
  return action_;
}
inline ::protos::ChaincodeEndorsedAction* ChaincodeActionPayload::mutable_action() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeActionPayload.action)
  return _internal_mutable_action();
}
inline void ChaincodeActionPayload::set_allocated_action(::protos::ChaincodeEndorsedAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeActionPayload.action)
}

// -------------------------------------------------------------------

// ChaincodeEndorsedAction

// bytes proposal_response_payload = 1;
inline void ChaincodeEndorsedAction::clear_proposal_response_payload() {
  proposal_response_payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChaincodeEndorsedAction::proposal_response_payload() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeEndorsedAction.proposal_response_payload)
  return _internal_proposal_response_payload();
}
inline void ChaincodeEndorsedAction::set_proposal_response_payload(const std::string& value) {
  _internal_set_proposal_response_payload(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeEndorsedAction.proposal_response_payload)
}
inline std::string* ChaincodeEndorsedAction::mutable_proposal_response_payload() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeEndorsedAction.proposal_response_payload)
  return _internal_mutable_proposal_response_payload();
}
inline const std::string& ChaincodeEndorsedAction::_internal_proposal_response_payload() const {
  return proposal_response_payload_.Get();
}
inline void ChaincodeEndorsedAction::_internal_set_proposal_response_payload(const std::string& value) {
  
  proposal_response_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChaincodeEndorsedAction::set_proposal_response_payload(std::string&& value) {
  
  proposal_response_payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeEndorsedAction.proposal_response_payload)
}
inline void ChaincodeEndorsedAction::set_proposal_response_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposal_response_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeEndorsedAction.proposal_response_payload)
}
inline void ChaincodeEndorsedAction::set_proposal_response_payload(const void* value,
    size_t size) {
  
  proposal_response_payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeEndorsedAction.proposal_response_payload)
}
inline std::string* ChaincodeEndorsedAction::_internal_mutable_proposal_response_payload() {
  
  return proposal_response_payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChaincodeEndorsedAction::release_proposal_response_payload() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeEndorsedAction.proposal_response_payload)
  return proposal_response_payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeEndorsedAction::set_allocated_proposal_response_payload(std::string* proposal_response_payload) {
  if (proposal_response_payload != nullptr) {
    
  } else {
    
  }
  proposal_response_payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_response_payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeEndorsedAction.proposal_response_payload)
}
inline std::string* ChaincodeEndorsedAction::unsafe_arena_release_proposal_response_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.ChaincodeEndorsedAction.proposal_response_payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proposal_response_payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChaincodeEndorsedAction::unsafe_arena_set_allocated_proposal_response_payload(
    std::string* proposal_response_payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proposal_response_payload != nullptr) {
    
  } else {
    
  }
  proposal_response_payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proposal_response_payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeEndorsedAction.proposal_response_payload)
}

// repeated .protos.Endorsement endorsements = 2;
inline int ChaincodeEndorsedAction::_internal_endorsements_size() const {
  return endorsements_.size();
}
inline int ChaincodeEndorsedAction::endorsements_size() const {
  return _internal_endorsements_size();
}
inline ::protos::Endorsement* ChaincodeEndorsedAction::mutable_endorsements(int index) {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeEndorsedAction.endorsements)
  return endorsements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Endorsement >*
ChaincodeEndorsedAction::mutable_endorsements() {
  // @@protoc_insertion_point(field_mutable_list:protos.ChaincodeEndorsedAction.endorsements)
  return &endorsements_;
}
inline const ::protos::Endorsement& ChaincodeEndorsedAction::_internal_endorsements(int index) const {
  return endorsements_.Get(index);
}
inline const ::protos::Endorsement& ChaincodeEndorsedAction::endorsements(int index) const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeEndorsedAction.endorsements)
  return _internal_endorsements(index);
}
inline ::protos::Endorsement* ChaincodeEndorsedAction::_internal_add_endorsements() {
  return endorsements_.Add();
}
inline ::protos::Endorsement* ChaincodeEndorsedAction::add_endorsements() {
  // @@protoc_insertion_point(field_add:protos.ChaincodeEndorsedAction.endorsements)
  return _internal_add_endorsements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protos::Endorsement >&
ChaincodeEndorsedAction::endorsements() const {
  // @@protoc_insertion_point(field_list:protos.ChaincodeEndorsedAction.endorsements)
  return endorsements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protos::TxValidationCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::TxValidationCode>() {
  return ::protos::TxValidationCode_descriptor();
}
template <> struct is_proto_enum< ::protos::MetaDataKeys> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::MetaDataKeys>() {
  return ::protos::MetaDataKeys_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_peer_2ftransaction_2eproto

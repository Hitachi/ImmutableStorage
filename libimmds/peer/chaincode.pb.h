// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer/chaincode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_peer_2fchaincode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_peer_2fchaincode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_peer_2fchaincode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_peer_2fchaincode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_peer_2fchaincode_2eproto;
namespace protos {
class ChaincodeDeploymentSpec;
class ChaincodeDeploymentSpecDefaultTypeInternal;
extern ChaincodeDeploymentSpecDefaultTypeInternal _ChaincodeDeploymentSpec_default_instance_;
class ChaincodeID;
class ChaincodeIDDefaultTypeInternal;
extern ChaincodeIDDefaultTypeInternal _ChaincodeID_default_instance_;
class ChaincodeInput;
class ChaincodeInputDefaultTypeInternal;
extern ChaincodeInputDefaultTypeInternal _ChaincodeInput_default_instance_;
class ChaincodeInput_DecorationsEntry_DoNotUse;
class ChaincodeInput_DecorationsEntry_DoNotUseDefaultTypeInternal;
extern ChaincodeInput_DecorationsEntry_DoNotUseDefaultTypeInternal _ChaincodeInput_DecorationsEntry_DoNotUse_default_instance_;
class ChaincodeInvocationSpec;
class ChaincodeInvocationSpecDefaultTypeInternal;
extern ChaincodeInvocationSpecDefaultTypeInternal _ChaincodeInvocationSpec_default_instance_;
class ChaincodeSpec;
class ChaincodeSpecDefaultTypeInternal;
extern ChaincodeSpecDefaultTypeInternal _ChaincodeSpec_default_instance_;
class LifecycleEvent;
class LifecycleEventDefaultTypeInternal;
extern LifecycleEventDefaultTypeInternal _LifecycleEvent_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::ChaincodeDeploymentSpec* Arena::CreateMaybeMessage<::protos::ChaincodeDeploymentSpec>(Arena*);
template<> ::protos::ChaincodeID* Arena::CreateMaybeMessage<::protos::ChaincodeID>(Arena*);
template<> ::protos::ChaincodeInput* Arena::CreateMaybeMessage<::protos::ChaincodeInput>(Arena*);
template<> ::protos::ChaincodeInput_DecorationsEntry_DoNotUse* Arena::CreateMaybeMessage<::protos::ChaincodeInput_DecorationsEntry_DoNotUse>(Arena*);
template<> ::protos::ChaincodeInvocationSpec* Arena::CreateMaybeMessage<::protos::ChaincodeInvocationSpec>(Arena*);
template<> ::protos::ChaincodeSpec* Arena::CreateMaybeMessage<::protos::ChaincodeSpec>(Arena*);
template<> ::protos::LifecycleEvent* Arena::CreateMaybeMessage<::protos::LifecycleEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

enum ChaincodeSpec_Type : int {
  ChaincodeSpec_Type_UNDEFINED = 0,
  ChaincodeSpec_Type_GOLANG = 1,
  ChaincodeSpec_Type_NODE = 2,
  ChaincodeSpec_Type_CAR = 3,
  ChaincodeSpec_Type_JAVA = 4,
  ChaincodeSpec_Type_ChaincodeSpec_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChaincodeSpec_Type_ChaincodeSpec_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChaincodeSpec_Type_IsValid(int value);
constexpr ChaincodeSpec_Type ChaincodeSpec_Type_Type_MIN = ChaincodeSpec_Type_UNDEFINED;
constexpr ChaincodeSpec_Type ChaincodeSpec_Type_Type_MAX = ChaincodeSpec_Type_JAVA;
constexpr int ChaincodeSpec_Type_Type_ARRAYSIZE = ChaincodeSpec_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChaincodeSpec_Type_descriptor();
template<typename T>
inline const std::string& ChaincodeSpec_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChaincodeSpec_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChaincodeSpec_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChaincodeSpec_Type_descriptor(), enum_t_value);
}
inline bool ChaincodeSpec_Type_Parse(
    const std::string& name, ChaincodeSpec_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChaincodeSpec_Type>(
    ChaincodeSpec_Type_descriptor(), name, value);
}
enum ChaincodeDeploymentSpec_ExecutionEnvironment : int {
  ChaincodeDeploymentSpec_ExecutionEnvironment_DOCKER = 0,
  ChaincodeDeploymentSpec_ExecutionEnvironment_SYSTEM = 1,
  ChaincodeDeploymentSpec_ExecutionEnvironment_ChaincodeDeploymentSpec_ExecutionEnvironment_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChaincodeDeploymentSpec_ExecutionEnvironment_ChaincodeDeploymentSpec_ExecutionEnvironment_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChaincodeDeploymentSpec_ExecutionEnvironment_IsValid(int value);
constexpr ChaincodeDeploymentSpec_ExecutionEnvironment ChaincodeDeploymentSpec_ExecutionEnvironment_ExecutionEnvironment_MIN = ChaincodeDeploymentSpec_ExecutionEnvironment_DOCKER;
constexpr ChaincodeDeploymentSpec_ExecutionEnvironment ChaincodeDeploymentSpec_ExecutionEnvironment_ExecutionEnvironment_MAX = ChaincodeDeploymentSpec_ExecutionEnvironment_SYSTEM;
constexpr int ChaincodeDeploymentSpec_ExecutionEnvironment_ExecutionEnvironment_ARRAYSIZE = ChaincodeDeploymentSpec_ExecutionEnvironment_ExecutionEnvironment_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChaincodeDeploymentSpec_ExecutionEnvironment_descriptor();
template<typename T>
inline const std::string& ChaincodeDeploymentSpec_ExecutionEnvironment_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChaincodeDeploymentSpec_ExecutionEnvironment>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChaincodeDeploymentSpec_ExecutionEnvironment_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChaincodeDeploymentSpec_ExecutionEnvironment_descriptor(), enum_t_value);
}
inline bool ChaincodeDeploymentSpec_ExecutionEnvironment_Parse(
    const std::string& name, ChaincodeDeploymentSpec_ExecutionEnvironment* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChaincodeDeploymentSpec_ExecutionEnvironment>(
    ChaincodeDeploymentSpec_ExecutionEnvironment_descriptor(), name, value);
}
enum ConfidentialityLevel : int {
  PUBLIC = 0,
  CONFIDENTIAL = 1,
  ConfidentialityLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConfidentialityLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConfidentialityLevel_IsValid(int value);
constexpr ConfidentialityLevel ConfidentialityLevel_MIN = PUBLIC;
constexpr ConfidentialityLevel ConfidentialityLevel_MAX = CONFIDENTIAL;
constexpr int ConfidentialityLevel_ARRAYSIZE = ConfidentialityLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfidentialityLevel_descriptor();
template<typename T>
inline const std::string& ConfidentialityLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfidentialityLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfidentialityLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfidentialityLevel_descriptor(), enum_t_value);
}
inline bool ConfidentialityLevel_Parse(
    const std::string& name, ConfidentialityLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfidentialityLevel>(
    ConfidentialityLevel_descriptor(), name, value);
}
// ===================================================================

class ChaincodeID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeID) */ {
 public:
  inline ChaincodeID() : ChaincodeID(nullptr) {};
  virtual ~ChaincodeID();

  ChaincodeID(const ChaincodeID& from);
  ChaincodeID(ChaincodeID&& from) noexcept
    : ChaincodeID() {
    *this = ::std::move(from);
  }

  inline ChaincodeID& operator=(const ChaincodeID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeID& operator=(ChaincodeID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChaincodeID* internal_default_instance() {
    return reinterpret_cast<const ChaincodeID*>(
               &_ChaincodeID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChaincodeID& a, ChaincodeID& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeID* New() const final {
    return CreateMaybeMessage<ChaincodeID>(nullptr);
  }

  ChaincodeID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeID& from);
  void MergeFrom(const ChaincodeID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeID";
  }
  protected:
  explicit ChaincodeID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fchaincode_2eproto);
    return ::descriptor_table_peer_2fchaincode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:protos.ChaincodeID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fchaincode_2eproto;
};
// -------------------------------------------------------------------

class ChaincodeInput_DecorationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChaincodeInput_DecorationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChaincodeInput_DecorationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  ChaincodeInput_DecorationsEntry_DoNotUse();
  ChaincodeInput_DecorationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChaincodeInput_DecorationsEntry_DoNotUse& other);
  static const ChaincodeInput_DecorationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChaincodeInput_DecorationsEntry_DoNotUse*>(&_ChaincodeInput_DecorationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protos.ChaincodeInput.DecorationsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fchaincode_2eproto);
    return ::descriptor_table_peer_2fchaincode_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class ChaincodeInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeInput) */ {
 public:
  inline ChaincodeInput() : ChaincodeInput(nullptr) {};
  virtual ~ChaincodeInput();

  ChaincodeInput(const ChaincodeInput& from);
  ChaincodeInput(ChaincodeInput&& from) noexcept
    : ChaincodeInput() {
    *this = ::std::move(from);
  }

  inline ChaincodeInput& operator=(const ChaincodeInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeInput& operator=(ChaincodeInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChaincodeInput* internal_default_instance() {
    return reinterpret_cast<const ChaincodeInput*>(
               &_ChaincodeInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChaincodeInput& a, ChaincodeInput& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeInput* New() const final {
    return CreateMaybeMessage<ChaincodeInput>(nullptr);
  }

  ChaincodeInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeInput& from);
  void MergeFrom(const ChaincodeInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeInput";
  }
  protected:
  explicit ChaincodeInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fchaincode_2eproto);
    return ::descriptor_table_peer_2fchaincode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 1,
    kDecorationsFieldNumber = 2,
  };
  // repeated bytes args = 1;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const void* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // map<string, bytes> decorations = 2;
  int decorations_size() const;
  private:
  int _internal_decorations_size() const;
  public:
  void clear_decorations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_decorations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_decorations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      decorations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_decorations();

  // @@protoc_insertion_point(class_scope:protos.ChaincodeInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ChaincodeInput_DecorationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > decorations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fchaincode_2eproto;
};
// -------------------------------------------------------------------

class ChaincodeSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeSpec) */ {
 public:
  inline ChaincodeSpec() : ChaincodeSpec(nullptr) {};
  virtual ~ChaincodeSpec();

  ChaincodeSpec(const ChaincodeSpec& from);
  ChaincodeSpec(ChaincodeSpec&& from) noexcept
    : ChaincodeSpec() {
    *this = ::std::move(from);
  }

  inline ChaincodeSpec& operator=(const ChaincodeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeSpec& operator=(ChaincodeSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChaincodeSpec* internal_default_instance() {
    return reinterpret_cast<const ChaincodeSpec*>(
               &_ChaincodeSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChaincodeSpec& a, ChaincodeSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeSpec* New() const final {
    return CreateMaybeMessage<ChaincodeSpec>(nullptr);
  }

  ChaincodeSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeSpec& from);
  void MergeFrom(const ChaincodeSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeSpec";
  }
  protected:
  explicit ChaincodeSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fchaincode_2eproto);
    return ::descriptor_table_peer_2fchaincode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChaincodeSpec_Type Type;
  static constexpr Type UNDEFINED =
    ChaincodeSpec_Type_UNDEFINED;
  static constexpr Type GOLANG =
    ChaincodeSpec_Type_GOLANG;
  static constexpr Type NODE =
    ChaincodeSpec_Type_NODE;
  static constexpr Type CAR =
    ChaincodeSpec_Type_CAR;
  static constexpr Type JAVA =
    ChaincodeSpec_Type_JAVA;
  static inline bool Type_IsValid(int value) {
    return ChaincodeSpec_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ChaincodeSpec_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ChaincodeSpec_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ChaincodeSpec_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ChaincodeSpec_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ChaincodeSpec_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return ChaincodeSpec_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChaincodeIdFieldNumber = 2,
    kInputFieldNumber = 3,
    kTypeFieldNumber = 1,
    kTimeoutFieldNumber = 4,
  };
  // .protos.ChaincodeID chaincode_id = 2;
  bool has_chaincode_id() const;
  private:
  bool _internal_has_chaincode_id() const;
  public:
  void clear_chaincode_id();
  const ::protos::ChaincodeID& chaincode_id() const;
  ::protos::ChaincodeID* release_chaincode_id();
  ::protos::ChaincodeID* mutable_chaincode_id();
  void set_allocated_chaincode_id(::protos::ChaincodeID* chaincode_id);
  private:
  const ::protos::ChaincodeID& _internal_chaincode_id() const;
  ::protos::ChaincodeID* _internal_mutable_chaincode_id();
  public:
  void unsafe_arena_set_allocated_chaincode_id(
      ::protos::ChaincodeID* chaincode_id);
  ::protos::ChaincodeID* unsafe_arena_release_chaincode_id();

  // .protos.ChaincodeInput input = 3;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::protos::ChaincodeInput& input() const;
  ::protos::ChaincodeInput* release_input();
  ::protos::ChaincodeInput* mutable_input();
  void set_allocated_input(::protos::ChaincodeInput* input);
  private:
  const ::protos::ChaincodeInput& _internal_input() const;
  ::protos::ChaincodeInput* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::protos::ChaincodeInput* input);
  ::protos::ChaincodeInput* unsafe_arena_release_input();

  // .protos.ChaincodeSpec.Type type = 1;
  void clear_type();
  ::protos::ChaincodeSpec_Type type() const;
  void set_type(::protos::ChaincodeSpec_Type value);
  private:
  ::protos::ChaincodeSpec_Type _internal_type() const;
  void _internal_set_type(::protos::ChaincodeSpec_Type value);
  public:

  // int32 timeout = 4;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.ChaincodeSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protos::ChaincodeID* chaincode_id_;
  ::protos::ChaincodeInput* input_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fchaincode_2eproto;
};
// -------------------------------------------------------------------

class ChaincodeDeploymentSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeDeploymentSpec) */ {
 public:
  inline ChaincodeDeploymentSpec() : ChaincodeDeploymentSpec(nullptr) {};
  virtual ~ChaincodeDeploymentSpec();

  ChaincodeDeploymentSpec(const ChaincodeDeploymentSpec& from);
  ChaincodeDeploymentSpec(ChaincodeDeploymentSpec&& from) noexcept
    : ChaincodeDeploymentSpec() {
    *this = ::std::move(from);
  }

  inline ChaincodeDeploymentSpec& operator=(const ChaincodeDeploymentSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeDeploymentSpec& operator=(ChaincodeDeploymentSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeDeploymentSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChaincodeDeploymentSpec* internal_default_instance() {
    return reinterpret_cast<const ChaincodeDeploymentSpec*>(
               &_ChaincodeDeploymentSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChaincodeDeploymentSpec& a, ChaincodeDeploymentSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeDeploymentSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeDeploymentSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeDeploymentSpec* New() const final {
    return CreateMaybeMessage<ChaincodeDeploymentSpec>(nullptr);
  }

  ChaincodeDeploymentSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeDeploymentSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeDeploymentSpec& from);
  void MergeFrom(const ChaincodeDeploymentSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeDeploymentSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeDeploymentSpec";
  }
  protected:
  explicit ChaincodeDeploymentSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fchaincode_2eproto);
    return ::descriptor_table_peer_2fchaincode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChaincodeDeploymentSpec_ExecutionEnvironment ExecutionEnvironment;
  static constexpr ExecutionEnvironment DOCKER =
    ChaincodeDeploymentSpec_ExecutionEnvironment_DOCKER;
  static constexpr ExecutionEnvironment SYSTEM =
    ChaincodeDeploymentSpec_ExecutionEnvironment_SYSTEM;
  static inline bool ExecutionEnvironment_IsValid(int value) {
    return ChaincodeDeploymentSpec_ExecutionEnvironment_IsValid(value);
  }
  static constexpr ExecutionEnvironment ExecutionEnvironment_MIN =
    ChaincodeDeploymentSpec_ExecutionEnvironment_ExecutionEnvironment_MIN;
  static constexpr ExecutionEnvironment ExecutionEnvironment_MAX =
    ChaincodeDeploymentSpec_ExecutionEnvironment_ExecutionEnvironment_MAX;
  static constexpr int ExecutionEnvironment_ARRAYSIZE =
    ChaincodeDeploymentSpec_ExecutionEnvironment_ExecutionEnvironment_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ExecutionEnvironment_descriptor() {
    return ChaincodeDeploymentSpec_ExecutionEnvironment_descriptor();
  }
  template<typename T>
  static inline const std::string& ExecutionEnvironment_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExecutionEnvironment>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExecutionEnvironment_Name.");
    return ChaincodeDeploymentSpec_ExecutionEnvironment_Name(enum_t_value);
  }
  static inline bool ExecutionEnvironment_Parse(const std::string& name,
      ExecutionEnvironment* value) {
    return ChaincodeDeploymentSpec_ExecutionEnvironment_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodePackageFieldNumber = 3,
    kChaincodeSpecFieldNumber = 1,
    kExecEnvFieldNumber = 4,
  };
  // bytes code_package = 3;
  void clear_code_package();
  const std::string& code_package() const;
  void set_code_package(const std::string& value);
  void set_code_package(std::string&& value);
  void set_code_package(const char* value);
  void set_code_package(const void* value, size_t size);
  std::string* mutable_code_package();
  std::string* release_code_package();
  void set_allocated_code_package(std::string* code_package);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_code_package();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_code_package(
      std::string* code_package);
  private:
  const std::string& _internal_code_package() const;
  void _internal_set_code_package(const std::string& value);
  std::string* _internal_mutable_code_package();
  public:

  // .protos.ChaincodeSpec chaincode_spec = 1;
  bool has_chaincode_spec() const;
  private:
  bool _internal_has_chaincode_spec() const;
  public:
  void clear_chaincode_spec();
  const ::protos::ChaincodeSpec& chaincode_spec() const;
  ::protos::ChaincodeSpec* release_chaincode_spec();
  ::protos::ChaincodeSpec* mutable_chaincode_spec();
  void set_allocated_chaincode_spec(::protos::ChaincodeSpec* chaincode_spec);
  private:
  const ::protos::ChaincodeSpec& _internal_chaincode_spec() const;
  ::protos::ChaincodeSpec* _internal_mutable_chaincode_spec();
  public:
  void unsafe_arena_set_allocated_chaincode_spec(
      ::protos::ChaincodeSpec* chaincode_spec);
  ::protos::ChaincodeSpec* unsafe_arena_release_chaincode_spec();

  // .protos.ChaincodeDeploymentSpec.ExecutionEnvironment exec_env = 4;
  void clear_exec_env();
  ::protos::ChaincodeDeploymentSpec_ExecutionEnvironment exec_env() const;
  void set_exec_env(::protos::ChaincodeDeploymentSpec_ExecutionEnvironment value);
  private:
  ::protos::ChaincodeDeploymentSpec_ExecutionEnvironment _internal_exec_env() const;
  void _internal_set_exec_env(::protos::ChaincodeDeploymentSpec_ExecutionEnvironment value);
  public:

  // @@protoc_insertion_point(class_scope:protos.ChaincodeDeploymentSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_package_;
  ::protos::ChaincodeSpec* chaincode_spec_;
  int exec_env_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fchaincode_2eproto;
};
// -------------------------------------------------------------------

class ChaincodeInvocationSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ChaincodeInvocationSpec) */ {
 public:
  inline ChaincodeInvocationSpec() : ChaincodeInvocationSpec(nullptr) {};
  virtual ~ChaincodeInvocationSpec();

  ChaincodeInvocationSpec(const ChaincodeInvocationSpec& from);
  ChaincodeInvocationSpec(ChaincodeInvocationSpec&& from) noexcept
    : ChaincodeInvocationSpec() {
    *this = ::std::move(from);
  }

  inline ChaincodeInvocationSpec& operator=(const ChaincodeInvocationSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChaincodeInvocationSpec& operator=(ChaincodeInvocationSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChaincodeInvocationSpec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChaincodeInvocationSpec* internal_default_instance() {
    return reinterpret_cast<const ChaincodeInvocationSpec*>(
               &_ChaincodeInvocationSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChaincodeInvocationSpec& a, ChaincodeInvocationSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ChaincodeInvocationSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChaincodeInvocationSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChaincodeInvocationSpec* New() const final {
    return CreateMaybeMessage<ChaincodeInvocationSpec>(nullptr);
  }

  ChaincodeInvocationSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChaincodeInvocationSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChaincodeInvocationSpec& from);
  void MergeFrom(const ChaincodeInvocationSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChaincodeInvocationSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ChaincodeInvocationSpec";
  }
  protected:
  explicit ChaincodeInvocationSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fchaincode_2eproto);
    return ::descriptor_table_peer_2fchaincode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChaincodeSpecFieldNumber = 1,
  };
  // .protos.ChaincodeSpec chaincode_spec = 1;
  bool has_chaincode_spec() const;
  private:
  bool _internal_has_chaincode_spec() const;
  public:
  void clear_chaincode_spec();
  const ::protos::ChaincodeSpec& chaincode_spec() const;
  ::protos::ChaincodeSpec* release_chaincode_spec();
  ::protos::ChaincodeSpec* mutable_chaincode_spec();
  void set_allocated_chaincode_spec(::protos::ChaincodeSpec* chaincode_spec);
  private:
  const ::protos::ChaincodeSpec& _internal_chaincode_spec() const;
  ::protos::ChaincodeSpec* _internal_mutable_chaincode_spec();
  public:
  void unsafe_arena_set_allocated_chaincode_spec(
      ::protos::ChaincodeSpec* chaincode_spec);
  ::protos::ChaincodeSpec* unsafe_arena_release_chaincode_spec();

  // @@protoc_insertion_point(class_scope:protos.ChaincodeInvocationSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protos::ChaincodeSpec* chaincode_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fchaincode_2eproto;
};
// -------------------------------------------------------------------

class LifecycleEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.LifecycleEvent) */ {
 public:
  inline LifecycleEvent() : LifecycleEvent(nullptr) {};
  virtual ~LifecycleEvent();

  LifecycleEvent(const LifecycleEvent& from);
  LifecycleEvent(LifecycleEvent&& from) noexcept
    : LifecycleEvent() {
    *this = ::std::move(from);
  }

  inline LifecycleEvent& operator=(const LifecycleEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LifecycleEvent& operator=(LifecycleEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LifecycleEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LifecycleEvent* internal_default_instance() {
    return reinterpret_cast<const LifecycleEvent*>(
               &_LifecycleEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LifecycleEvent& a, LifecycleEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(LifecycleEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LifecycleEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LifecycleEvent* New() const final {
    return CreateMaybeMessage<LifecycleEvent>(nullptr);
  }

  LifecycleEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LifecycleEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LifecycleEvent& from);
  void MergeFrom(const LifecycleEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LifecycleEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.LifecycleEvent";
  }
  protected:
  explicit LifecycleEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fchaincode_2eproto);
    return ::descriptor_table_peer_2fchaincode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChaincodeNameFieldNumber = 1,
  };
  // string chaincode_name = 1;
  void clear_chaincode_name();
  const std::string& chaincode_name() const;
  void set_chaincode_name(const std::string& value);
  void set_chaincode_name(std::string&& value);
  void set_chaincode_name(const char* value);
  void set_chaincode_name(const char* value, size_t size);
  std::string* mutable_chaincode_name();
  std::string* release_chaincode_name();
  void set_allocated_chaincode_name(std::string* chaincode_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_chaincode_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chaincode_name(
      std::string* chaincode_name);
  private:
  const std::string& _internal_chaincode_name() const;
  void _internal_set_chaincode_name(const std::string& value);
  std::string* _internal_mutable_chaincode_name();
  public:

  // @@protoc_insertion_point(class_scope:protos.LifecycleEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chaincode_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fchaincode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChaincodeID

// string path = 1;
inline void ChaincodeID::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChaincodeID::path() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeID.path)
  return _internal_path();
}
inline void ChaincodeID::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeID.path)
}
inline std::string* ChaincodeID::mutable_path() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeID.path)
  return _internal_mutable_path();
}
inline const std::string& ChaincodeID::_internal_path() const {
  return path_.Get();
}
inline void ChaincodeID::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChaincodeID::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeID.path)
}
inline void ChaincodeID::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeID.path)
}
inline void ChaincodeID::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeID.path)
}
inline std::string* ChaincodeID::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChaincodeID::release_path() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeID.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeID::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeID.path)
}
inline std::string* ChaincodeID::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.ChaincodeID.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChaincodeID::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeID.path)
}

// string name = 2;
inline void ChaincodeID::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChaincodeID::name() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeID.name)
  return _internal_name();
}
inline void ChaincodeID::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeID.name)
}
inline std::string* ChaincodeID::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeID.name)
  return _internal_mutable_name();
}
inline const std::string& ChaincodeID::_internal_name() const {
  return name_.Get();
}
inline void ChaincodeID::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChaincodeID::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeID.name)
}
inline void ChaincodeID::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeID.name)
}
inline void ChaincodeID::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeID.name)
}
inline std::string* ChaincodeID::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChaincodeID::release_name() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeID.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeID::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeID.name)
}
inline std::string* ChaincodeID::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.ChaincodeID.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChaincodeID::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeID.name)
}

// string version = 3;
inline void ChaincodeID::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChaincodeID::version() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeID.version)
  return _internal_version();
}
inline void ChaincodeID::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeID.version)
}
inline std::string* ChaincodeID::mutable_version() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeID.version)
  return _internal_mutable_version();
}
inline const std::string& ChaincodeID::_internal_version() const {
  return version_.Get();
}
inline void ChaincodeID::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChaincodeID::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeID.version)
}
inline void ChaincodeID::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeID.version)
}
inline void ChaincodeID::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeID.version)
}
inline std::string* ChaincodeID::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChaincodeID::release_version() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeID.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeID::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeID.version)
}
inline std::string* ChaincodeID::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.ChaincodeID.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChaincodeID::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeID.version)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChaincodeInput

// repeated bytes args = 1;
inline int ChaincodeInput::_internal_args_size() const {
  return args_.size();
}
inline int ChaincodeInput::args_size() const {
  return _internal_args_size();
}
inline void ChaincodeInput::clear_args() {
  args_.Clear();
}
inline std::string* ChaincodeInput::add_args() {
  // @@protoc_insertion_point(field_add_mutable:protos.ChaincodeInput.args)
  return _internal_add_args();
}
inline const std::string& ChaincodeInput::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& ChaincodeInput::args(int index) const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeInput.args)
  return _internal_args(index);
}
inline std::string* ChaincodeInput::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeInput.args)
  return args_.Mutable(index);
}
inline void ChaincodeInput::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protos.ChaincodeInput.args)
  args_.Mutable(index)->assign(value);
}
inline void ChaincodeInput::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protos.ChaincodeInput.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void ChaincodeInput::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeInput.args)
}
inline void ChaincodeInput::set_args(int index, const void* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeInput.args)
}
inline std::string* ChaincodeInput::_internal_add_args() {
  return args_.Add();
}
inline void ChaincodeInput::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.ChaincodeInput.args)
}
inline void ChaincodeInput::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.ChaincodeInput.args)
}
inline void ChaincodeInput::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.ChaincodeInput.args)
}
inline void ChaincodeInput::add_args(const void* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.ChaincodeInput.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChaincodeInput::args() const {
  // @@protoc_insertion_point(field_list:protos.ChaincodeInput.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChaincodeInput::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:protos.ChaincodeInput.args)
  return &args_;
}

// map<string, bytes> decorations = 2;
inline int ChaincodeInput::_internal_decorations_size() const {
  return decorations_.size();
}
inline int ChaincodeInput::decorations_size() const {
  return _internal_decorations_size();
}
inline void ChaincodeInput::clear_decorations() {
  decorations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ChaincodeInput::_internal_decorations() const {
  return decorations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ChaincodeInput::decorations() const {
  // @@protoc_insertion_point(field_map:protos.ChaincodeInput.decorations)
  return _internal_decorations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ChaincodeInput::_internal_mutable_decorations() {
  return decorations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ChaincodeInput::mutable_decorations() {
  // @@protoc_insertion_point(field_mutable_map:protos.ChaincodeInput.decorations)
  return _internal_mutable_decorations();
}

// -------------------------------------------------------------------

// ChaincodeSpec

// .protos.ChaincodeSpec.Type type = 1;
inline void ChaincodeSpec::clear_type() {
  type_ = 0;
}
inline ::protos::ChaincodeSpec_Type ChaincodeSpec::_internal_type() const {
  return static_cast< ::protos::ChaincodeSpec_Type >(type_);
}
inline ::protos::ChaincodeSpec_Type ChaincodeSpec::type() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeSpec.type)
  return _internal_type();
}
inline void ChaincodeSpec::_internal_set_type(::protos::ChaincodeSpec_Type value) {
  
  type_ = value;
}
inline void ChaincodeSpec::set_type(::protos::ChaincodeSpec_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeSpec.type)
}

// .protos.ChaincodeID chaincode_id = 2;
inline bool ChaincodeSpec::_internal_has_chaincode_id() const {
  return this != internal_default_instance() && chaincode_id_ != nullptr;
}
inline bool ChaincodeSpec::has_chaincode_id() const {
  return _internal_has_chaincode_id();
}
inline void ChaincodeSpec::clear_chaincode_id() {
  if (GetArena() == nullptr && chaincode_id_ != nullptr) {
    delete chaincode_id_;
  }
  chaincode_id_ = nullptr;
}
inline const ::protos::ChaincodeID& ChaincodeSpec::_internal_chaincode_id() const {
  const ::protos::ChaincodeID* p = chaincode_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::ChaincodeID*>(
      &::protos::_ChaincodeID_default_instance_);
}
inline const ::protos::ChaincodeID& ChaincodeSpec::chaincode_id() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeSpec.chaincode_id)
  return _internal_chaincode_id();
}
inline void ChaincodeSpec::unsafe_arena_set_allocated_chaincode_id(
    ::protos::ChaincodeID* chaincode_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chaincode_id_);
  }
  chaincode_id_ = chaincode_id;
  if (chaincode_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeSpec.chaincode_id)
}
inline ::protos::ChaincodeID* ChaincodeSpec::release_chaincode_id() {
  auto temp = unsafe_arena_release_chaincode_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::ChaincodeID* ChaincodeSpec::unsafe_arena_release_chaincode_id() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeSpec.chaincode_id)
  
  ::protos::ChaincodeID* temp = chaincode_id_;
  chaincode_id_ = nullptr;
  return temp;
}
inline ::protos::ChaincodeID* ChaincodeSpec::_internal_mutable_chaincode_id() {
  
  if (chaincode_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::ChaincodeID>(GetArena());
    chaincode_id_ = p;
  }
  return chaincode_id_;
}
inline ::protos::ChaincodeID* ChaincodeSpec::mutable_chaincode_id() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeSpec.chaincode_id)
  return _internal_mutable_chaincode_id();
}
inline void ChaincodeSpec::set_allocated_chaincode_id(::protos::ChaincodeID* chaincode_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chaincode_id_;
  }
  if (chaincode_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chaincode_id);
    if (message_arena != submessage_arena) {
      chaincode_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chaincode_id, submessage_arena);
    }
    
  } else {
    
  }
  chaincode_id_ = chaincode_id;
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeSpec.chaincode_id)
}

// .protos.ChaincodeInput input = 3;
inline bool ChaincodeSpec::_internal_has_input() const {
  return this != internal_default_instance() && input_ != nullptr;
}
inline bool ChaincodeSpec::has_input() const {
  return _internal_has_input();
}
inline void ChaincodeSpec::clear_input() {
  if (GetArena() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
inline const ::protos::ChaincodeInput& ChaincodeSpec::_internal_input() const {
  const ::protos::ChaincodeInput* p = input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::ChaincodeInput*>(
      &::protos::_ChaincodeInput_default_instance_);
}
inline const ::protos::ChaincodeInput& ChaincodeSpec::input() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeSpec.input)
  return _internal_input();
}
inline void ChaincodeSpec::unsafe_arena_set_allocated_input(
    ::protos::ChaincodeInput* input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_);
  }
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeSpec.input)
}
inline ::protos::ChaincodeInput* ChaincodeSpec::release_input() {
  auto temp = unsafe_arena_release_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::ChaincodeInput* ChaincodeSpec::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeSpec.input)
  
  ::protos::ChaincodeInput* temp = input_;
  input_ = nullptr;
  return temp;
}
inline ::protos::ChaincodeInput* ChaincodeSpec::_internal_mutable_input() {
  
  if (input_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::ChaincodeInput>(GetArena());
    input_ = p;
  }
  return input_;
}
inline ::protos::ChaincodeInput* ChaincodeSpec::mutable_input() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeSpec.input)
  return _internal_mutable_input();
}
inline void ChaincodeSpec::set_allocated_input(::protos::ChaincodeInput* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeSpec.input)
}

// int32 timeout = 4;
inline void ChaincodeSpec::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChaincodeSpec::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChaincodeSpec::timeout() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeSpec.timeout)
  return _internal_timeout();
}
inline void ChaincodeSpec::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
}
inline void ChaincodeSpec::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeSpec.timeout)
}

// -------------------------------------------------------------------

// ChaincodeDeploymentSpec

// .protos.ChaincodeSpec chaincode_spec = 1;
inline bool ChaincodeDeploymentSpec::_internal_has_chaincode_spec() const {
  return this != internal_default_instance() && chaincode_spec_ != nullptr;
}
inline bool ChaincodeDeploymentSpec::has_chaincode_spec() const {
  return _internal_has_chaincode_spec();
}
inline void ChaincodeDeploymentSpec::clear_chaincode_spec() {
  if (GetArena() == nullptr && chaincode_spec_ != nullptr) {
    delete chaincode_spec_;
  }
  chaincode_spec_ = nullptr;
}
inline const ::protos::ChaincodeSpec& ChaincodeDeploymentSpec::_internal_chaincode_spec() const {
  const ::protos::ChaincodeSpec* p = chaincode_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::ChaincodeSpec*>(
      &::protos::_ChaincodeSpec_default_instance_);
}
inline const ::protos::ChaincodeSpec& ChaincodeDeploymentSpec::chaincode_spec() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeDeploymentSpec.chaincode_spec)
  return _internal_chaincode_spec();
}
inline void ChaincodeDeploymentSpec::unsafe_arena_set_allocated_chaincode_spec(
    ::protos::ChaincodeSpec* chaincode_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chaincode_spec_);
  }
  chaincode_spec_ = chaincode_spec;
  if (chaincode_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeDeploymentSpec.chaincode_spec)
}
inline ::protos::ChaincodeSpec* ChaincodeDeploymentSpec::release_chaincode_spec() {
  auto temp = unsafe_arena_release_chaincode_spec();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::ChaincodeSpec* ChaincodeDeploymentSpec::unsafe_arena_release_chaincode_spec() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeDeploymentSpec.chaincode_spec)
  
  ::protos::ChaincodeSpec* temp = chaincode_spec_;
  chaincode_spec_ = nullptr;
  return temp;
}
inline ::protos::ChaincodeSpec* ChaincodeDeploymentSpec::_internal_mutable_chaincode_spec() {
  
  if (chaincode_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::ChaincodeSpec>(GetArena());
    chaincode_spec_ = p;
  }
  return chaincode_spec_;
}
inline ::protos::ChaincodeSpec* ChaincodeDeploymentSpec::mutable_chaincode_spec() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeDeploymentSpec.chaincode_spec)
  return _internal_mutable_chaincode_spec();
}
inline void ChaincodeDeploymentSpec::set_allocated_chaincode_spec(::protos::ChaincodeSpec* chaincode_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chaincode_spec_;
  }
  if (chaincode_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chaincode_spec);
    if (message_arena != submessage_arena) {
      chaincode_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chaincode_spec, submessage_arena);
    }
    
  } else {
    
  }
  chaincode_spec_ = chaincode_spec;
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeDeploymentSpec.chaincode_spec)
}

// bytes code_package = 3;
inline void ChaincodeDeploymentSpec::clear_code_package() {
  code_package_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChaincodeDeploymentSpec::code_package() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeDeploymentSpec.code_package)
  return _internal_code_package();
}
inline void ChaincodeDeploymentSpec::set_code_package(const std::string& value) {
  _internal_set_code_package(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeDeploymentSpec.code_package)
}
inline std::string* ChaincodeDeploymentSpec::mutable_code_package() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeDeploymentSpec.code_package)
  return _internal_mutable_code_package();
}
inline const std::string& ChaincodeDeploymentSpec::_internal_code_package() const {
  return code_package_.Get();
}
inline void ChaincodeDeploymentSpec::_internal_set_code_package(const std::string& value) {
  
  code_package_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChaincodeDeploymentSpec::set_code_package(std::string&& value) {
  
  code_package_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ChaincodeDeploymentSpec.code_package)
}
inline void ChaincodeDeploymentSpec::set_code_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_package_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ChaincodeDeploymentSpec.code_package)
}
inline void ChaincodeDeploymentSpec::set_code_package(const void* value,
    size_t size) {
  
  code_package_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ChaincodeDeploymentSpec.code_package)
}
inline std::string* ChaincodeDeploymentSpec::_internal_mutable_code_package() {
  
  return code_package_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChaincodeDeploymentSpec::release_code_package() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeDeploymentSpec.code_package)
  return code_package_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChaincodeDeploymentSpec::set_allocated_code_package(std::string* code_package) {
  if (code_package != nullptr) {
    
  } else {
    
  }
  code_package_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code_package,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeDeploymentSpec.code_package)
}
inline std::string* ChaincodeDeploymentSpec::unsafe_arena_release_code_package() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.ChaincodeDeploymentSpec.code_package)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return code_package_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChaincodeDeploymentSpec::unsafe_arena_set_allocated_code_package(
    std::string* code_package) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (code_package != nullptr) {
    
  } else {
    
  }
  code_package_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      code_package, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeDeploymentSpec.code_package)
}

// .protos.ChaincodeDeploymentSpec.ExecutionEnvironment exec_env = 4;
inline void ChaincodeDeploymentSpec::clear_exec_env() {
  exec_env_ = 0;
}
inline ::protos::ChaincodeDeploymentSpec_ExecutionEnvironment ChaincodeDeploymentSpec::_internal_exec_env() const {
  return static_cast< ::protos::ChaincodeDeploymentSpec_ExecutionEnvironment >(exec_env_);
}
inline ::protos::ChaincodeDeploymentSpec_ExecutionEnvironment ChaincodeDeploymentSpec::exec_env() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeDeploymentSpec.exec_env)
  return _internal_exec_env();
}
inline void ChaincodeDeploymentSpec::_internal_set_exec_env(::protos::ChaincodeDeploymentSpec_ExecutionEnvironment value) {
  
  exec_env_ = value;
}
inline void ChaincodeDeploymentSpec::set_exec_env(::protos::ChaincodeDeploymentSpec_ExecutionEnvironment value) {
  _internal_set_exec_env(value);
  // @@protoc_insertion_point(field_set:protos.ChaincodeDeploymentSpec.exec_env)
}

// -------------------------------------------------------------------

// ChaincodeInvocationSpec

// .protos.ChaincodeSpec chaincode_spec = 1;
inline bool ChaincodeInvocationSpec::_internal_has_chaincode_spec() const {
  return this != internal_default_instance() && chaincode_spec_ != nullptr;
}
inline bool ChaincodeInvocationSpec::has_chaincode_spec() const {
  return _internal_has_chaincode_spec();
}
inline void ChaincodeInvocationSpec::clear_chaincode_spec() {
  if (GetArena() == nullptr && chaincode_spec_ != nullptr) {
    delete chaincode_spec_;
  }
  chaincode_spec_ = nullptr;
}
inline const ::protos::ChaincodeSpec& ChaincodeInvocationSpec::_internal_chaincode_spec() const {
  const ::protos::ChaincodeSpec* p = chaincode_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::ChaincodeSpec*>(
      &::protos::_ChaincodeSpec_default_instance_);
}
inline const ::protos::ChaincodeSpec& ChaincodeInvocationSpec::chaincode_spec() const {
  // @@protoc_insertion_point(field_get:protos.ChaincodeInvocationSpec.chaincode_spec)
  return _internal_chaincode_spec();
}
inline void ChaincodeInvocationSpec::unsafe_arena_set_allocated_chaincode_spec(
    ::protos::ChaincodeSpec* chaincode_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chaincode_spec_);
  }
  chaincode_spec_ = chaincode_spec;
  if (chaincode_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ChaincodeInvocationSpec.chaincode_spec)
}
inline ::protos::ChaincodeSpec* ChaincodeInvocationSpec::release_chaincode_spec() {
  auto temp = unsafe_arena_release_chaincode_spec();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::ChaincodeSpec* ChaincodeInvocationSpec::unsafe_arena_release_chaincode_spec() {
  // @@protoc_insertion_point(field_release:protos.ChaincodeInvocationSpec.chaincode_spec)
  
  ::protos::ChaincodeSpec* temp = chaincode_spec_;
  chaincode_spec_ = nullptr;
  return temp;
}
inline ::protos::ChaincodeSpec* ChaincodeInvocationSpec::_internal_mutable_chaincode_spec() {
  
  if (chaincode_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::ChaincodeSpec>(GetArena());
    chaincode_spec_ = p;
  }
  return chaincode_spec_;
}
inline ::protos::ChaincodeSpec* ChaincodeInvocationSpec::mutable_chaincode_spec() {
  // @@protoc_insertion_point(field_mutable:protos.ChaincodeInvocationSpec.chaincode_spec)
  return _internal_mutable_chaincode_spec();
}
inline void ChaincodeInvocationSpec::set_allocated_chaincode_spec(::protos::ChaincodeSpec* chaincode_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete chaincode_spec_;
  }
  if (chaincode_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chaincode_spec);
    if (message_arena != submessage_arena) {
      chaincode_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chaincode_spec, submessage_arena);
    }
    
  } else {
    
  }
  chaincode_spec_ = chaincode_spec;
  // @@protoc_insertion_point(field_set_allocated:protos.ChaincodeInvocationSpec.chaincode_spec)
}

// -------------------------------------------------------------------

// LifecycleEvent

// string chaincode_name = 1;
inline void LifecycleEvent::clear_chaincode_name() {
  chaincode_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LifecycleEvent::chaincode_name() const {
  // @@protoc_insertion_point(field_get:protos.LifecycleEvent.chaincode_name)
  return _internal_chaincode_name();
}
inline void LifecycleEvent::set_chaincode_name(const std::string& value) {
  _internal_set_chaincode_name(value);
  // @@protoc_insertion_point(field_set:protos.LifecycleEvent.chaincode_name)
}
inline std::string* LifecycleEvent::mutable_chaincode_name() {
  // @@protoc_insertion_point(field_mutable:protos.LifecycleEvent.chaincode_name)
  return _internal_mutable_chaincode_name();
}
inline const std::string& LifecycleEvent::_internal_chaincode_name() const {
  return chaincode_name_.Get();
}
inline void LifecycleEvent::_internal_set_chaincode_name(const std::string& value) {
  
  chaincode_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LifecycleEvent::set_chaincode_name(std::string&& value) {
  
  chaincode_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.LifecycleEvent.chaincode_name)
}
inline void LifecycleEvent::set_chaincode_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chaincode_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.LifecycleEvent.chaincode_name)
}
inline void LifecycleEvent::set_chaincode_name(const char* value,
    size_t size) {
  
  chaincode_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.LifecycleEvent.chaincode_name)
}
inline std::string* LifecycleEvent::_internal_mutable_chaincode_name() {
  
  return chaincode_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LifecycleEvent::release_chaincode_name() {
  // @@protoc_insertion_point(field_release:protos.LifecycleEvent.chaincode_name)
  return chaincode_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LifecycleEvent::set_allocated_chaincode_name(std::string* chaincode_name) {
  if (chaincode_name != nullptr) {
    
  } else {
    
  }
  chaincode_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chaincode_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.LifecycleEvent.chaincode_name)
}
inline std::string* LifecycleEvent::unsafe_arena_release_chaincode_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.LifecycleEvent.chaincode_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return chaincode_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LifecycleEvent::unsafe_arena_set_allocated_chaincode_name(
    std::string* chaincode_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (chaincode_name != nullptr) {
    
  } else {
    
  }
  chaincode_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      chaincode_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.LifecycleEvent.chaincode_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protos::ChaincodeSpec_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::ChaincodeSpec_Type>() {
  return ::protos::ChaincodeSpec_Type_descriptor();
}
template <> struct is_proto_enum< ::protos::ChaincodeDeploymentSpec_ExecutionEnvironment> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::ChaincodeDeploymentSpec_ExecutionEnvironment>() {
  return ::protos::ChaincodeDeploymentSpec_ExecutionEnvironment_descriptor();
}
template <> struct is_proto_enum< ::protos::ConfidentialityLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::ConfidentialityLevel>() {
  return ::protos::ConfidentialityLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_peer_2fchaincode_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer/proposal_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_peer_2fproposal_5fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_peer_2fproposal_5fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_peer_2fproposal_5fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_peer_2fproposal_5fresponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_peer_2fproposal_5fresponse_2eproto;
namespace protos {
class Endorsement;
class EndorsementDefaultTypeInternal;
extern EndorsementDefaultTypeInternal _Endorsement_default_instance_;
class ProposalResponse;
class ProposalResponseDefaultTypeInternal;
extern ProposalResponseDefaultTypeInternal _ProposalResponse_default_instance_;
class ProposalResponsePayload;
class ProposalResponsePayloadDefaultTypeInternal;
extern ProposalResponsePayloadDefaultTypeInternal _ProposalResponsePayload_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::Endorsement* Arena::CreateMaybeMessage<::protos::Endorsement>(Arena*);
template<> ::protos::ProposalResponse* Arena::CreateMaybeMessage<::protos::ProposalResponse>(Arena*);
template<> ::protos::ProposalResponsePayload* Arena::CreateMaybeMessage<::protos::ProposalResponsePayload>(Arena*);
template<> ::protos::Response* Arena::CreateMaybeMessage<::protos::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

// ===================================================================

class ProposalResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ProposalResponse) */ {
 public:
  inline ProposalResponse() : ProposalResponse(nullptr) {};
  virtual ~ProposalResponse();

  ProposalResponse(const ProposalResponse& from);
  ProposalResponse(ProposalResponse&& from) noexcept
    : ProposalResponse() {
    *this = ::std::move(from);
  }

  inline ProposalResponse& operator=(const ProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalResponse& operator=(ProposalResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposalResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposalResponse* internal_default_instance() {
    return reinterpret_cast<const ProposalResponse*>(
               &_ProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProposalResponse& a, ProposalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposalResponse* New() const final {
    return CreateMaybeMessage<ProposalResponse>(nullptr);
  }

  ProposalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposalResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposalResponse& from);
  void MergeFrom(const ProposalResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ProposalResponse";
  }
  protected:
  explicit ProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_5fresponse_2eproto);
    return ::descriptor_table_peer_2fproposal_5fresponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 5,
    kTimestampFieldNumber = 2,
    kResponseFieldNumber = 4,
    kEndorsementFieldNumber = 6,
    kVersionFieldNumber = 1,
  };
  // bytes payload = 5;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .protos.Response response = 4;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::protos::Response& response() const;
  ::protos::Response* release_response();
  ::protos::Response* mutable_response();
  void set_allocated_response(::protos::Response* response);
  private:
  const ::protos::Response& _internal_response() const;
  ::protos::Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::protos::Response* response);
  ::protos::Response* unsafe_arena_release_response();

  // .protos.Endorsement endorsement = 6;
  bool has_endorsement() const;
  private:
  bool _internal_has_endorsement() const;
  public:
  void clear_endorsement();
  const ::protos::Endorsement& endorsement() const;
  ::protos::Endorsement* release_endorsement();
  ::protos::Endorsement* mutable_endorsement();
  void set_allocated_endorsement(::protos::Endorsement* endorsement);
  private:
  const ::protos::Endorsement& _internal_endorsement() const;
  ::protos::Endorsement* _internal_mutable_endorsement();
  public:
  void unsafe_arena_set_allocated_endorsement(
      ::protos::Endorsement* endorsement);
  ::protos::Endorsement* unsafe_arena_release_endorsement();

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.ProposalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::protos::Response* response_;
  ::protos::Endorsement* endorsement_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fproposal_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_5fresponse_2eproto);
    return ::descriptor_table_peer_2fproposal_5fresponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protos.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fproposal_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class ProposalResponsePayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.ProposalResponsePayload) */ {
 public:
  inline ProposalResponsePayload() : ProposalResponsePayload(nullptr) {};
  virtual ~ProposalResponsePayload();

  ProposalResponsePayload(const ProposalResponsePayload& from);
  ProposalResponsePayload(ProposalResponsePayload&& from) noexcept
    : ProposalResponsePayload() {
    *this = ::std::move(from);
  }

  inline ProposalResponsePayload& operator=(const ProposalResponsePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalResponsePayload& operator=(ProposalResponsePayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProposalResponsePayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProposalResponsePayload* internal_default_instance() {
    return reinterpret_cast<const ProposalResponsePayload*>(
               &_ProposalResponsePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProposalResponsePayload& a, ProposalResponsePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalResponsePayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalResponsePayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProposalResponsePayload* New() const final {
    return CreateMaybeMessage<ProposalResponsePayload>(nullptr);
  }

  ProposalResponsePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProposalResponsePayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProposalResponsePayload& from);
  void MergeFrom(const ProposalResponsePayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalResponsePayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.ProposalResponsePayload";
  }
  protected:
  explicit ProposalResponsePayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_5fresponse_2eproto);
    return ::descriptor_table_peer_2fproposal_5fresponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalHashFieldNumber = 1,
    kExtensionFieldNumber = 2,
  };
  // bytes proposal_hash = 1;
  void clear_proposal_hash();
  const std::string& proposal_hash() const;
  void set_proposal_hash(const std::string& value);
  void set_proposal_hash(std::string&& value);
  void set_proposal_hash(const char* value);
  void set_proposal_hash(const void* value, size_t size);
  std::string* mutable_proposal_hash();
  std::string* release_proposal_hash();
  void set_allocated_proposal_hash(std::string* proposal_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proposal_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proposal_hash(
      std::string* proposal_hash);
  private:
  const std::string& _internal_proposal_hash() const;
  void _internal_set_proposal_hash(const std::string& value);
  std::string* _internal_mutable_proposal_hash();
  public:

  // bytes extension = 2;
  void clear_extension();
  const std::string& extension() const;
  void set_extension(const std::string& value);
  void set_extension(std::string&& value);
  void set_extension(const char* value);
  void set_extension(const void* value, size_t size);
  std::string* mutable_extension();
  std::string* release_extension();
  void set_allocated_extension(std::string* extension);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_extension();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_extension(
      std::string* extension);
  private:
  const std::string& _internal_extension() const;
  void _internal_set_extension(const std::string& value);
  std::string* _internal_mutable_extension();
  public:

  // @@protoc_insertion_point(class_scope:protos.ProposalResponsePayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fproposal_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class Endorsement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.Endorsement) */ {
 public:
  inline Endorsement() : Endorsement(nullptr) {};
  virtual ~Endorsement();

  Endorsement(const Endorsement& from);
  Endorsement(Endorsement&& from) noexcept
    : Endorsement() {
    *this = ::std::move(from);
  }

  inline Endorsement& operator=(const Endorsement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Endorsement& operator=(Endorsement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Endorsement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Endorsement* internal_default_instance() {
    return reinterpret_cast<const Endorsement*>(
               &_Endorsement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Endorsement& a, Endorsement& b) {
    a.Swap(&b);
  }
  inline void Swap(Endorsement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Endorsement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Endorsement* New() const final {
    return CreateMaybeMessage<Endorsement>(nullptr);
  }

  Endorsement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Endorsement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Endorsement& from);
  void MergeFrom(const Endorsement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endorsement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.Endorsement";
  }
  protected:
  explicit Endorsement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_peer_2fproposal_5fresponse_2eproto);
    return ::descriptor_table_peer_2fproposal_5fresponse_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndorserFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes endorser = 1;
  void clear_endorser();
  const std::string& endorser() const;
  void set_endorser(const std::string& value);
  void set_endorser(std::string&& value);
  void set_endorser(const char* value);
  void set_endorser(const void* value, size_t size);
  std::string* mutable_endorser();
  std::string* release_endorser();
  void set_allocated_endorser(std::string* endorser);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endorser();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endorser(
      std::string* endorser);
  private:
  const std::string& _internal_endorser() const;
  void _internal_set_endorser(const std::string& value);
  std::string* _internal_mutable_endorser();
  public:

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:protos.Endorsement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endorser_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_2fproposal_5fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProposalResponse

// int32 version = 1;
inline void ProposalResponse::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposalResponse::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProposalResponse::version() const {
  // @@protoc_insertion_point(field_get:protos.ProposalResponse.version)
  return _internal_version();
}
inline void ProposalResponse::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void ProposalResponse::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:protos.ProposalResponse.version)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool ProposalResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool ProposalResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ProposalResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ProposalResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:protos.ProposalResponse.timestamp)
  return _internal_timestamp();
}
inline void ProposalResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ProposalResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ProposalResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ProposalResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:protos.ProposalResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ProposalResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ProposalResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:protos.ProposalResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void ProposalResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:protos.ProposalResponse.timestamp)
}

// .protos.Response response = 4;
inline bool ProposalResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool ProposalResponse::has_response() const {
  return _internal_has_response();
}
inline void ProposalResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::protos::Response& ProposalResponse::_internal_response() const {
  const ::protos::Response* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::Response*>(
      &::protos::_Response_default_instance_);
}
inline const ::protos::Response& ProposalResponse::response() const {
  // @@protoc_insertion_point(field_get:protos.ProposalResponse.response)
  return _internal_response();
}
inline void ProposalResponse::unsafe_arena_set_allocated_response(
    ::protos::Response* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ProposalResponse.response)
}
inline ::protos::Response* ProposalResponse::release_response() {
  auto temp = unsafe_arena_release_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::Response* ProposalResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:protos.ProposalResponse.response)
  
  ::protos::Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::protos::Response* ProposalResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::Response>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::protos::Response* ProposalResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:protos.ProposalResponse.response)
  return _internal_mutable_response();
}
inline void ProposalResponse::set_allocated_response(::protos::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:protos.ProposalResponse.response)
}

// bytes payload = 5;
inline void ProposalResponse::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProposalResponse::payload() const {
  // @@protoc_insertion_point(field_get:protos.ProposalResponse.payload)
  return _internal_payload();
}
inline void ProposalResponse::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:protos.ProposalResponse.payload)
}
inline std::string* ProposalResponse::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:protos.ProposalResponse.payload)
  return _internal_mutable_payload();
}
inline const std::string& ProposalResponse::_internal_payload() const {
  return payload_.Get();
}
inline void ProposalResponse::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposalResponse::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ProposalResponse.payload)
}
inline void ProposalResponse::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ProposalResponse.payload)
}
inline void ProposalResponse::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ProposalResponse.payload)
}
inline std::string* ProposalResponse::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposalResponse::release_payload() {
  // @@protoc_insertion_point(field_release:protos.ProposalResponse.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposalResponse::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ProposalResponse.payload)
}
inline std::string* ProposalResponse::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.ProposalResponse.payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProposalResponse::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ProposalResponse.payload)
}

// .protos.Endorsement endorsement = 6;
inline bool ProposalResponse::_internal_has_endorsement() const {
  return this != internal_default_instance() && endorsement_ != nullptr;
}
inline bool ProposalResponse::has_endorsement() const {
  return _internal_has_endorsement();
}
inline void ProposalResponse::clear_endorsement() {
  if (GetArena() == nullptr && endorsement_ != nullptr) {
    delete endorsement_;
  }
  endorsement_ = nullptr;
}
inline const ::protos::Endorsement& ProposalResponse::_internal_endorsement() const {
  const ::protos::Endorsement* p = endorsement_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::Endorsement*>(
      &::protos::_Endorsement_default_instance_);
}
inline const ::protos::Endorsement& ProposalResponse::endorsement() const {
  // @@protoc_insertion_point(field_get:protos.ProposalResponse.endorsement)
  return _internal_endorsement();
}
inline void ProposalResponse::unsafe_arena_set_allocated_endorsement(
    ::protos::Endorsement* endorsement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endorsement_);
  }
  endorsement_ = endorsement;
  if (endorsement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ProposalResponse.endorsement)
}
inline ::protos::Endorsement* ProposalResponse::release_endorsement() {
  auto temp = unsafe_arena_release_endorsement();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protos::Endorsement* ProposalResponse::unsafe_arena_release_endorsement() {
  // @@protoc_insertion_point(field_release:protos.ProposalResponse.endorsement)
  
  ::protos::Endorsement* temp = endorsement_;
  endorsement_ = nullptr;
  return temp;
}
inline ::protos::Endorsement* ProposalResponse::_internal_mutable_endorsement() {
  
  if (endorsement_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::Endorsement>(GetArena());
    endorsement_ = p;
  }
  return endorsement_;
}
inline ::protos::Endorsement* ProposalResponse::mutable_endorsement() {
  // @@protoc_insertion_point(field_mutable:protos.ProposalResponse.endorsement)
  return _internal_mutable_endorsement();
}
inline void ProposalResponse::set_allocated_endorsement(::protos::Endorsement* endorsement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete endorsement_;
  }
  if (endorsement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(endorsement);
    if (message_arena != submessage_arena) {
      endorsement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endorsement, submessage_arena);
    }
    
  } else {
    
  }
  endorsement_ = endorsement;
  // @@protoc_insertion_point(field_set_allocated:protos.ProposalResponse.endorsement)
}

// -------------------------------------------------------------------

// Response

// int32 status = 1;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::status() const {
  // @@protoc_insertion_point(field_get:protos.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void Response::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:protos.Response.status)
}

// string message = 2;
inline void Response::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:protos.Response.message)
  return _internal_message();
}
inline void Response::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:protos.Response.message)
}
inline std::string* Response::mutable_message() {
  // @@protoc_insertion_point(field_mutable:protos.Response.message)
  return _internal_mutable_message();
}
inline const std::string& Response::_internal_message() const {
  return message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.Response.message)
}
inline void Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.Response.message)
}
inline void Response::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.Response.message)
}
inline std::string* Response::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:protos.Response.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.Response.message)
}
inline std::string* Response::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.Response.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Response.message)
}

// bytes payload = 3;
inline void Response::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::payload() const {
  // @@protoc_insertion_point(field_get:protos.Response.payload)
  return _internal_payload();
}
inline void Response::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:protos.Response.payload)
}
inline std::string* Response::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:protos.Response.payload)
  return _internal_mutable_payload();
}
inline const std::string& Response::_internal_payload() const {
  return payload_.Get();
}
inline void Response::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.Response.payload)
}
inline void Response::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.Response.payload)
}
inline void Response::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.Response.payload)
}
inline std::string* Response::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_payload() {
  // @@protoc_insertion_point(field_release:protos.Response.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.Response.payload)
}
inline std::string* Response::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.Response.payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Response.payload)
}

// -------------------------------------------------------------------

// ProposalResponsePayload

// bytes proposal_hash = 1;
inline void ProposalResponsePayload::clear_proposal_hash() {
  proposal_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProposalResponsePayload::proposal_hash() const {
  // @@protoc_insertion_point(field_get:protos.ProposalResponsePayload.proposal_hash)
  return _internal_proposal_hash();
}
inline void ProposalResponsePayload::set_proposal_hash(const std::string& value) {
  _internal_set_proposal_hash(value);
  // @@protoc_insertion_point(field_set:protos.ProposalResponsePayload.proposal_hash)
}
inline std::string* ProposalResponsePayload::mutable_proposal_hash() {
  // @@protoc_insertion_point(field_mutable:protos.ProposalResponsePayload.proposal_hash)
  return _internal_mutable_proposal_hash();
}
inline const std::string& ProposalResponsePayload::_internal_proposal_hash() const {
  return proposal_hash_.Get();
}
inline void ProposalResponsePayload::_internal_set_proposal_hash(const std::string& value) {
  
  proposal_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposalResponsePayload::set_proposal_hash(std::string&& value) {
  
  proposal_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ProposalResponsePayload.proposal_hash)
}
inline void ProposalResponsePayload::set_proposal_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposal_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ProposalResponsePayload.proposal_hash)
}
inline void ProposalResponsePayload::set_proposal_hash(const void* value,
    size_t size) {
  
  proposal_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ProposalResponsePayload.proposal_hash)
}
inline std::string* ProposalResponsePayload::_internal_mutable_proposal_hash() {
  
  return proposal_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposalResponsePayload::release_proposal_hash() {
  // @@protoc_insertion_point(field_release:protos.ProposalResponsePayload.proposal_hash)
  return proposal_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposalResponsePayload::set_allocated_proposal_hash(std::string* proposal_hash) {
  if (proposal_hash != nullptr) {
    
  } else {
    
  }
  proposal_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ProposalResponsePayload.proposal_hash)
}
inline std::string* ProposalResponsePayload::unsafe_arena_release_proposal_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.ProposalResponsePayload.proposal_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proposal_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProposalResponsePayload::unsafe_arena_set_allocated_proposal_hash(
    std::string* proposal_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proposal_hash != nullptr) {
    
  } else {
    
  }
  proposal_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proposal_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ProposalResponsePayload.proposal_hash)
}

// bytes extension = 2;
inline void ProposalResponsePayload::clear_extension() {
  extension_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProposalResponsePayload::extension() const {
  // @@protoc_insertion_point(field_get:protos.ProposalResponsePayload.extension)
  return _internal_extension();
}
inline void ProposalResponsePayload::set_extension(const std::string& value) {
  _internal_set_extension(value);
  // @@protoc_insertion_point(field_set:protos.ProposalResponsePayload.extension)
}
inline std::string* ProposalResponsePayload::mutable_extension() {
  // @@protoc_insertion_point(field_mutable:protos.ProposalResponsePayload.extension)
  return _internal_mutable_extension();
}
inline const std::string& ProposalResponsePayload::_internal_extension() const {
  return extension_.Get();
}
inline void ProposalResponsePayload::_internal_set_extension(const std::string& value) {
  
  extension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProposalResponsePayload::set_extension(std::string&& value) {
  
  extension_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.ProposalResponsePayload.extension)
}
inline void ProposalResponsePayload::set_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.ProposalResponsePayload.extension)
}
inline void ProposalResponsePayload::set_extension(const void* value,
    size_t size) {
  
  extension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.ProposalResponsePayload.extension)
}
inline std::string* ProposalResponsePayload::_internal_mutable_extension() {
  
  return extension_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProposalResponsePayload::release_extension() {
  // @@protoc_insertion_point(field_release:protos.ProposalResponsePayload.extension)
  return extension_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProposalResponsePayload::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    
  } else {
    
  }
  extension_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.ProposalResponsePayload.extension)
}
inline std::string* ProposalResponsePayload::unsafe_arena_release_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.ProposalResponsePayload.extension)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return extension_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProposalResponsePayload::unsafe_arena_set_allocated_extension(
    std::string* extension) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (extension != nullptr) {
    
  } else {
    
  }
  extension_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      extension, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.ProposalResponsePayload.extension)
}

// -------------------------------------------------------------------

// Endorsement

// bytes endorser = 1;
inline void Endorsement::clear_endorser() {
  endorser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Endorsement::endorser() const {
  // @@protoc_insertion_point(field_get:protos.Endorsement.endorser)
  return _internal_endorser();
}
inline void Endorsement::set_endorser(const std::string& value) {
  _internal_set_endorser(value);
  // @@protoc_insertion_point(field_set:protos.Endorsement.endorser)
}
inline std::string* Endorsement::mutable_endorser() {
  // @@protoc_insertion_point(field_mutable:protos.Endorsement.endorser)
  return _internal_mutable_endorser();
}
inline const std::string& Endorsement::_internal_endorser() const {
  return endorser_.Get();
}
inline void Endorsement::_internal_set_endorser(const std::string& value) {
  
  endorser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Endorsement::set_endorser(std::string&& value) {
  
  endorser_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.Endorsement.endorser)
}
inline void Endorsement::set_endorser(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endorser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.Endorsement.endorser)
}
inline void Endorsement::set_endorser(const void* value,
    size_t size) {
  
  endorser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.Endorsement.endorser)
}
inline std::string* Endorsement::_internal_mutable_endorser() {
  
  return endorser_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Endorsement::release_endorser() {
  // @@protoc_insertion_point(field_release:protos.Endorsement.endorser)
  return endorser_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Endorsement::set_allocated_endorser(std::string* endorser) {
  if (endorser != nullptr) {
    
  } else {
    
  }
  endorser_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endorser,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.Endorsement.endorser)
}
inline std::string* Endorsement::unsafe_arena_release_endorser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.Endorsement.endorser)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endorser_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Endorsement::unsafe_arena_set_allocated_endorser(
    std::string* endorser) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endorser != nullptr) {
    
  } else {
    
  }
  endorser_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endorser, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Endorsement.endorser)
}

// bytes signature = 2;
inline void Endorsement::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Endorsement::signature() const {
  // @@protoc_insertion_point(field_get:protos.Endorsement.signature)
  return _internal_signature();
}
inline void Endorsement::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:protos.Endorsement.signature)
}
inline std::string* Endorsement::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:protos.Endorsement.signature)
  return _internal_mutable_signature();
}
inline const std::string& Endorsement::_internal_signature() const {
  return signature_.Get();
}
inline void Endorsement::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Endorsement::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protos.Endorsement.signature)
}
inline void Endorsement::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protos.Endorsement.signature)
}
inline void Endorsement::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protos.Endorsement.signature)
}
inline std::string* Endorsement::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Endorsement::release_signature() {
  // @@protoc_insertion_point(field_release:protos.Endorsement.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Endorsement::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protos.Endorsement.signature)
}
inline std::string* Endorsement::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protos.Endorsement.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Endorsement::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Endorsement.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_peer_2fproposal_5fresponse_2eproto

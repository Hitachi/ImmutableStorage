// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: token/transaction.proto

#include "token/transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_token_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputId_token_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_token_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlainApprove_token_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_token_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlainDelegatedOutput_token_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_token_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlainImport_token_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_token_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlainOutput_token_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_token_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PlainTokenAction_token_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_token_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlainTransfer_token_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_token_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlainTransferFrom_token_2ftransaction_2eproto;
class TokenTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenTransaction> _instance;
  const ::PlainTokenAction* plain_action_;
} _TokenTransaction_default_instance_;
class PlainTokenActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlainTokenAction> _instance;
  const ::PlainImport* plain_import_;
  const ::PlainTransfer* plain_transfer_;
  const ::PlainTransfer* plain_redeem_;
  const ::PlainApprove* plain_approve_;
  const ::PlainTransferFrom* plain_transfer_from_;
} _PlainTokenAction_default_instance_;
class PlainImportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlainImport> _instance;
} _PlainImport_default_instance_;
class PlainTransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlainTransfer> _instance;
} _PlainTransfer_default_instance_;
class PlainApproveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlainApprove> _instance;
} _PlainApprove_default_instance_;
class PlainTransferFromDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlainTransferFrom> _instance;
} _PlainTransferFrom_default_instance_;
class PlainOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlainOutput> _instance;
} _PlainOutput_default_instance_;
class InputIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputId> _instance;
} _InputId_default_instance_;
class PlainDelegatedOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlainDelegatedOutput> _instance;
} _PlainDelegatedOutput_default_instance_;
static void InitDefaultsscc_info_InputId_token_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InputId_default_instance_;
    new (ptr) ::InputId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InputId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputId_token_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputId_token_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_PlainApprove_token_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlainApprove_default_instance_;
    new (ptr) ::PlainApprove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlainApprove::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlainApprove_token_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PlainApprove_token_2ftransaction_2eproto}, {
      &scc_info_InputId_token_2ftransaction_2eproto.base,
      &scc_info_PlainDelegatedOutput_token_2ftransaction_2eproto.base,
      &scc_info_PlainOutput_token_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_PlainDelegatedOutput_token_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlainDelegatedOutput_default_instance_;
    new (ptr) ::PlainDelegatedOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlainDelegatedOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlainDelegatedOutput_token_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlainDelegatedOutput_token_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_PlainImport_token_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlainImport_default_instance_;
    new (ptr) ::PlainImport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlainImport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlainImport_token_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlainImport_token_2ftransaction_2eproto}, {
      &scc_info_PlainOutput_token_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_PlainOutput_token_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlainOutput_default_instance_;
    new (ptr) ::PlainOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlainOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlainOutput_token_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlainOutput_token_2ftransaction_2eproto}, {}};

static void InitDefaultsscc_info_PlainTokenAction_token_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlainTokenAction_default_instance_;
    new (ptr) ::PlainTokenAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlainTokenAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PlainTokenAction_token_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PlainTokenAction_token_2ftransaction_2eproto}, {
      &scc_info_PlainImport_token_2ftransaction_2eproto.base,
      &scc_info_PlainTransfer_token_2ftransaction_2eproto.base,
      &scc_info_PlainApprove_token_2ftransaction_2eproto.base,
      &scc_info_PlainTransferFrom_token_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_PlainTransfer_token_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlainTransfer_default_instance_;
    new (ptr) ::PlainTransfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlainTransfer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlainTransfer_token_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlainTransfer_token_2ftransaction_2eproto}, {
      &scc_info_InputId_token_2ftransaction_2eproto.base,
      &scc_info_PlainOutput_token_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_PlainTransferFrom_token_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlainTransferFrom_default_instance_;
    new (ptr) ::PlainTransferFrom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlainTransferFrom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlainTransferFrom_token_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PlainTransferFrom_token_2ftransaction_2eproto}, {
      &scc_info_InputId_token_2ftransaction_2eproto.base,
      &scc_info_PlainOutput_token_2ftransaction_2eproto.base,
      &scc_info_PlainDelegatedOutput_token_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_TokenTransaction_token_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TokenTransaction_default_instance_;
    new (ptr) ::TokenTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TokenTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TokenTransaction_token_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TokenTransaction_token_2ftransaction_2eproto}, {
      &scc_info_PlainTokenAction_token_2ftransaction_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_token_2ftransaction_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_token_2ftransaction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_token_2ftransaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_token_2ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TokenTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TokenTransaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::TokenTransactionDefaultTypeInternal, plain_action_),
  PROTOBUF_FIELD_OFFSET(::TokenTransaction, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlainTokenAction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PlainTokenAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::PlainTokenActionDefaultTypeInternal, plain_import_),
  offsetof(::PlainTokenActionDefaultTypeInternal, plain_transfer_),
  offsetof(::PlainTokenActionDefaultTypeInternal, plain_redeem_),
  offsetof(::PlainTokenActionDefaultTypeInternal, plain_approve_),
  offsetof(::PlainTokenActionDefaultTypeInternal, plain_transfer_from_),
  PROTOBUF_FIELD_OFFSET(::PlainTokenAction, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlainImport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlainImport, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlainTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlainTransfer, inputs_),
  PROTOBUF_FIELD_OFFSET(::PlainTransfer, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlainApprove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlainApprove, inputs_),
  PROTOBUF_FIELD_OFFSET(::PlainApprove, delegated_outputs_),
  PROTOBUF_FIELD_OFFSET(::PlainApprove, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlainTransferFrom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlainTransferFrom, inputs_),
  PROTOBUF_FIELD_OFFSET(::PlainTransferFrom, outputs_),
  PROTOBUF_FIELD_OFFSET(::PlainTransferFrom, delegated_output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlainOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlainOutput, owner_),
  PROTOBUF_FIELD_OFFSET(::PlainOutput, type_),
  PROTOBUF_FIELD_OFFSET(::PlainOutput, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InputId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InputId, tx_id_),
  PROTOBUF_FIELD_OFFSET(::InputId, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlainDelegatedOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlainDelegatedOutput, owner_),
  PROTOBUF_FIELD_OFFSET(::PlainDelegatedOutput, delegatees_),
  PROTOBUF_FIELD_OFFSET(::PlainDelegatedOutput, type_),
  PROTOBUF_FIELD_OFFSET(::PlainDelegatedOutput, quantity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TokenTransaction)},
  { 7, -1, sizeof(::PlainTokenAction)},
  { 18, -1, sizeof(::PlainImport)},
  { 24, -1, sizeof(::PlainTransfer)},
  { 31, -1, sizeof(::PlainApprove)},
  { 39, -1, sizeof(::PlainTransferFrom)},
  { 47, -1, sizeof(::PlainOutput)},
  { 55, -1, sizeof(::InputId)},
  { 62, -1, sizeof(::PlainDelegatedOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TokenTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlainTokenAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlainImport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlainTransfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlainApprove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlainTransferFrom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlainOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InputId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlainDelegatedOutput_default_instance_),
};

const char descriptor_table_protodef_token_2ftransaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027token/transaction.proto\"G\n\020TokenTransa"
  "ction\022)\n\014plain_action\030\001 \001(\0132\021.PlainToken"
  "ActionH\000B\010\n\006action\"\355\001\n\020PlainTokenAction\022"
  "$\n\014plain_import\030\001 \001(\0132\014.PlainImportH\000\022(\n"
  "\016plain_transfer\030\002 \001(\0132\016.PlainTransferH\000\022"
  "&\n\014plain_redeem\030\003 \001(\0132\016.PlainTransferH\000\022"
  "&\n\rplain_approve\030\004 \001(\0132\r.PlainApproveH\000\022"
  "1\n\023plain_transfer_From\030\005 \001(\0132\022.PlainTran"
  "sferFromH\000B\006\n\004data\",\n\013PlainImport\022\035\n\007out"
  "puts\030\001 \003(\0132\014.PlainOutput\"H\n\rPlainTransfe"
  "r\022\030\n\006inputs\030\001 \003(\0132\010.InputId\022\035\n\007outputs\030\002"
  " \003(\0132\014.PlainOutput\"x\n\014PlainApprove\022\030\n\006in"
  "puts\030\001 \003(\0132\010.InputId\0220\n\021delegated_output"
  "s\030\002 \003(\0132\025.PlainDelegatedOutput\022\034\n\006output"
  "\030\003 \001(\0132\014.PlainOutput\"}\n\021PlainTransferFro"
  "m\022\030\n\006inputs\030\001 \003(\0132\010.InputId\022\035\n\007outputs\030\002"
  " \003(\0132\014.PlainOutput\022/\n\020delegated_output\030\003"
  " \001(\0132\025.PlainDelegatedOutput\"<\n\013PlainOutp"
  "ut\022\r\n\005owner\030\001 \001(\014\022\014\n\004type\030\002 \001(\t\022\020\n\010quant"
  "ity\030\003 \001(\004\"\'\n\007InputId\022\r\n\005tx_id\030\001 \001(\t\022\r\n\005i"
  "ndex\030\002 \001(\r\"Y\n\024PlainDelegatedOutput\022\r\n\005ow"
  "ner\030\001 \001(\014\022\022\n\ndelegatees\030\002 \003(\014\022\014\n\004type\030\003 "
  "\001(\t\022\020\n\010quantity\030\004 \001(\004BQ\n#org.hyperledger"
  ".fabric.protos.tokenZ*github.com/hyperle"
  "dger/fabric/protos/tokenb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_token_2ftransaction_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_token_2ftransaction_2eproto_sccs[9] = {
  &scc_info_InputId_token_2ftransaction_2eproto.base,
  &scc_info_PlainApprove_token_2ftransaction_2eproto.base,
  &scc_info_PlainDelegatedOutput_token_2ftransaction_2eproto.base,
  &scc_info_PlainImport_token_2ftransaction_2eproto.base,
  &scc_info_PlainOutput_token_2ftransaction_2eproto.base,
  &scc_info_PlainTokenAction_token_2ftransaction_2eproto.base,
  &scc_info_PlainTransfer_token_2ftransaction_2eproto.base,
  &scc_info_PlainTransferFrom_token_2ftransaction_2eproto.base,
  &scc_info_TokenTransaction_token_2ftransaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_token_2ftransaction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_token_2ftransaction_2eproto = {
  false, false, descriptor_table_protodef_token_2ftransaction_2eproto, "token/transaction.proto", 992,
  &descriptor_table_token_2ftransaction_2eproto_once, descriptor_table_token_2ftransaction_2eproto_sccs, descriptor_table_token_2ftransaction_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_token_2ftransaction_2eproto::offsets,
  file_level_metadata_token_2ftransaction_2eproto, 9, file_level_enum_descriptors_token_2ftransaction_2eproto, file_level_service_descriptors_token_2ftransaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_token_2ftransaction_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_token_2ftransaction_2eproto)), true);

// ===================================================================

void TokenTransaction::InitAsDefaultInstance() {
  ::_TokenTransaction_default_instance_.plain_action_ = const_cast< ::PlainTokenAction*>(
      ::PlainTokenAction::internal_default_instance());
}
class TokenTransaction::_Internal {
 public:
  static const ::PlainTokenAction& plain_action(const TokenTransaction* msg);
};

const ::PlainTokenAction&
TokenTransaction::_Internal::plain_action(const TokenTransaction* msg) {
  return *msg->action_.plain_action_;
}
void TokenTransaction::set_allocated_plain_action(::PlainTokenAction* plain_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (plain_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plain_action);
    if (message_arena != submessage_arena) {
      plain_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plain_action, submessage_arena);
    }
    set_has_plain_action();
    action_.plain_action_ = plain_action;
  }
  // @@protoc_insertion_point(field_set_allocated:TokenTransaction.plain_action)
}
TokenTransaction::TokenTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TokenTransaction)
}
TokenTransaction::TokenTransaction(const TokenTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kPlainAction: {
      _internal_mutable_plain_action()->::PlainTokenAction::MergeFrom(from._internal_plain_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TokenTransaction)
}

void TokenTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenTransaction_token_2ftransaction_2eproto.base);
  clear_has_action();
}

TokenTransaction::~TokenTransaction() {
  // @@protoc_insertion_point(destructor:TokenTransaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TokenTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void TokenTransaction::ArenaDtor(void* object) {
  TokenTransaction* _this = reinterpret_cast< TokenTransaction* >(object);
  (void)_this;
}
void TokenTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TokenTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenTransaction& TokenTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenTransaction_token_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void TokenTransaction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:TokenTransaction)
  switch (action_case()) {
    case kPlainAction: {
      if (GetArena() == nullptr) {
        delete action_.plain_action_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void TokenTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:TokenTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlainTokenAction plain_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plain_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TokenTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlainTokenAction plain_action = 1;
  if (_internal_has_plain_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plain_action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TokenTransaction)
  return target;
}

size_t TokenTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TokenTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // .PlainTokenAction plain_action = 1;
    case kPlainAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.plain_action_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TokenTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TokenTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TokenTransaction)
    MergeFrom(*source);
  }
}

void TokenTransaction::MergeFrom(const TokenTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TokenTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kPlainAction: {
      _internal_mutable_plain_action()->::PlainTokenAction::MergeFrom(from._internal_plain_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void TokenTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TokenTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenTransaction::CopyFrom(const TokenTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TokenTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenTransaction::IsInitialized() const {
  return true;
}

void TokenTransaction::InternalSwap(TokenTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlainTokenAction::InitAsDefaultInstance() {
  ::_PlainTokenAction_default_instance_.plain_import_ = const_cast< ::PlainImport*>(
      ::PlainImport::internal_default_instance());
  ::_PlainTokenAction_default_instance_.plain_transfer_ = const_cast< ::PlainTransfer*>(
      ::PlainTransfer::internal_default_instance());
  ::_PlainTokenAction_default_instance_.plain_redeem_ = const_cast< ::PlainTransfer*>(
      ::PlainTransfer::internal_default_instance());
  ::_PlainTokenAction_default_instance_.plain_approve_ = const_cast< ::PlainApprove*>(
      ::PlainApprove::internal_default_instance());
  ::_PlainTokenAction_default_instance_.plain_transfer_from_ = const_cast< ::PlainTransferFrom*>(
      ::PlainTransferFrom::internal_default_instance());
}
class PlainTokenAction::_Internal {
 public:
  static const ::PlainImport& plain_import(const PlainTokenAction* msg);
  static const ::PlainTransfer& plain_transfer(const PlainTokenAction* msg);
  static const ::PlainTransfer& plain_redeem(const PlainTokenAction* msg);
  static const ::PlainApprove& plain_approve(const PlainTokenAction* msg);
  static const ::PlainTransferFrom& plain_transfer_from(const PlainTokenAction* msg);
};

const ::PlainImport&
PlainTokenAction::_Internal::plain_import(const PlainTokenAction* msg) {
  return *msg->data_.plain_import_;
}
const ::PlainTransfer&
PlainTokenAction::_Internal::plain_transfer(const PlainTokenAction* msg) {
  return *msg->data_.plain_transfer_;
}
const ::PlainTransfer&
PlainTokenAction::_Internal::plain_redeem(const PlainTokenAction* msg) {
  return *msg->data_.plain_redeem_;
}
const ::PlainApprove&
PlainTokenAction::_Internal::plain_approve(const PlainTokenAction* msg) {
  return *msg->data_.plain_approve_;
}
const ::PlainTransferFrom&
PlainTokenAction::_Internal::plain_transfer_from(const PlainTokenAction* msg) {
  return *msg->data_.plain_transfer_from_;
}
void PlainTokenAction::set_allocated_plain_import(::PlainImport* plain_import) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (plain_import) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plain_import);
    if (message_arena != submessage_arena) {
      plain_import = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plain_import, submessage_arena);
    }
    set_has_plain_import();
    data_.plain_import_ = plain_import;
  }
  // @@protoc_insertion_point(field_set_allocated:PlainTokenAction.plain_import)
}
void PlainTokenAction::set_allocated_plain_transfer(::PlainTransfer* plain_transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (plain_transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plain_transfer);
    if (message_arena != submessage_arena) {
      plain_transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plain_transfer, submessage_arena);
    }
    set_has_plain_transfer();
    data_.plain_transfer_ = plain_transfer;
  }
  // @@protoc_insertion_point(field_set_allocated:PlainTokenAction.plain_transfer)
}
void PlainTokenAction::set_allocated_plain_redeem(::PlainTransfer* plain_redeem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (plain_redeem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plain_redeem);
    if (message_arena != submessage_arena) {
      plain_redeem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plain_redeem, submessage_arena);
    }
    set_has_plain_redeem();
    data_.plain_redeem_ = plain_redeem;
  }
  // @@protoc_insertion_point(field_set_allocated:PlainTokenAction.plain_redeem)
}
void PlainTokenAction::set_allocated_plain_approve(::PlainApprove* plain_approve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (plain_approve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plain_approve);
    if (message_arena != submessage_arena) {
      plain_approve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plain_approve, submessage_arena);
    }
    set_has_plain_approve();
    data_.plain_approve_ = plain_approve;
  }
  // @@protoc_insertion_point(field_set_allocated:PlainTokenAction.plain_approve)
}
void PlainTokenAction::set_allocated_plain_transfer_from(::PlainTransferFrom* plain_transfer_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (plain_transfer_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plain_transfer_from);
    if (message_arena != submessage_arena) {
      plain_transfer_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plain_transfer_from, submessage_arena);
    }
    set_has_plain_transfer_from();
    data_.plain_transfer_from_ = plain_transfer_from;
  }
  // @@protoc_insertion_point(field_set_allocated:PlainTokenAction.plain_transfer_From)
}
PlainTokenAction::PlainTokenAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlainTokenAction)
}
PlainTokenAction::PlainTokenAction(const PlainTokenAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kPlainImport: {
      _internal_mutable_plain_import()->::PlainImport::MergeFrom(from._internal_plain_import());
      break;
    }
    case kPlainTransfer: {
      _internal_mutable_plain_transfer()->::PlainTransfer::MergeFrom(from._internal_plain_transfer());
      break;
    }
    case kPlainRedeem: {
      _internal_mutable_plain_redeem()->::PlainTransfer::MergeFrom(from._internal_plain_redeem());
      break;
    }
    case kPlainApprove: {
      _internal_mutable_plain_approve()->::PlainApprove::MergeFrom(from._internal_plain_approve());
      break;
    }
    case kPlainTransferFrom: {
      _internal_mutable_plain_transfer_from()->::PlainTransferFrom::MergeFrom(from._internal_plain_transfer_from());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PlainTokenAction)
}

void PlainTokenAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlainTokenAction_token_2ftransaction_2eproto.base);
  clear_has_data();
}

PlainTokenAction::~PlainTokenAction() {
  // @@protoc_insertion_point(destructor:PlainTokenAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlainTokenAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void PlainTokenAction::ArenaDtor(void* object) {
  PlainTokenAction* _this = reinterpret_cast< PlainTokenAction* >(object);
  (void)_this;
}
void PlainTokenAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlainTokenAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlainTokenAction& PlainTokenAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlainTokenAction_token_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PlainTokenAction::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:PlainTokenAction)
  switch (data_case()) {
    case kPlainImport: {
      if (GetArena() == nullptr) {
        delete data_.plain_import_;
      }
      break;
    }
    case kPlainTransfer: {
      if (GetArena() == nullptr) {
        delete data_.plain_transfer_;
      }
      break;
    }
    case kPlainRedeem: {
      if (GetArena() == nullptr) {
        delete data_.plain_redeem_;
      }
      break;
    }
    case kPlainApprove: {
      if (GetArena() == nullptr) {
        delete data_.plain_approve_;
      }
      break;
    }
    case kPlainTransferFrom: {
      if (GetArena() == nullptr) {
        delete data_.plain_transfer_from_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void PlainTokenAction::Clear() {
// @@protoc_insertion_point(message_clear_start:PlainTokenAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlainTokenAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PlainImport plain_import = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plain_import(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlainTransfer plain_transfer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_plain_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlainTransfer plain_redeem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_plain_redeem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlainApprove plain_approve = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_plain_approve(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlainTransferFrom plain_transfer_From = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_plain_transfer_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlainTokenAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlainTokenAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlainImport plain_import = 1;
  if (_internal_has_plain_import()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plain_import(this), target, stream);
  }

  // .PlainTransfer plain_transfer = 2;
  if (_internal_has_plain_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::plain_transfer(this), target, stream);
  }

  // .PlainTransfer plain_redeem = 3;
  if (_internal_has_plain_redeem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::plain_redeem(this), target, stream);
  }

  // .PlainApprove plain_approve = 4;
  if (_internal_has_plain_approve()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::plain_approve(this), target, stream);
  }

  // .PlainTransferFrom plain_transfer_From = 5;
  if (_internal_has_plain_transfer_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::plain_transfer_from(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlainTokenAction)
  return target;
}

size_t PlainTokenAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlainTokenAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .PlainImport plain_import = 1;
    case kPlainImport: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.plain_import_);
      break;
    }
    // .PlainTransfer plain_transfer = 2;
    case kPlainTransfer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.plain_transfer_);
      break;
    }
    // .PlainTransfer plain_redeem = 3;
    case kPlainRedeem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.plain_redeem_);
      break;
    }
    // .PlainApprove plain_approve = 4;
    case kPlainApprove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.plain_approve_);
      break;
    }
    // .PlainTransferFrom plain_transfer_From = 5;
    case kPlainTransferFrom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.plain_transfer_from_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlainTokenAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlainTokenAction)
  GOOGLE_DCHECK_NE(&from, this);
  const PlainTokenAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlainTokenAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlainTokenAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlainTokenAction)
    MergeFrom(*source);
  }
}

void PlainTokenAction::MergeFrom(const PlainTokenAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlainTokenAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kPlainImport: {
      _internal_mutable_plain_import()->::PlainImport::MergeFrom(from._internal_plain_import());
      break;
    }
    case kPlainTransfer: {
      _internal_mutable_plain_transfer()->::PlainTransfer::MergeFrom(from._internal_plain_transfer());
      break;
    }
    case kPlainRedeem: {
      _internal_mutable_plain_redeem()->::PlainTransfer::MergeFrom(from._internal_plain_redeem());
      break;
    }
    case kPlainApprove: {
      _internal_mutable_plain_approve()->::PlainApprove::MergeFrom(from._internal_plain_approve());
      break;
    }
    case kPlainTransferFrom: {
      _internal_mutable_plain_transfer_from()->::PlainTransferFrom::MergeFrom(from._internal_plain_transfer_from());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void PlainTokenAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlainTokenAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlainTokenAction::CopyFrom(const PlainTokenAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlainTokenAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlainTokenAction::IsInitialized() const {
  return true;
}

void PlainTokenAction::InternalSwap(PlainTokenAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlainTokenAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlainImport::InitAsDefaultInstance() {
}
class PlainImport::_Internal {
 public:
};

PlainImport::PlainImport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlainImport)
}
PlainImport::PlainImport(const PlainImport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlainImport)
}

void PlainImport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlainImport_token_2ftransaction_2eproto.base);
}

PlainImport::~PlainImport() {
  // @@protoc_insertion_point(destructor:PlainImport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlainImport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlainImport::ArenaDtor(void* object) {
  PlainImport* _this = reinterpret_cast< PlainImport* >(object);
  (void)_this;
}
void PlainImport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlainImport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlainImport& PlainImport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlainImport_token_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PlainImport::Clear() {
// @@protoc_insertion_point(message_clear_start:PlainImport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlainImport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlainOutput outputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlainImport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlainImport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlainOutput outputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlainImport)
  return target;
}

size_t PlainImport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlainImport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlainOutput outputs = 1;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlainImport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlainImport)
  GOOGLE_DCHECK_NE(&from, this);
  const PlainImport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlainImport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlainImport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlainImport)
    MergeFrom(*source);
  }
}

void PlainImport::MergeFrom(const PlainImport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlainImport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
}

void PlainImport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlainImport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlainImport::CopyFrom(const PlainImport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlainImport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlainImport::IsInitialized() const {
  return true;
}

void PlainImport::InternalSwap(PlainImport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlainImport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlainTransfer::InitAsDefaultInstance() {
}
class PlainTransfer::_Internal {
 public:
};

PlainTransfer::PlainTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlainTransfer)
}
PlainTransfer::PlainTransfer(const PlainTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlainTransfer)
}

void PlainTransfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlainTransfer_token_2ftransaction_2eproto.base);
}

PlainTransfer::~PlainTransfer() {
  // @@protoc_insertion_point(destructor:PlainTransfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlainTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlainTransfer::ArenaDtor(void* object) {
  PlainTransfer* _this = reinterpret_cast< PlainTransfer* >(object);
  (void)_this;
}
void PlainTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlainTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlainTransfer& PlainTransfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlainTransfer_token_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PlainTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:PlainTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlainTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .InputId inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlainOutput outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlainTransfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlainTransfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .InputId inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inputs(i), target, stream);
  }

  // repeated .PlainOutput outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlainTransfer)
  return target;
}

size_t PlainTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlainTransfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InputId inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlainOutput outputs = 2;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlainTransfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlainTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const PlainTransfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlainTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlainTransfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlainTransfer)
    MergeFrom(*source);
  }
}

void PlainTransfer::MergeFrom(const PlainTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlainTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
}

void PlainTransfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlainTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlainTransfer::CopyFrom(const PlainTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlainTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlainTransfer::IsInitialized() const {
  return true;
}

void PlainTransfer::InternalSwap(PlainTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlainTransfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlainApprove::InitAsDefaultInstance() {
  ::_PlainApprove_default_instance_._instance.get_mutable()->output_ = const_cast< ::PlainOutput*>(
      ::PlainOutput::internal_default_instance());
}
class PlainApprove::_Internal {
 public:
  static const ::PlainOutput& output(const PlainApprove* msg);
};

const ::PlainOutput&
PlainApprove::_Internal::output(const PlainApprove* msg) {
  return *msg->output_;
}
PlainApprove::PlainApprove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  delegated_outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlainApprove)
}
PlainApprove::PlainApprove(const PlainApprove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      delegated_outputs_(from.delegated_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output()) {
    output_ = new ::PlainOutput(*from.output_);
  } else {
    output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlainApprove)
}

void PlainApprove::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlainApprove_token_2ftransaction_2eproto.base);
  output_ = nullptr;
}

PlainApprove::~PlainApprove() {
  // @@protoc_insertion_point(destructor:PlainApprove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlainApprove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete output_;
}

void PlainApprove::ArenaDtor(void* object) {
  PlainApprove* _this = reinterpret_cast< PlainApprove* >(object);
  (void)_this;
}
void PlainApprove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlainApprove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlainApprove& PlainApprove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlainApprove_token_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PlainApprove::Clear() {
// @@protoc_insertion_point(message_clear_start:PlainApprove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  delegated_outputs_.Clear();
  if (GetArena() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlainApprove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .InputId inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlainDelegatedOutput delegated_outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegated_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlainOutput output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlainApprove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlainApprove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .InputId inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inputs(i), target, stream);
  }

  // repeated .PlainDelegatedOutput delegated_outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegated_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_delegated_outputs(i), target, stream);
  }

  // .PlainOutput output = 3;
  if (this->has_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::output(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlainApprove)
  return target;
}

size_t PlainApprove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlainApprove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InputId inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlainDelegatedOutput delegated_outputs = 2;
  total_size += 1UL * this->_internal_delegated_outputs_size();
  for (const auto& msg : this->delegated_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlainOutput output = 3;
  if (this->has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlainApprove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlainApprove)
  GOOGLE_DCHECK_NE(&from, this);
  const PlainApprove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlainApprove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlainApprove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlainApprove)
    MergeFrom(*source);
  }
}

void PlainApprove::MergeFrom(const PlainApprove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlainApprove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  delegated_outputs_.MergeFrom(from.delegated_outputs_);
  if (from.has_output()) {
    _internal_mutable_output()->::PlainOutput::MergeFrom(from._internal_output());
  }
}

void PlainApprove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlainApprove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlainApprove::CopyFrom(const PlainApprove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlainApprove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlainApprove::IsInitialized() const {
  return true;
}

void PlainApprove::InternalSwap(PlainApprove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  delegated_outputs_.InternalSwap(&other->delegated_outputs_);
  swap(output_, other->output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlainApprove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlainTransferFrom::InitAsDefaultInstance() {
  ::_PlainTransferFrom_default_instance_._instance.get_mutable()->delegated_output_ = const_cast< ::PlainDelegatedOutput*>(
      ::PlainDelegatedOutput::internal_default_instance());
}
class PlainTransferFrom::_Internal {
 public:
  static const ::PlainDelegatedOutput& delegated_output(const PlainTransferFrom* msg);
};

const ::PlainDelegatedOutput&
PlainTransferFrom::_Internal::delegated_output(const PlainTransferFrom* msg) {
  return *msg->delegated_output_;
}
PlainTransferFrom::PlainTransferFrom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlainTransferFrom)
}
PlainTransferFrom::PlainTransferFrom(const PlainTransferFrom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_delegated_output()) {
    delegated_output_ = new ::PlainDelegatedOutput(*from.delegated_output_);
  } else {
    delegated_output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PlainTransferFrom)
}

void PlainTransferFrom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlainTransferFrom_token_2ftransaction_2eproto.base);
  delegated_output_ = nullptr;
}

PlainTransferFrom::~PlainTransferFrom() {
  // @@protoc_insertion_point(destructor:PlainTransferFrom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlainTransferFrom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete delegated_output_;
}

void PlainTransferFrom::ArenaDtor(void* object) {
  PlainTransferFrom* _this = reinterpret_cast< PlainTransferFrom* >(object);
  (void)_this;
}
void PlainTransferFrom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlainTransferFrom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlainTransferFrom& PlainTransferFrom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlainTransferFrom_token_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PlainTransferFrom::Clear() {
// @@protoc_insertion_point(message_clear_start:PlainTransferFrom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  if (GetArena() == nullptr && delegated_output_ != nullptr) {
    delete delegated_output_;
  }
  delegated_output_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlainTransferFrom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .InputId inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PlainOutput outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .PlainDelegatedOutput delegated_output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegated_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlainTransferFrom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlainTransferFrom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .InputId inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inputs(i), target, stream);
  }

  // repeated .PlainOutput outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  // .PlainDelegatedOutput delegated_output = 3;
  if (this->has_delegated_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::delegated_output(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlainTransferFrom)
  return target;
}

size_t PlainTransferFrom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlainTransferFrom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .InputId inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlainOutput outputs = 2;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PlainDelegatedOutput delegated_output = 3;
  if (this->has_delegated_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delegated_output_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlainTransferFrom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlainTransferFrom)
  GOOGLE_DCHECK_NE(&from, this);
  const PlainTransferFrom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlainTransferFrom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlainTransferFrom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlainTransferFrom)
    MergeFrom(*source);
  }
}

void PlainTransferFrom::MergeFrom(const PlainTransferFrom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlainTransferFrom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.has_delegated_output()) {
    _internal_mutable_delegated_output()->::PlainDelegatedOutput::MergeFrom(from._internal_delegated_output());
  }
}

void PlainTransferFrom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlainTransferFrom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlainTransferFrom::CopyFrom(const PlainTransferFrom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlainTransferFrom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlainTransferFrom::IsInitialized() const {
  return true;
}

void PlainTransferFrom::InternalSwap(PlainTransferFrom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  swap(delegated_output_, other->delegated_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlainTransferFrom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlainOutput::InitAsDefaultInstance() {
}
class PlainOutput::_Internal {
 public:
};

PlainOutput::PlainOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlainOutput)
}
PlainOutput::PlainOutput(const PlainOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_owner(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:PlainOutput)
}

void PlainOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlainOutput_token_2ftransaction_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quantity_ = PROTOBUF_ULONGLONG(0);
}

PlainOutput::~PlainOutput() {
  // @@protoc_insertion_point(destructor:PlainOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlainOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlainOutput::ArenaDtor(void* object) {
  PlainOutput* _this = reinterpret_cast< PlainOutput* >(object);
  (void)_this;
}
void PlainOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlainOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlainOutput& PlainOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlainOutput_token_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PlainOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:PlainOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quantity_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlainOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlainOutput.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlainOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlainOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1;
  if (this->owner().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlainOutput.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // uint64 quantity = 3;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlainOutput)
  return target;
}

size_t PlainOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlainOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 quantity = 3;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlainOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlainOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const PlainOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlainOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlainOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlainOutput)
    MergeFrom(*source);
  }
}

void PlainOutput::MergeFrom(const PlainOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlainOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void PlainOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlainOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlainOutput::CopyFrom(const PlainOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlainOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlainOutput::IsInitialized() const {
  return true;
}

void PlainOutput::InternalSwap(PlainOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(quantity_, other->quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlainOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputId::InitAsDefaultInstance() {
}
class InputId::_Internal {
 public:
};

InputId::InputId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InputId)
}
InputId::InputId(const InputId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_id().empty()) {
    tx_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_id(),
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:InputId)
}

void InputId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputId_token_2ftransaction_2eproto.base);
  tx_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

InputId::~InputId() {
  // @@protoc_insertion_point(destructor:InputId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputId::ArenaDtor(void* object) {
  InputId* _this = reinterpret_cast< InputId* >(object);
  (void)_this;
}
void InputId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputId& InputId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputId_token_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void InputId::Clear() {
// @@protoc_insertion_point(message_clear_start:InputId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InputId.tx_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InputId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_id = 1;
  if (this->tx_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_id().data(), static_cast<int>(this->_internal_tx_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InputId.tx_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx_id(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InputId)
  return target;
}

size_t InputId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InputId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_id = 1;
  if (this->tx_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_id());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InputId)
  GOOGLE_DCHECK_NE(&from, this);
  const InputId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InputId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InputId)
    MergeFrom(*source);
  }
}

void InputId::MergeFrom(const InputId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InputId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_id().size() > 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void InputId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InputId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputId::CopyFrom(const InputId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InputId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputId::IsInitialized() const {
  return true;
}

void InputId::InternalSwap(InputId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_id_.Swap(&other->tx_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlainDelegatedOutput::InitAsDefaultInstance() {
}
class PlainDelegatedOutput::_Internal {
 public:
};

PlainDelegatedOutput::PlainDelegatedOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  delegatees_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlainDelegatedOutput)
}
PlainDelegatedOutput::PlainDelegatedOutput(const PlainDelegatedOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      delegatees_(from.delegatees_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_owner(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:PlainDelegatedOutput)
}

void PlainDelegatedOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlainDelegatedOutput_token_2ftransaction_2eproto.base);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quantity_ = PROTOBUF_ULONGLONG(0);
}

PlainDelegatedOutput::~PlainDelegatedOutput() {
  // @@protoc_insertion_point(destructor:PlainDelegatedOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlainDelegatedOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlainDelegatedOutput::ArenaDtor(void* object) {
  PlainDelegatedOutput* _this = reinterpret_cast< PlainDelegatedOutput* >(object);
  (void)_this;
}
void PlainDelegatedOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlainDelegatedOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlainDelegatedOutput& PlainDelegatedOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlainDelegatedOutput_token_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PlainDelegatedOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:PlainDelegatedOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegatees_.Clear();
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quantity_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlainDelegatedOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes delegatees = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_delegatees();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlainDelegatedOutput.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlainDelegatedOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlainDelegatedOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1;
  if (this->owner().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // repeated bytes delegatees = 2;
  for (int i = 0, n = this->_internal_delegatees_size(); i < n; i++) {
    const auto& s = this->_internal_delegatees(i);
    target = stream->WriteBytes(2, s, target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlainDelegatedOutput.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // uint64 quantity = 4;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlainDelegatedOutput)
  return target;
}

size_t PlainDelegatedOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlainDelegatedOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes delegatees = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(delegatees_.size());
  for (int i = 0, n = delegatees_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      delegatees_.Get(i));
  }

  // bytes owner = 1;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 quantity = 4;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlainDelegatedOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlainDelegatedOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const PlainDelegatedOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlainDelegatedOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlainDelegatedOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlainDelegatedOutput)
    MergeFrom(*source);
  }
}

void PlainDelegatedOutput::MergeFrom(const PlainDelegatedOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlainDelegatedOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delegatees_.MergeFrom(from.delegatees_);
  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void PlainDelegatedOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlainDelegatedOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlainDelegatedOutput::CopyFrom(const PlainDelegatedOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlainDelegatedOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlainDelegatedOutput::IsInitialized() const {
  return true;
}

void PlainDelegatedOutput::InternalSwap(PlainDelegatedOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delegatees_.InternalSwap(&other->delegatees_);
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(quantity_, other->quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlainDelegatedOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TokenTransaction* Arena::CreateMaybeMessage< ::TokenTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TokenTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::PlainTokenAction* Arena::CreateMaybeMessage< ::PlainTokenAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlainTokenAction >(arena);
}
template<> PROTOBUF_NOINLINE ::PlainImport* Arena::CreateMaybeMessage< ::PlainImport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlainImport >(arena);
}
template<> PROTOBUF_NOINLINE ::PlainTransfer* Arena::CreateMaybeMessage< ::PlainTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlainTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::PlainApprove* Arena::CreateMaybeMessage< ::PlainApprove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlainApprove >(arena);
}
template<> PROTOBUF_NOINLINE ::PlainTransferFrom* Arena::CreateMaybeMessage< ::PlainTransferFrom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlainTransferFrom >(arena);
}
template<> PROTOBUF_NOINLINE ::PlainOutput* Arena::CreateMaybeMessage< ::PlainOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlainOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::InputId* Arena::CreateMaybeMessage< ::InputId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InputId >(arena);
}
template<> PROTOBUF_NOINLINE ::PlainDelegatedOutput* Arena::CreateMaybeMessage< ::PlainDelegatedOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlainDelegatedOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

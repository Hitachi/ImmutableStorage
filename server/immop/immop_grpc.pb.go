// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package immop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ImmOperationClient is the client API for ImmOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImmOperationClient interface {
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*Reply, error)
	ExportService(ctx context.Context, in *ExportServiceRequest, opts ...grpc.CallOption) (*ExportServiceReply, error)
	ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceReply, error)
	ImportService(ctx context.Context, in *ImportServiceRequest, opts ...grpc.CallOption) (*Reply, error)
	ListImportedService(ctx context.Context, in *ListImportedServiceRequest, opts ...grpc.CallOption) (*ListImportedServiceSummary, error)
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Reply, error)
	RemoveServiceFromCh(ctx context.Context, in *RemoveServiceRequest, opts ...grpc.CallOption) (*Reply, error)
	GetConfigBlock(ctx context.Context, in *GetConfigBlockReq, opts ...grpc.CallOption) (*Block, error)
	JoinChannel(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Prop, error)
	SendSignedProp(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Reply, error)
	SendSignedPropAndRspDone(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Prop, error)
	SendSignedPropAndRsp(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Prop, error)
	SendSignedPropOrderer(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Prop, error)
	ActivateChannel(ctx context.Context, in *ActivateChannelReq, opts ...grpc.CallOption) (*Prop, error)
	InstallChainCode(ctx context.Context, in *InstallCC, opts ...grpc.CallOption) (*Prop, error)
	Instantiate(ctx context.Context, in *InstantiateReq, opts ...grpc.CallOption) (*Prop, error)
	ListChannelInPeer(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Prop, error)
	ListChannelInMyOU(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Prop, error)
	ListChainCode(ctx context.Context, in *ListChainCodeReq, opts ...grpc.CallOption) (*Prop, error)
	RecordLedger(ctx context.Context, in *RecordLedgerReq, opts ...grpc.CallOption) (*Prop, error)
	ReadLedger(ctx context.Context, in *ReadLedgerReq, opts ...grpc.CallOption) (*Prop, error)
	QueryBlockByTxID(ctx context.Context, in *QueryBlockByTxIDReq, opts ...grpc.CallOption) (*Prop, error)
}

type immOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewImmOperationClient(cc grpc.ClientConnInterface) ImmOperationClient {
	return &immOperationClient{cc}
}

func (c *immOperationClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) ExportService(ctx context.Context, in *ExportServiceRequest, opts ...grpc.CallOption) (*ExportServiceReply, error) {
	out := new(ExportServiceReply)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/ExportService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceReply, error) {
	out := new(ListServiceReply)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/ListService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) ImportService(ctx context.Context, in *ImportServiceRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/ImportService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) ListImportedService(ctx context.Context, in *ListImportedServiceRequest, opts ...grpc.CallOption) (*ListImportedServiceSummary, error) {
	out := new(ListImportedServiceSummary)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/ListImportedService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) RemoveServiceFromCh(ctx context.Context, in *RemoveServiceRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/RemoveServiceFromCh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) GetConfigBlock(ctx context.Context, in *GetConfigBlockReq, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/GetConfigBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) JoinChannel(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/JoinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) SendSignedProp(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/SendSignedProp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) SendSignedPropAndRspDone(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/SendSignedPropAndRspDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) SendSignedPropAndRsp(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/SendSignedPropAndRsp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) SendSignedPropOrderer(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/SendSignedPropOrderer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) ActivateChannel(ctx context.Context, in *ActivateChannelReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/ActivateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) InstallChainCode(ctx context.Context, in *InstallCC, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/InstallChainCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) Instantiate(ctx context.Context, in *InstantiateReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/Instantiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) ListChannelInPeer(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/ListChannelInPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) ListChannelInMyOU(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/ListChannelInMyOU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) ListChainCode(ctx context.Context, in *ListChainCodeReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/ListChainCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) RecordLedger(ctx context.Context, in *RecordLedgerReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/RecordLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) ReadLedger(ctx context.Context, in *ReadLedgerReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/ReadLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *immOperationClient) QueryBlockByTxID(ctx context.Context, in *QueryBlockByTxIDReq, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/immop.ImmOperation/QueryBlockByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImmOperationServer is the server API for ImmOperation service.
// All implementations should embed UnimplementedImmOperationServer
// for forward compatibility
type ImmOperationServer interface {
	CreateService(context.Context, *CreateServiceRequest) (*Reply, error)
	ExportService(context.Context, *ExportServiceRequest) (*ExportServiceReply, error)
	ListService(context.Context, *ListServiceRequest) (*ListServiceReply, error)
	ImportService(context.Context, *ImportServiceRequest) (*Reply, error)
	ListImportedService(context.Context, *ListImportedServiceRequest) (*ListImportedServiceSummary, error)
	CreateChannel(context.Context, *CreateChannelRequest) (*Reply, error)
	RemoveServiceFromCh(context.Context, *RemoveServiceRequest) (*Reply, error)
	GetConfigBlock(context.Context, *GetConfigBlockReq) (*Block, error)
	JoinChannel(context.Context, *PropReq) (*Prop, error)
	SendSignedProp(context.Context, *PropReq) (*Reply, error)
	SendSignedPropAndRspDone(context.Context, *PropReq) (*Prop, error)
	SendSignedPropAndRsp(context.Context, *PropReq) (*Prop, error)
	SendSignedPropOrderer(context.Context, *PropReq) (*Prop, error)
	ActivateChannel(context.Context, *ActivateChannelReq) (*Prop, error)
	InstallChainCode(context.Context, *InstallCC) (*Prop, error)
	Instantiate(context.Context, *InstantiateReq) (*Prop, error)
	ListChannelInPeer(context.Context, *Credential) (*Prop, error)
	ListChannelInMyOU(context.Context, *Credential) (*Prop, error)
	ListChainCode(context.Context, *ListChainCodeReq) (*Prop, error)
	RecordLedger(context.Context, *RecordLedgerReq) (*Prop, error)
	ReadLedger(context.Context, *ReadLedgerReq) (*Prop, error)
	QueryBlockByTxID(context.Context, *QueryBlockByTxIDReq) (*Prop, error)
}

// UnimplementedImmOperationServer should be embedded to have forward compatible implementations.
type UnimplementedImmOperationServer struct {
}

func (*UnimplementedImmOperationServer) CreateService(context.Context, *CreateServiceRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (*UnimplementedImmOperationServer) ExportService(context.Context, *ExportServiceRequest) (*ExportServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportService not implemented")
}
func (*UnimplementedImmOperationServer) ListService(context.Context, *ListServiceRequest) (*ListServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (*UnimplementedImmOperationServer) ImportService(context.Context, *ImportServiceRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportService not implemented")
}
func (*UnimplementedImmOperationServer) ListImportedService(context.Context, *ListImportedServiceRequest) (*ListImportedServiceSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImportedService not implemented")
}
func (*UnimplementedImmOperationServer) CreateChannel(context.Context, *CreateChannelRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (*UnimplementedImmOperationServer) RemoveServiceFromCh(context.Context, *RemoveServiceRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServiceFromCh not implemented")
}
func (*UnimplementedImmOperationServer) GetConfigBlock(context.Context, *GetConfigBlockReq) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigBlock not implemented")
}
func (*UnimplementedImmOperationServer) JoinChannel(context.Context, *PropReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (*UnimplementedImmOperationServer) SendSignedProp(context.Context, *PropReq) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignedProp not implemented")
}
func (*UnimplementedImmOperationServer) SendSignedPropAndRspDone(context.Context, *PropReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignedPropAndRspDone not implemented")
}
func (*UnimplementedImmOperationServer) SendSignedPropAndRsp(context.Context, *PropReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignedPropAndRsp not implemented")
}
func (*UnimplementedImmOperationServer) SendSignedPropOrderer(context.Context, *PropReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignedPropOrderer not implemented")
}
func (*UnimplementedImmOperationServer) ActivateChannel(context.Context, *ActivateChannelReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateChannel not implemented")
}
func (*UnimplementedImmOperationServer) InstallChainCode(context.Context, *InstallCC) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallChainCode not implemented")
}
func (*UnimplementedImmOperationServer) Instantiate(context.Context, *InstantiateReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Instantiate not implemented")
}
func (*UnimplementedImmOperationServer) ListChannelInPeer(context.Context, *Credential) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannelInPeer not implemented")
}
func (*UnimplementedImmOperationServer) ListChannelInMyOU(context.Context, *Credential) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannelInMyOU not implemented")
}
func (*UnimplementedImmOperationServer) ListChainCode(context.Context, *ListChainCodeReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChainCode not implemented")
}
func (*UnimplementedImmOperationServer) RecordLedger(context.Context, *RecordLedgerReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordLedger not implemented")
}
func (*UnimplementedImmOperationServer) ReadLedger(context.Context, *ReadLedgerReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadLedger not implemented")
}
func (*UnimplementedImmOperationServer) QueryBlockByTxID(context.Context, *QueryBlockByTxIDReq) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockByTxID not implemented")
}

func RegisterImmOperationServer(s *grpc.Server, srv ImmOperationServer) {
	s.RegisterService(&_ImmOperation_serviceDesc, srv)
}

func _ImmOperation_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_ExportService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).ExportService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/ExportService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).ExportService(ctx, req.(*ExportServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/ListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).ListService(ctx, req.(*ListServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_ImportService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).ImportService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/ImportService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).ImportService(ctx, req.(*ImportServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_ListImportedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImportedServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).ListImportedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/ListImportedService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).ListImportedService(ctx, req.(*ListImportedServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_RemoveServiceFromCh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).RemoveServiceFromCh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/RemoveServiceFromCh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).RemoveServiceFromCh(ctx, req.(*RemoveServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_GetConfigBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).GetConfigBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/GetConfigBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).GetConfigBlock(ctx, req.(*GetConfigBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_JoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).JoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/JoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).JoinChannel(ctx, req.(*PropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_SendSignedProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).SendSignedProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/SendSignedProp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).SendSignedProp(ctx, req.(*PropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_SendSignedPropAndRspDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).SendSignedPropAndRspDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/SendSignedPropAndRspDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).SendSignedPropAndRspDone(ctx, req.(*PropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_SendSignedPropAndRsp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).SendSignedPropAndRsp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/SendSignedPropAndRsp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).SendSignedPropAndRsp(ctx, req.(*PropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_SendSignedPropOrderer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).SendSignedPropOrderer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/SendSignedPropOrderer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).SendSignedPropOrderer(ctx, req.(*PropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_ActivateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).ActivateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/ActivateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).ActivateChannel(ctx, req.(*ActivateChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_InstallChainCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallCC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).InstallChainCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/InstallChainCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).InstallChainCode(ctx, req.(*InstallCC))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_Instantiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstantiateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).Instantiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/Instantiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).Instantiate(ctx, req.(*InstantiateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_ListChannelInPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).ListChannelInPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/ListChannelInPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).ListChannelInPeer(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_ListChannelInMyOU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).ListChannelInMyOU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/ListChannelInMyOU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).ListChannelInMyOU(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_ListChainCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChainCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).ListChainCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/ListChainCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).ListChainCode(ctx, req.(*ListChainCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_RecordLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordLedgerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).RecordLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/RecordLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).RecordLedger(ctx, req.(*RecordLedgerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_ReadLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLedgerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).ReadLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/ReadLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).ReadLedger(ctx, req.(*ReadLedgerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImmOperation_QueryBlockByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockByTxIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmOperationServer).QueryBlockByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/immop.ImmOperation/QueryBlockByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmOperationServer).QueryBlockByTxID(ctx, req.(*QueryBlockByTxIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImmOperation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "immop.ImmOperation",
	HandlerType: (*ImmOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _ImmOperation_CreateService_Handler,
		},
		{
			MethodName: "ExportService",
			Handler:    _ImmOperation_ExportService_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _ImmOperation_ListService_Handler,
		},
		{
			MethodName: "ImportService",
			Handler:    _ImmOperation_ImportService_Handler,
		},
		{
			MethodName: "ListImportedService",
			Handler:    _ImmOperation_ListImportedService_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ImmOperation_CreateChannel_Handler,
		},
		{
			MethodName: "RemoveServiceFromCh",
			Handler:    _ImmOperation_RemoveServiceFromCh_Handler,
		},
		{
			MethodName: "GetConfigBlock",
			Handler:    _ImmOperation_GetConfigBlock_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _ImmOperation_JoinChannel_Handler,
		},
		{
			MethodName: "SendSignedProp",
			Handler:    _ImmOperation_SendSignedProp_Handler,
		},
		{
			MethodName: "SendSignedPropAndRspDone",
			Handler:    _ImmOperation_SendSignedPropAndRspDone_Handler,
		},
		{
			MethodName: "SendSignedPropAndRsp",
			Handler:    _ImmOperation_SendSignedPropAndRsp_Handler,
		},
		{
			MethodName: "SendSignedPropOrderer",
			Handler:    _ImmOperation_SendSignedPropOrderer_Handler,
		},
		{
			MethodName: "ActivateChannel",
			Handler:    _ImmOperation_ActivateChannel_Handler,
		},
		{
			MethodName: "InstallChainCode",
			Handler:    _ImmOperation_InstallChainCode_Handler,
		},
		{
			MethodName: "Instantiate",
			Handler:    _ImmOperation_Instantiate_Handler,
		},
		{
			MethodName: "ListChannelInPeer",
			Handler:    _ImmOperation_ListChannelInPeer_Handler,
		},
		{
			MethodName: "ListChannelInMyOU",
			Handler:    _ImmOperation_ListChannelInMyOU_Handler,
		},
		{
			MethodName: "ListChainCode",
			Handler:    _ImmOperation_ListChainCode_Handler,
		},
		{
			MethodName: "RecordLedger",
			Handler:    _ImmOperation_RecordLedger_Handler,
		},
		{
			MethodName: "ReadLedger",
			Handler:    _ImmOperation_ReadLedger_Handler,
		},
		{
			MethodName: "QueryBlockByTxID",
			Handler:    _ImmOperation_QueryBlockByTxID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/immop.proto",
}
